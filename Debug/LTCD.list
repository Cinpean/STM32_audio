
LTCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007754  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00022b5c  08007904  08007904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a460  0802a460  000400a0  2**0
                  CONTENTS
  4 .ARM          00000008  0802a460  0802a460  0003a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a468  0802a468  000400a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a468  0802a468  0003a468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a46c  0802a46c  0003a46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0802a470  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000400a0  2**0
                  CONTENTS
 10 .bss          00003094  200000a0  200000a0  000400a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20003134  20003134  000400a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030526  00000000  00000000  000400d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006d7c  00000000  00000000  000705f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000240d1  00000000  00000000  00077372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016a8  00000000  00000000  0009b448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003eb0  00000000  00000000  0009caf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a115  00000000  00000000  000a09a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000318d3  00000000  00000000  000caab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f17de  00000000  00000000  000fc388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c0  00000000  00000000  001edb66  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004a74  00000000  00000000  001edc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080078ec 	.word	0x080078ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	080078ec 	.word	0x080078ec

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MEDIANFILTER_Init>:

#include "MedianFilter.h"

int MEDIANFILTER_Init(sMedianFilter_t *medianFilter)
{
    if(medianFilter && medianFilter->medianBuffer &&
 80005b4:	b328      	cbz	r0, 8000602 <MEDIANFILTER_Init+0x4e>
{
 80005b6:	b470      	push	{r4, r5, r6}
    if(medianFilter && medianFilter->medianBuffer &&
 80005b8:	6845      	ldr	r5, [r0, #4]
 80005ba:	b1fd      	cbz	r5, 80005fc <MEDIANFILTER_Init+0x48>
        (medianFilter->numNodes % 2) && (medianFilter->numNodes > 1))
 80005bc:	6804      	ldr	r4, [r0, #0]
    if(medianFilter && medianFilter->medianBuffer &&
 80005be:	07e3      	lsls	r3, r4, #31
 80005c0:	d51c      	bpl.n	80005fc <MEDIANFILTER_Init+0x48>
        (medianFilter->numNodes % 2) && (medianFilter->numNodes > 1))
 80005c2:	2c01      	cmp	r4, #1
 80005c4:	d01a      	beq.n	80005fc <MEDIANFILTER_Init+0x48>
    {
        //initialize buffer nodes
        for(unsigned int i = 0; i < medianFilter->numNodes; i++)
 80005c6:	2100      	movs	r1, #0
 80005c8:	462a      	mov	r2, r5
        {
            medianFilter->medianBuffer[i].value = 0;
 80005ca:	460e      	mov	r6, r1
            medianFilter->medianBuffer[i].nextAge = &medianFilter->medianBuffer[(i + 1) % medianFilter->numNodes];
 80005cc:	3101      	adds	r1, #1
 80005ce:	fbb1 f3f4 	udiv	r3, r1, r4
 80005d2:	fb04 1313 	mls	r3, r4, r3, r1
 80005d6:	eb05 1303 	add.w	r3, r5, r3, lsl #4
        for(unsigned int i = 0; i < medianFilter->numNodes; i++)
 80005da:	428c      	cmp	r4, r1
            medianFilter->medianBuffer[i].nextAge = &medianFilter->medianBuffer[(i + 1) % medianFilter->numNodes];
 80005dc:	e9c2 6300 	strd	r6, r3, [r2]
            medianFilter->medianBuffer[i].nextValue = &medianFilter->medianBuffer[(i + 1) % medianFilter->numNodes];
 80005e0:	6093      	str	r3, [r2, #8]
            medianFilter->medianBuffer[(i + 1) % medianFilter->numNodes].prevValue = &medianFilter->medianBuffer[i];
 80005e2:	60da      	str	r2, [r3, #12]
        for(unsigned int i = 0; i < medianFilter->numNodes; i++)
 80005e4:	f102 0210 	add.w	r2, r2, #16
 80005e8:	d8f0      	bhi.n	80005cc <MEDIANFILTER_Init+0x18>
        }
        //initialize heads
        medianFilter->ageHead = medianFilter->medianBuffer;
        medianFilter->valueHead = medianFilter->medianBuffer;
        medianFilter->medianHead = &medianFilter->medianBuffer[medianFilter->numNodes / 2];
 80005ea:	0864      	lsrs	r4, r4, #1
 80005ec:	eb05 1404 	add.w	r4, r5, r4, lsl #4
        medianFilter->valueHead = medianFilter->medianBuffer;
 80005f0:	e9c0 5502 	strd	r5, r5, [r0, #8]
        medianFilter->medianHead = &medianFilter->medianBuffer[medianFilter->numNodes / 2];
 80005f4:	6104      	str	r4, [r0, #16]

        return 0;
 80005f6:	2000      	movs	r0, #0
    }

    return -1;
}
 80005f8:	bc70      	pop	{r4, r5, r6}
 80005fa:	4770      	bx	lr
    return -1;
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	e7fa      	b.n	80005f8 <MEDIANFILTER_Init+0x44>
 8000602:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000606:	4770      	bx	lr

08000608 <MEDIANFILTER_Insert>:

int MEDIANFILTER_Insert(sMedianFilter_t *medianFilter, int sample)
{
 8000608:	b4f0      	push	{r4, r5, r6, r7}
    unsigned int i;
    sMedianNode_t *newNode, *it;

    if(medianFilter->ageHead == medianFilter->valueHead)
 800060a:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
    {   //if oldest node is also the smallest node, increment value head
        medianFilter->valueHead = medianFilter->valueHead->nextValue;
    }

    if((medianFilter->ageHead == medianFilter->medianHead) ||
 800060e:	6906      	ldr	r6, [r0, #16]
    if(medianFilter->ageHead == medianFilter->valueHead)
 8000610:	429c      	cmp	r4, r3
        medianFilter->valueHead = medianFilter->valueHead->nextValue;
 8000612:	bf04      	itt	eq
 8000614:	68a3      	ldreq	r3, [r4, #8]
 8000616:	60c3      	streq	r3, [r0, #12]
    if((medianFilter->ageHead == medianFilter->medianHead) ||
 8000618:	42b4      	cmp	r4, r6
 800061a:	d025      	beq.n	8000668 <MEDIANFILTER_Insert+0x60>
 800061c:	6825      	ldr	r5, [r4, #0]
 800061e:	6832      	ldr	r2, [r6, #0]
 8000620:	4295      	cmp	r5, r2
 8000622:	dc21      	bgt.n	8000668 <MEDIANFILTER_Insert+0x60>
    //replace age head with new sample
    newNode = medianFilter->ageHead;
    newNode->value = sample;

    //remove age head from list
    medianFilter->ageHead->nextValue->prevValue = medianFilter->ageHead->prevValue;
 8000624:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
    newNode->value = sample;
 8000628:	6021      	str	r1, [r4, #0]
    medianFilter->ageHead->nextValue->prevValue = medianFilter->ageHead->prevValue;
 800062a:	60d5      	str	r5, [r2, #12]
    medianFilter->ageHead->prevValue->nextValue = medianFilter->ageHead->nextValue;
 800062c:	68e5      	ldr	r5, [r4, #12]
 800062e:	60aa      	str	r2, [r5, #8]
    //increment age head
    medianFilter->ageHead = medianFilter->ageHead->nextAge;

    //find new node position
    it = medianFilter->valueHead; //set iterator as value head
    for(i = 0; i < medianFilter->numNodes - 1; i++)
 8000630:	6805      	ldr	r5, [r0, #0]
    medianFilter->ageHead = medianFilter->ageHead->nextAge;
 8000632:	6862      	ldr	r2, [r4, #4]
 8000634:	6082      	str	r2, [r0, #8]
    for(i = 0; i < medianFilter->numNodes - 1; i++)
 8000636:	f1b5 0c01 	subs.w	ip, r5, #1
 800063a:	d018      	beq.n	800066e <MEDIANFILTER_Insert+0x66>
 800063c:	2200      	movs	r2, #0
 800063e:	e003      	b.n	8000648 <MEDIANFILTER_Insert+0x40>
 8000640:	3201      	adds	r2, #1
 8000642:	4594      	cmp	ip, r2
            {   //replace value head if new node is the smallest
                medianFilter->valueHead = newNode;
            }
            break;
        }
        it = it->nextValue;
 8000644:	689b      	ldr	r3, [r3, #8]
    for(i = 0; i < medianFilter->numNodes - 1; i++)
 8000646:	d004      	beq.n	8000652 <MEDIANFILTER_Insert+0x4a>
        if(sample < it->value)
 8000648:	681f      	ldr	r7, [r3, #0]
 800064a:	428f      	cmp	r7, r1
 800064c:	ddf8      	ble.n	8000640 <MEDIANFILTER_Insert+0x38>
            if(i == 0)
 800064e:	b902      	cbnz	r2, 8000652 <MEDIANFILTER_Insert+0x4a>
                medianFilter->valueHead = newNode;
 8000650:	60c4      	str	r4, [r0, #12]
    }

    //insert new node in list
    it->prevValue->nextValue = newNode;
 8000652:	68d9      	ldr	r1, [r3, #12]
    newNode->prevValue = it->prevValue;
    it->prevValue = newNode;
    newNode->nextValue = it;

    //adjust median node
    if(i >= (medianFilter->numNodes / 2))
 8000654:	ebb2 0f55 	cmp.w	r2, r5, lsr #1
    it->prevValue->nextValue = newNode;
 8000658:	608c      	str	r4, [r1, #8]
    newNode->prevValue = it->prevValue;
 800065a:	60e1      	str	r1, [r4, #12]
    it->prevValue = newNode;
 800065c:	60dc      	str	r4, [r3, #12]
    newNode->nextValue = it;
 800065e:	60a3      	str	r3, [r4, #8]
    if(i >= (medianFilter->numNodes / 2))
 8000660:	d20a      	bcs.n	8000678 <MEDIANFILTER_Insert+0x70>
    {
        medianFilter->medianHead = medianFilter->medianHead->nextValue;
    }

    return medianFilter->medianHead->value;
 8000662:	6830      	ldr	r0, [r6, #0]
}
 8000664:	bcf0      	pop	{r4, r5, r6, r7}
 8000666:	4770      	bx	lr
        medianFilter->medianHead = medianFilter->medianHead->prevValue;
 8000668:	68f6      	ldr	r6, [r6, #12]
 800066a:	6106      	str	r6, [r0, #16]
 800066c:	e7da      	b.n	8000624 <MEDIANFILTER_Insert+0x1c>
    it->prevValue->nextValue = newNode;
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	6094      	str	r4, [r2, #8]
    newNode->prevValue = it->prevValue;
 8000672:	60e2      	str	r2, [r4, #12]
    it->prevValue = newNode;
 8000674:	60dc      	str	r4, [r3, #12]
    newNode->nextValue = it;
 8000676:	60a3      	str	r3, [r4, #8]
        medianFilter->medianHead = medianFilter->medianHead->nextValue;
 8000678:	68b6      	ldr	r6, [r6, #8]
 800067a:	6106      	str	r6, [r0, #16]
    return medianFilter->medianHead->value;
 800067c:	6830      	ldr	r0, [r6, #0]
}
 800067e:	bcf0      	pop	{r4, r5, r6, r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <WM8994_Init>:
{
	return ((data & 0x00FF) << 8) | ((data & 0xFF00) >> 8);
}

bool WM8994_Init(I2C_HandleTypeDef *i2cDev)
{
 8000684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000688:	4c15      	ldr	r4, [pc, #84]	; (80006e0 <WM8994_Init+0x5c>)
 800068a:	b087      	sub	sp, #28
 800068c:	4605      	mov	r5, r0
 800068e:	f504 79c3 	add.w	r9, r4, #390	; 0x186
 8000692:	f10d 0816 	add.w	r8, sp, #22
	// i2cDev_s = i2cDev;

	for (unsigned int i = 0; i < sizeof(myConfig) / sizeof(myConfig[0]); i++)
	{
		uint16_t regValue = swap16(myConfig[i].regValue);
		if(HAL_I2C_Mem_Write(i2cDev, DEV_ADDRESS, myConfig[i].regAddress, REG_ADDR_SIZE, (uint8_t*) &regValue, REG_DATA_SIZE, HAL_MAX_DELAY) != HAL_OK)
 8000696:	f04f 37ff 	mov.w	r7, #4294967295
 800069a:	2602      	movs	r6, #2
 800069c:	e005      	b.n	80006aa <WM8994_Init+0x26>
		{
			return false;
		}
		HAL_Delay(myConfig[i].regDelay);
 800069e:	88a0      	ldrh	r0, [r4, #4]
	for (unsigned int i = 0; i < sizeof(myConfig) / sizeof(myConfig[0]); i++)
 80006a0:	3406      	adds	r4, #6
		HAL_Delay(myConfig[i].regDelay);
 80006a2:	f002 faad 	bl	8002c00 <HAL_Delay>
	for (unsigned int i = 0; i < sizeof(myConfig) / sizeof(myConfig[0]); i++)
 80006a6:	454c      	cmp	r4, r9
 80006a8:	d015      	beq.n	80006d6 <WM8994_Init+0x52>
		uint16_t regValue = swap16(myConfig[i].regValue);
 80006aa:	f8b4 c002 	ldrh.w	ip, [r4, #2]
		if(HAL_I2C_Mem_Write(i2cDev, DEV_ADDRESS, myConfig[i].regAddress, REG_ADDR_SIZE, (uint8_t*) &regValue, REG_DATA_SIZE, HAL_MAX_DELAY) != HAL_OK)
 80006ae:	8822      	ldrh	r2, [r4, #0]
 80006b0:	f8cd 8000 	str.w	r8, [sp]
		uint16_t regValue = swap16(myConfig[i].regValue);
 80006b4:	fa9c fc9c 	rev16.w	ip, ip
		if(HAL_I2C_Mem_Write(i2cDev, DEV_ADDRESS, myConfig[i].regAddress, REG_ADDR_SIZE, (uint8_t*) &regValue, REG_DATA_SIZE, HAL_MAX_DELAY) != HAL_OK)
 80006b8:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80006bc:	2302      	movs	r3, #2
 80006be:	2134      	movs	r1, #52	; 0x34
 80006c0:	4628      	mov	r0, r5
		uint16_t regValue = swap16(myConfig[i].regValue);
 80006c2:	f8ad c016 	strh.w	ip, [sp, #22]
		if(HAL_I2C_Mem_Write(i2cDev, DEV_ADDRESS, myConfig[i].regAddress, REG_ADDR_SIZE, (uint8_t*) &regValue, REG_DATA_SIZE, HAL_MAX_DELAY) != HAL_OK)
 80006c6:	f004 f937 	bl	8004938 <HAL_I2C_Mem_Write>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d0e7      	beq.n	800069e <WM8994_Init+0x1a>
			return false;
 80006ce:	2000      	movs	r0, #0
	}

	return true;
}
 80006d0:	b007      	add	sp, #28
 80006d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return true;
 80006d6:	2001      	movs	r0, #1
}
 80006d8:	b007      	add	sp, #28
 80006da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006de:	bf00      	nop
 80006e0:	08007904 	.word	0x08007904
 80006e4:	00000000 	.word	0x00000000

080006e8 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006e8:	b500      	push	{lr}

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006ea:	481d      	ldr	r0, [pc, #116]	; (8000760 <MX_ADC3_Init+0x78>)
 80006ec:	491d      	ldr	r1, [pc, #116]	; (8000764 <MX_ADC3_Init+0x7c>)
 80006ee:	6001      	str	r1, [r0, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = DISABLE;
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006f0:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	2300      	movs	r3, #0
{
 80006f4:	b085      	sub	sp, #20
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006fa:	7602      	strb	r2, [r0, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
 80006fc:	61c2      	str	r2, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	6142      	str	r2, [r0, #20]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4a19      	ldr	r2, [pc, #100]	; (8000768 <MX_ADC3_Init+0x80>)
  hadc3.Init.ScanConvMode = DISABLE;
 8000702:	6103      	str	r3, [r0, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000704:	e9cd 3300 	strd	r3, r3, [sp]
 8000708:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800070c:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000710:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000714:	60c3      	str	r3, [r0, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000716:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071a:	2300      	movs	r3, #0
 800071c:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000720:	f002 fa80 	bl	8002c24 <HAL_ADC_Init>
 8000724:	b968      	cbnz	r0, 8000742 <MX_ADC3_Init+0x5a>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000726:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000758 <MX_ADC3_Init+0x70>
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072a:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_ADC3_Init+0x78>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000730:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_8;
 8000732:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000736:	f002 fc59 	bl	8002fec <HAL_ADC_ConfigChannel>
 800073a:	b928      	cbnz	r0, 8000748 <MX_ADC3_Init+0x60>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800073c:	b005      	add	sp, #20
 800073e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000742:	f000 ff2f 	bl	80015a4 <Error_Handler>
 8000746:	e7ee      	b.n	8000726 <MX_ADC3_Init+0x3e>
    Error_Handler();
 8000748:	f000 ff2c 	bl	80015a4 <Error_Handler>
}
 800074c:	b005      	add	sp, #20
 800074e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000752:	bf00      	nop
 8000754:	f3af 8000 	nop.w
 8000758:	00000008 	.word	0x00000008
 800075c:	00000001 	.word	0x00000001
 8000760:	200000c0 	.word	0x200000c0
 8000764:	40012200 	.word	0x40012200
 8000768:	0f000001 	.word	0x0f000001

0800076c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800076c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC3)
 800076e:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <HAL_ADC_MspInit+0x70>)
 8000770:	6802      	ldr	r2, [r0, #0]
{
 8000772:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC3)
 8000776:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800077c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000780:	9406      	str	r4, [sp, #24]
  if(adcHandle->Instance==ADC3)
 8000782:	d001      	beq.n	8000788 <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000784:	b008      	add	sp, #32
 8000786:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000788:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 800078c:	9400      	str	r4, [sp, #0]
 800078e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(Volum_GPIO_Port, &GPIO_InitStruct);
 8000790:	4813      	ldr	r0, [pc, #76]	; (80007e0 <HAL_ADC_MspInit+0x74>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000792:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000796:	645a      	str	r2, [r3, #68]	; 0x44
 8000798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800079a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800079e:	9200      	str	r2, [sp, #0]
 80007a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a2:	9401      	str	r4, [sp, #4]
 80007a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a6:	f042 0220 	orr.w	r2, r2, #32
 80007aa:	631a      	str	r2, [r3, #48]	; 0x30
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(Volum_GPIO_Port, &GPIO_InitStruct);
 80007b4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = Volum_Pin;
 80007b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ba:	2303      	movs	r3, #3
 80007bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(Volum_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f003 f91d 	bl	8003a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80007c6:	4622      	mov	r2, r4
 80007c8:	4621      	mov	r1, r4
 80007ca:	2012      	movs	r0, #18
 80007cc:	f002 fce0 	bl	8003190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007d0:	2012      	movs	r0, #18
 80007d2:	f002 fd1b 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 80007d6:	b008      	add	sp, #32
 80007d8:	bd10      	pop	{r4, pc}
 80007da:	bf00      	nop
 80007dc:	40012200 	.word	0x40012200
 80007e0:	40021400 	.word	0x40021400

080007e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e4:	b500      	push	{lr}
 80007e6:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e8:	2200      	movs	r2, #0
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_DMA_Init+0x40>)
 80007ec:	9201      	str	r2, [sp, #4]
 80007ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007f0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80007f4:	6319      	str	r1, [r3, #48]	; 0x30
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80007fc:	4611      	mov	r1, r2
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007fe:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000800:	2039      	movs	r0, #57	; 0x39
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000802:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000804:	f002 fcc4 	bl	8003190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000808:	2039      	movs	r0, #57	; 0x39
 800080a:	f002 fcff 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	4611      	mov	r1, r2
 8000812:	203c      	movs	r0, #60	; 0x3c
 8000814:	f002 fcbc 	bl	8003190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000818:	203c      	movs	r0, #60	; 0x3c

}
 800081a:	b003      	add	sp, #12
 800081c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000820:	f002 bcf4 	b.w	800320c <HAL_NVIC_EnableIRQ>
 8000824:	40023800 	.word	0x40023800

08000828 <MX_DMA2D_Init>:
  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
  hdma2d.Init.Mode = DMA2D_M2M;
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000828:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8000870 <MX_DMA2D_Init+0x48>
  hdma2d.Instance = DMA2D;
 800082c:	4812      	ldr	r0, [pc, #72]	; (8000878 <MX_DMA2D_Init+0x50>)
 800082e:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_DMA2D_Init+0x54>)
{
 8000830:	b508      	push	{r3, lr}
  hdma2d.Init.Mode = DMA2D_M2M;
 8000832:	2300      	movs	r3, #0
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000834:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 8000838:	ed80 7b0c 	vstr	d7, [r0, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 800083c:	e9c0 2300 	strd	r2, r3, [r0]
  hdma2d.Init.OutputOffset = 0;
 8000840:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0;
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000844:	f002 ff6e 	bl	8003724 <HAL_DMA2D_Init>
 8000848:	b928      	cbnz	r0, 8000856 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_DMA2D_Init+0x50>)
 800084c:	2101      	movs	r1, #1
 800084e:	f003 f881 	bl	8003954 <HAL_DMA2D_ConfigLayer>
 8000852:	b940      	cbnz	r0, 8000866 <MX_DMA2D_Init+0x3e>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000854:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000856:	f000 fea5 	bl	80015a4 <Error_Handler>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <MX_DMA2D_Init+0x50>)
 800085c:	2101      	movs	r1, #1
 800085e:	f003 f879 	bl	8003954 <HAL_DMA2D_ConfigLayer>
 8000862:	2800      	cmp	r0, #0
 8000864:	d0f6      	beq.n	8000854 <MX_DMA2D_Init+0x2c>
}
 8000866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800086a:	f000 be9b 	b.w	80015a4 <Error_Handler>
 800086e:	bf00      	nop
	...
 8000878:	20000108 	.word	0x20000108
 800087c:	4002b000 	.word	0x4002b000

08000880 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_DMA2D_MspInit+0x2c>)
 8000882:	6802      	ldr	r2, [r0, #0]
 8000884:	429a      	cmp	r2, r3
 8000886:	d000      	beq.n	800088a <HAL_DMA2D_MspInit+0xa>
 8000888:	4770      	bx	lr
{
 800088a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800088c:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8000890:	2200      	movs	r2, #0
 8000892:	9201      	str	r2, [sp, #4]
 8000894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000896:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800089a:	631a      	str	r2, [r3, #48]	; 0x30
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008a2:	9301      	str	r3, [sp, #4]
 80008a4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80008a6:	b002      	add	sp, #8
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	4002b000 	.word	0x4002b000

080008b0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80008b0:	b510      	push	{r4, lr}

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008b2:	4813      	ldr	r0, [pc, #76]	; (8000900 <MX_FMC_Init+0x50>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80008b4:	4c13      	ldr	r4, [pc, #76]	; (8000904 <MX_FMC_Init+0x54>)
{
 80008b6:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80008b8:	2210      	movs	r2, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80008ba:	2101      	movs	r1, #1
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008bc:	2300      	movs	r3, #0
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80008be:	e9c0 4100 	strd	r4, r1, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80008c2:	6102      	str	r2, [r0, #16]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008c4:	2104      	movs	r1, #4
  SdramTiming.ExitSelfRefreshDelay = 16;
  SdramTiming.SelfRefreshTime = 16;
  SdramTiming.RowCycleDelay = 16;
  SdramTiming.WriteRecoveryTime = 16;
  SdramTiming.RPDelay = 16;
  SdramTiming.RCDDelay = 16;
 80008c6:	9206      	str	r2, [sp, #24]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80008c8:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008ca:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80008ce:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80008d2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 80008d6:	2210      	movs	r2, #16
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80008d8:	2440      	movs	r4, #64	; 0x40
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80008da:	6283      	str	r3, [r0, #40]	; 0x28

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80008dc:	4669      	mov	r1, sp
  SdramTiming.LoadToActiveDelay = 16;
 80008de:	2310      	movs	r3, #16
 80008e0:	e9cd 2300 	strd	r2, r3, [sp]
 80008e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80008e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80008ec:	6144      	str	r4, [r0, #20]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80008ee:	f005 fc91 	bl	8006214 <HAL_SDRAM_Init>
 80008f2:	b908      	cbnz	r0, 80008f8 <MX_FMC_Init+0x48>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80008f4:	b008      	add	sp, #32
 80008f6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80008f8:	f000 fe54 	bl	80015a4 <Error_Handler>
}
 80008fc:	b008      	add	sp, #32
 80008fe:	bd10      	pop	{r4, pc}
 8000900:	2000014c 	.word	0x2000014c
 8000904:	a0000140 	.word	0xa0000140

08000908 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000908:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 800090a:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <HAL_SDRAM_MspInit+0xbc>)
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800090c:	b088      	sub	sp, #32
  if (FMC_Initialized) {
 800090e:	681a      	ldr	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	2100      	movs	r1, #0
 8000912:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
 8000914:	2a00      	cmp	r2, #0
 8000916:	d153      	bne.n	80009c0 <HAL_SDRAM_MspInit+0xb8>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000918:	492b      	ldr	r1, [pc, #172]	; (80009c8 <HAL_SDRAM_MspInit+0xc0>)
 800091a:	9201      	str	r2, [sp, #4]
  FMC_Initialized = 1;
 800091c:	2001      	movs	r0, #1
 800091e:	6018      	str	r0, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000920:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8000922:	4303      	orrs	r3, r0
 8000924:	638b      	str	r3, [r1, #56]	; 0x38
 8000926:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8000928:	4003      	ands	r3, r0
 800092a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800092c:	f64f 7283 	movw	r2, #65411	; 0xff83
 8000930:	2302      	movs	r3, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000932:	240c      	movs	r4, #12
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000934:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000938:	4824      	ldr	r0, [pc, #144]	; (80009cc <HAL_SDRAM_MspInit+0xc4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800093a:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000940:	2600      	movs	r6, #0
 8000942:	2703      	movs	r7, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000944:	e9cd 3405 	strd	r3, r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000948:	f003 f85a 	bl	8003a00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800094c:	2220      	movs	r2, #32
 800094e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	481f      	ldr	r0, [pc, #124]	; (80009d0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000952:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000956:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800095a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f003 f84f 	bl	8003a00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000962:	f248 1233 	movw	r2, #33075	; 0x8133
 8000966:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000968:	481a      	ldr	r0, [pc, #104]	; (80009d4 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800096a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800096c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800096e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000972:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000976:	f003 f843 	bl	8003a00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800097a:	f24c 7203 	movw	r2, #50947	; 0xc703
 800097e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000980:	4815      	ldr	r0, [pc, #84]	; (80009d8 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000982:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800098a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098e:	f003 f837 	bl	8003a00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000992:	f64f 023f 	movw	r2, #63551	; 0xf83f
 8000996:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800099a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800099c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800099e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80009a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009a6:	f003 f82b 	bl	8003a00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80009aa:	2260      	movs	r2, #96	; 0x60
 80009ac:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009ae:	480c      	ldr	r0, [pc, #48]	; (80009e0 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009b2:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80009b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80009b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009bc:	f003 f820 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80009c0:	b008      	add	sp, #32
 80009c2:	bdd0      	pop	{r4, r6, r7, pc}
 80009c4:	20000148 	.word	0x20000148
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40021800 	.word	0x40021800
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40021400 	.word	0x40021400
 80009e0:	40021c00 	.word	0x40021c00

080009e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e4:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	2200      	movs	r2, #0
{
 80009e8:	b093      	sub	sp, #76	; 0x4c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
 80009ee:	e9cd 220e 	strd	r2, r2, [sp, #56]	; 0x38

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f2:	4b41      	ldr	r3, [pc, #260]	; (8000af8 <MX_GPIO_Init+0x114>)
 80009f4:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	9210      	str	r2, [sp, #64]	; 0x40
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_RESET);
 80009fa:	4840      	ldr	r0, [pc, #256]	; (8000afc <MX_GPIO_Init+0x118>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fc:	f041 0110 	orr.w	r1, r1, #16
 8000a00:	6319      	str	r1, [r3, #48]	; 0x30
 8000a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a04:	f001 0110 	and.w	r1, r1, #16
 8000a08:	9101      	str	r1, [sp, #4]
 8000a0a:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	9202      	str	r2, [sp, #8]
 8000a0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a10:	f041 0102 	orr.w	r1, r1, #2
 8000a14:	6319      	str	r1, [r3, #48]	; 0x30
 8000a16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a18:	f001 0102 	and.w	r1, r1, #2
 8000a1c:	9102      	str	r1, [sp, #8]
 8000a1e:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a20:	9203      	str	r2, [sp, #12]
 8000a22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a24:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000a28:	6319      	str	r1, [r3, #48]	; 0x30
 8000a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a2c:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8000a30:	9103      	str	r1, [sp, #12]
 8000a32:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a34:	9204      	str	r2, [sp, #16]
 8000a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a38:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000a3c:	6319      	str	r1, [r3, #48]	; 0x30
 8000a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a40:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8000a44:	9104      	str	r1, [sp, #16]
 8000a46:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a48:	9205      	str	r2, [sp, #20]
 8000a4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a4c:	f041 0108 	orr.w	r1, r1, #8
 8000a50:	6319      	str	r1, [r3, #48]	; 0x30
 8000a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a54:	f001 0108 	and.w	r1, r1, #8
 8000a58:	9105      	str	r1, [sp, #20]
 8000a5a:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5c:	9206      	str	r2, [sp, #24]
 8000a5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a60:	f041 0104 	orr.w	r1, r1, #4
 8000a64:	6319      	str	r1, [r3, #48]	; 0x30
 8000a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a68:	f001 0104 	and.w	r1, r1, #4
 8000a6c:	9106      	str	r1, [sp, #24]
 8000a6e:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	9207      	str	r2, [sp, #28]
 8000a72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a74:	f041 0101 	orr.w	r1, r1, #1
 8000a78:	6319      	str	r1, [r3, #48]	; 0x30
 8000a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a7c:	f001 0101 	and.w	r1, r1, #1
 8000a80:	9107      	str	r1, [sp, #28]
 8000a82:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a84:	9208      	str	r2, [sp, #32]
 8000a86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a88:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000a8c:	6319      	str	r1, [r3, #48]	; 0x30
 8000a8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a90:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8000a94:	9108      	str	r1, [sp, #32]
 8000a96:	9908      	ldr	r1, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a98:	9209      	str	r2, [sp, #36]	; 0x24
 8000a9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a9c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000aa0:	6319      	str	r1, [r3, #48]	; 0x30
 8000aa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000aa4:	f401 6180 	and.w	r1, r1, #1024	; 0x400
 8000aa8:	9109      	str	r1, [sp, #36]	; 0x24
 8000aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aac:	920a      	str	r2, [sp, #40]	; 0x28
 8000aae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ab0:	f041 0120 	orr.w	r1, r1, #32
 8000ab4:	6319      	str	r1, [r3, #48]	; 0x30
 8000ab6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ab8:	f001 0120 	and.w	r1, r1, #32
 8000abc:	910a      	str	r1, [sp, #40]	; 0x28
 8000abe:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac0:	920b      	str	r2, [sp, #44]	; 0x2c
 8000ac2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ac4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000ac8:	6319      	str	r1, [r3, #48]	; 0x30
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad0:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_RESET);
 8000ad2:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_RESET);
 8000ad6:	f003 f98f 	bl	8003df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Verificare_samplerate_Pin;
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	2301      	movs	r3, #1
 8000ade:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Verificare_samplerate_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <MX_GPIO_Init+0x118>)
  GPIO_InitStruct.Pin = Verificare_samplerate_Pin;
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2300      	movs	r3, #0
  HAL_GPIO_Init(Verificare_samplerate_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = Verificare_samplerate_Pin;
 8000aea:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(Verificare_samplerate_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f002 ff87 	bl	8003a00 <HAL_GPIO_Init>

}
 8000af2:	b013      	add	sp, #76	; 0x4c
 8000af4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40021800 	.word	0x40021800

08000b00 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b00:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b02:	4818      	ldr	r0, [pc, #96]	; (8000b64 <MX_I2C1_Init+0x64>)
 8000b04:	4c18      	ldr	r4, [pc, #96]	; (8000b68 <MX_I2C1_Init+0x68>)
  hi2c1.Init.ClockSpeed = 100000;
 8000b06:	4919      	ldr	r1, [pc, #100]	; (8000b6c <MX_I2C1_Init+0x6c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b08:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8000b0e:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c1.Init.OwnAddress1 = 0;
 8000b12:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b16:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b20:	f003 fbb8 	bl	8004294 <HAL_I2C_Init>
 8000b24:	b950      	cbnz	r0, 8000b3c <MX_I2C1_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b26:	480f      	ldr	r0, [pc, #60]	; (8000b64 <MX_I2C1_Init+0x64>)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f004 f9ad 	bl	8004e88 <HAL_I2CEx_ConfigAnalogFilter>
 8000b2e:	b968      	cbnz	r0, 8000b4c <MX_I2C1_Init+0x4c>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <MX_I2C1_Init+0x64>)
 8000b32:	2100      	movs	r1, #0
 8000b34:	f004 f9c8 	bl	8004ec8 <HAL_I2CEx_ConfigDigitalFilter>
 8000b38:	b980      	cbnz	r0, 8000b5c <MX_I2C1_Init+0x5c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b3a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b3c:	f000 fd32 	bl	80015a4 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <MX_I2C1_Init+0x64>)
 8000b42:	2100      	movs	r1, #0
 8000b44:	f004 f9a0 	bl	8004e88 <HAL_I2CEx_ConfigAnalogFilter>
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d0f1      	beq.n	8000b30 <MX_I2C1_Init+0x30>
    Error_Handler();
 8000b4c:	f000 fd2a 	bl	80015a4 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_I2C1_Init+0x64>)
 8000b52:	2100      	movs	r1, #0
 8000b54:	f004 f9b8 	bl	8004ec8 <HAL_I2CEx_ConfigDigitalFilter>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d0ee      	beq.n	8000b3a <MX_I2C1_Init+0x3a>
}
 8000b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000b60:	f000 bd20 	b.w	80015a4 <Error_Handler>
 8000b64:	20000180 	.word	0x20000180
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	000186a0 	.word	0x000186a0

08000b70 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b70:	b510      	push	{r4, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b72:	4818      	ldr	r0, [pc, #96]	; (8000bd4 <MX_I2C3_Init+0x64>)
 8000b74:	4c18      	ldr	r4, [pc, #96]	; (8000bd8 <MX_I2C3_Init+0x68>)
  hi2c3.Init.ClockSpeed = 100000;
 8000b76:	4919      	ldr	r1, [pc, #100]	; (8000bdc <MX_I2C3_Init+0x6c>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b78:	2300      	movs	r3, #0
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.ClockSpeed = 100000;
 8000b7e:	e9c0 4100 	strd	r4, r1, [r0]
  hi2c3.Init.OwnAddress1 = 0;
 8000b82:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b86:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b90:	f003 fb80 	bl	8004294 <HAL_I2C_Init>
 8000b94:	b950      	cbnz	r0, 8000bac <MX_I2C3_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <MX_I2C3_Init+0x64>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f004 f975 	bl	8004e88 <HAL_I2CEx_ConfigAnalogFilter>
 8000b9e:	b968      	cbnz	r0, 8000bbc <MX_I2C3_Init+0x4c>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_I2C3_Init+0x64>)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f004 f990 	bl	8004ec8 <HAL_I2CEx_ConfigDigitalFilter>
 8000ba8:	b980      	cbnz	r0, 8000bcc <MX_I2C3_Init+0x5c>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000baa:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000bac:	f000 fcfa 	bl	80015a4 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MX_I2C3_Init+0x64>)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f004 f968 	bl	8004e88 <HAL_I2CEx_ConfigAnalogFilter>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d0f1      	beq.n	8000ba0 <MX_I2C3_Init+0x30>
    Error_Handler();
 8000bbc:	f000 fcf2 	bl	80015a4 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_I2C3_Init+0x64>)
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f004 f980 	bl	8004ec8 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d0ee      	beq.n	8000baa <MX_I2C3_Init+0x3a>
}
 8000bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8000bd0:	f000 bce8 	b.w	80015a4 <Error_Handler>
 8000bd4:	200001d4 	.word	0x200001d4
 8000bd8:	40005c00 	.word	0x40005c00
 8000bdc:	000186a0 	.word	0x000186a0

08000be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8000be2:	6803      	ldr	r3, [r0, #0]
 8000be4:	4a36      	ldr	r2, [pc, #216]	; (8000cc0 <HAL_I2C_MspInit+0xe0>)
{
 8000be6:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 8000bea:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000bf0:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000bf4:	940a      	str	r4, [sp, #40]	; 0x28
  if(i2cHandle->Instance==I2C1)
 8000bf6:	d004      	beq.n	8000c02 <HAL_I2C_MspInit+0x22>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 8000bf8:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <HAL_I2C_MspInit+0xe4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d025      	beq.n	8000c4a <HAL_I2C_MspInit+0x6a>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bfe:	b00c      	add	sp, #48	; 0x30
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4d31      	ldr	r5, [pc, #196]	; (8000cc8 <HAL_I2C_MspInit+0xe8>)
 8000c04:	9401      	str	r4, [sp, #4]
 8000c06:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	4830      	ldr	r0, [pc, #192]	; (8000ccc <HAL_I2C_MspInit+0xec>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	f043 0302 	orr.w	r3, r3, #2
 8000c0e:	632b      	str	r3, [r5, #48]	; 0x30
 8000c10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6;
 8000c18:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000c1c:	2312      	movs	r3, #18
 8000c1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	930a      	str	r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f002 fee7 	bl	8003a00 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c32:	9402      	str	r4, [sp, #8]
 8000c34:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3a:	642b      	str	r3, [r5, #64]	; 0x40
 8000c3c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c42:	9302      	str	r3, [sp, #8]
 8000c44:	9b02      	ldr	r3, [sp, #8]
}
 8000c46:	b00c      	add	sp, #48	; 0x30
 8000c48:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4d1f      	ldr	r5, [pc, #124]	; (8000cc8 <HAL_I2C_MspInit+0xe8>)
 8000c4c:	9403      	str	r4, [sp, #12]
 8000c4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	481f      	ldr	r0, [pc, #124]	; (8000cd0 <HAL_I2C_MspInit+0xf0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	632b      	str	r3, [r5, #48]	; 0x30
 8000c58:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	9303      	str	r3, [sp, #12]
 8000c60:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c62:	9404      	str	r4, [sp, #16]
 8000c64:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6a:	632b      	str	r3, [r5, #48]	; 0x30
 8000c6c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	2312      	movs	r3, #18
 8000c7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c7e:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c86:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c88:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f002 feb9 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c8e:	2280      	movs	r2, #128	; 0x80
 8000c90:	2312      	movs	r3, #18
 8000c92:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c96:	480f      	ldr	r0, [pc, #60]	; (8000cd4 <HAL_I2C_MspInit+0xf4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c98:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c9e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ca0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ca4:	f002 feac 	bl	8003a00 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ca8:	9405      	str	r4, [sp, #20]
 8000caa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cb0:	642b      	str	r3, [r5, #64]	; 0x40
 8000cb2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cb8:	9305      	str	r3, [sp, #20]
 8000cba:	9b05      	ldr	r3, [sp, #20]
}
 8000cbc:	b00c      	add	sp, #48	; 0x30
 8000cbe:	bd70      	pop	{r4, r5, r6, pc}
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	40005c00 	.word	0x40005c00
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020400 	.word	0x40020400
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40021c00 	.word	0x40021c00

08000cd8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd8:	b508      	push	{r3, lr}

  if(i2cHandle->Instance==I2C1)
 8000cda:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <HAL_I2C_MspDeInit+0x58>)
 8000cdc:	6803      	ldr	r3, [r0, #0]
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d003      	beq.n	8000cea <HAL_I2C_MspDeInit+0x12>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_I2C_MspDeInit+0x5c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d011      	beq.n	8000d0c <HAL_I2C_MspDeInit+0x34>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000ce8:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cea:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000cee:	4812      	ldr	r0, [pc, #72]	; (8000d38 <HAL_I2C_MspDeInit+0x60>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cf0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000cf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000cf6:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000cfc:	f002 ffbc 	bl	8003c78 <HAL_GPIO_DeInit>
}
 8000d00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <HAL_I2C_MspDeInit+0x60>)
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	f002 bfb6 	b.w	8003c78 <HAL_GPIO_DeInit>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000d0c:	f502 32ee 	add.w	r2, r2, #121856	; 0x1dc00
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8000d10:	480a      	ldr	r0, [pc, #40]	; (8000d3c <HAL_I2C_MspDeInit+0x64>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000d12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8000d18:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8000d1e:	f002 ffab 	bl	8003c78 <HAL_GPIO_DeInit>
}
 8000d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <HAL_I2C_MspDeInit+0x68>)
 8000d28:	2180      	movs	r1, #128	; 0x80
 8000d2a:	f002 bfa5 	b.w	8003c78 <HAL_GPIO_DeInit>
 8000d2e:	bf00      	nop
 8000d30:	40005400 	.word	0x40005400
 8000d34:	40005c00 	.word	0x40005c00
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40020800 	.word	0x40020800
 8000d40:	40021c00 	.word	0x40021c00

08000d44 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000d44:	b510      	push	{r4, lr}
 8000d46:	b09a      	sub	sp, #104	; 0x68

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d48:	2234      	movs	r2, #52	; 0x34
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4668      	mov	r0, sp
 8000d4e:	f006 fdc5 	bl	80078dc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000d52:	2234      	movs	r2, #52	; 0x34
 8000d54:	2100      	movs	r1, #0
 8000d56:	eb0d 0002 	add.w	r0, sp, r2
 8000d5a:	f006 fdbf 	bl	80078dc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d5e:	4830      	ldr	r0, [pc, #192]	; (8000e20 <MX_LTDC_Init+0xdc>)
 8000d60:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <MX_LTDC_Init+0xe0>)
 8000d62:	6002      	str	r2, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 7;
 8000d64:	2207      	movs	r2, #7
 8000d66:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 3;
  hltdc.Init.AccumulatedHBP = 14;
 8000d68:	2103      	movs	r1, #3
 8000d6a:	220e      	movs	r2, #14
 8000d6c:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hltdc.Init.AccumulatedVBP = 5;
  hltdc.Init.AccumulatedActiveW = 334;
 8000d70:	2405      	movs	r4, #5
 8000d72:	f44f 72a7 	mov.w	r2, #334	; 0x14e
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d76:	2300      	movs	r3, #0
  hltdc.Init.AccumulatedActiveW = 334;
 8000d78:	e9c0 4208 	strd	r4, r2, [r0, #32]
  hltdc.Init.AccumulatedActiveH = 245;
  hltdc.Init.TotalWidth = 340;
 8000d7c:	f04f 0cf5 	mov.w	ip, #245	; 0xf5
 8000d80:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000d84:	e9c0 c20a 	strd	ip, r2, [r0, #40]	; 0x28
  hltdc.Init.TotalHeigh = 247;
  hltdc.Init.Backcolor.Blue = 0;
 8000d88:	8683      	strh	r3, [r0, #52]	; 0x34
  hltdc.Init.TotalHeigh = 247;
 8000d8a:	22f7      	movs	r2, #247	; 0xf7
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d8c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hltdc.Init.TotalHeigh = 247;
 8000d94:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
 8000d96:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d9a:	f004 f8b9 	bl	8004f10 <HAL_LTDC_Init>
 8000d9e:	bba0      	cbnz	r0, 8000e0a <MX_LTDC_Init+0xc6>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 8000da0:	2200      	movs	r2, #0
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 0;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg.Alpha = 0;
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  pLayerCfg.ImageWidth = 0;
  pLayerCfg.ImageHeight = 0;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000daa:	481d      	ldr	r0, [pc, #116]	; (8000e20 <MX_LTDC_Init+0xdc>)
  pLayerCfg.Backcolor.Blue = 0;
 8000dac:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000db0:	2305      	movs	r3, #5
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000db2:	4669      	mov	r1, sp
  pLayerCfg.WindowX1 = 0;
 8000db4:	e9cd 2200 	strd	r2, r2, [sp]
  pLayerCfg.WindowY1 = 0;
 8000db8:	e9cd 2202 	strd	r2, r2, [sp, #8]
  pLayerCfg.Alpha = 0;
 8000dbc:	e9cd 2204 	strd	r2, r2, [sp, #16]
  pLayerCfg.FBStartAdress = 0;
 8000dc0:	e9cd 3208 	strd	r3, r2, [sp, #32]
  pLayerCfg.ImageHeight = 0;
 8000dc4:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
  pLayerCfg.Backcolor.Red = 0;
 8000dc8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000dcc:	f004 f910 	bl	8004ff0 <HAL_LTDC_ConfigLayer>
 8000dd0:	bb10      	cbnz	r0, 8000e18 <MX_LTDC_Init+0xd4>
  pLayerCfg1.WindowY1 = 0;
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  pLayerCfg1.Alpha = 0;
  pLayerCfg1.Alpha0 = 0;
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000dd2:	2205      	movs	r2, #5
  pLayerCfg1.WindowX0 = 0;
 8000dd4:	2300      	movs	r3, #0
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000dd6:	f44f 6480 	mov.w	r4, #1024	; 0x400
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000dda:	9215      	str	r2, [sp, #84]	; 0x54
  pLayerCfg1.ImageWidth = 0;
  pLayerCfg1.ImageHeight = 0;
  pLayerCfg1.Backcolor.Blue = 0;
  pLayerCfg1.Backcolor.Green = 0;
  pLayerCfg1.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000ddc:	4810      	ldr	r0, [pc, #64]	; (8000e20 <MX_LTDC_Init+0xdc>)
  pLayerCfg1.ImageHeight = 0;
 8000dde:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000de0:	a90d      	add	r1, sp, #52	; 0x34
 8000de2:	2201      	movs	r2, #1
  pLayerCfg1.WindowX1 = 0;
 8000de4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  pLayerCfg1.WindowY1 = 0;
 8000de8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  pLayerCfg1.Alpha = 0;
 8000dec:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000df0:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  pLayerCfg1.ImageWidth = 0;
 8000df4:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  pLayerCfg1.Backcolor.Blue = 0;
 8000df8:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
  pLayerCfg1.Backcolor.Red = 0;
 8000dfc:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000e00:	f004 f8f6 	bl	8004ff0 <HAL_LTDC_ConfigLayer>
 8000e04:	b920      	cbnz	r0, 8000e10 <MX_LTDC_Init+0xcc>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e06:	b01a      	add	sp, #104	; 0x68
 8000e08:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e0a:	f000 fbcb 	bl	80015a4 <Error_Handler>
 8000e0e:	e7c7      	b.n	8000da0 <MX_LTDC_Init+0x5c>
    Error_Handler();
 8000e10:	f000 fbc8 	bl	80015a4 <Error_Handler>
}
 8000e14:	b01a      	add	sp, #104	; 0x68
 8000e16:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e18:	f000 fbc4 	bl	80015a4 <Error_Handler>
 8000e1c:	e7d9      	b.n	8000dd2 <MX_LTDC_Init+0x8e>
 8000e1e:	bf00      	nop
 8000e20:	20000228 	.word	0x20000228
 8000e24:	40016800 	.word	0x40016800

08000e28 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000e28:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	b09e      	sub	sp, #120	; 0x78

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e32:	2230      	movs	r2, #48	; 0x30
 8000e34:	a812      	add	r0, sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 8000e3a:	e9cd 110e 	strd	r1, r1, [sp, #56]	; 0x38
 8000e3e:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f006 fd4c 	bl	80078dc <memset>
  if(ltdcHandle->Instance==LTDC)
 8000e44:	4b85      	ldr	r3, [pc, #532]	; (800105c <HAL_LTDC_MspInit+0x234>)
 8000e46:	6822      	ldr	r2, [r4, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d002      	beq.n	8000e52 <HAL_LTDC_MspInit+0x2a>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000e4c:	b01e      	add	sp, #120	; 0x78
 8000e4e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e52:	2108      	movs	r1, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
 8000e54:	22d8      	movs	r2, #216	; 0xd8
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000e56:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e58:	a812      	add	r0, sp, #72	; 0x48
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e5a:	9112      	str	r1, [sp, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
 8000e5c:	9216      	str	r2, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000e5e:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e60:	f004 fc9e 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	f040 80f6 	bne.w	8001056 <HAL_LTDC_MspInit+0x22e>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e6a:	4b7d      	ldr	r3, [pc, #500]	; (8001060 <HAL_LTDC_MspInit+0x238>)
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6c:	487d      	ldr	r0, [pc, #500]	; (8001064 <HAL_LTDC_MspInit+0x23c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e6e:	2200      	movs	r2, #0
 8000e70:	9201      	str	r2, [sp, #4]
 8000e72:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000e74:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000e78:	6459      	str	r1, [r3, #68]	; 0x44
 8000e7a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000e7c:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8000e80:	9101      	str	r1, [sp, #4]
 8000e82:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e84:	9202      	str	r2, [sp, #8]
 8000e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e88:	f041 0110 	orr.w	r1, r1, #16
 8000e8c:	6319      	str	r1, [r3, #48]	; 0x30
 8000e8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e90:	f001 0110 	and.w	r1, r1, #16
 8000e94:	9102      	str	r1, [sp, #8]
 8000e96:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	9203      	str	r2, [sp, #12]
 8000e9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e9c:	f041 0102 	orr.w	r1, r1, #2
 8000ea0:	6319      	str	r1, [r3, #48]	; 0x30
 8000ea2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ea4:	f001 0102 	and.w	r1, r1, #2
 8000ea8:	9103      	str	r1, [sp, #12]
 8000eaa:	9903      	ldr	r1, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eac:	9204      	str	r2, [sp, #16]
 8000eae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000eb0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000eb4:	6319      	str	r1, [r3, #48]	; 0x30
 8000eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000eb8:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8000ebc:	9104      	str	r1, [sp, #16]
 8000ebe:	9904      	ldr	r1, [sp, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ec0:	9205      	str	r2, [sp, #20]
 8000ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ec4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000ec8:	6319      	str	r1, [r3, #48]	; 0x30
 8000eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ecc:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8000ed0:	9105      	str	r1, [sp, #20]
 8000ed2:	9905      	ldr	r1, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed4:	9206      	str	r2, [sp, #24]
 8000ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ed8:	f041 0108 	orr.w	r1, r1, #8
 8000edc:	6319      	str	r1, [r3, #48]	; 0x30
 8000ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ee0:	f001 0108 	and.w	r1, r1, #8
 8000ee4:	9106      	str	r1, [sp, #24]
 8000ee6:	9906      	ldr	r1, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee8:	9207      	str	r2, [sp, #28]
 8000eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000eec:	f041 0104 	orr.w	r1, r1, #4
 8000ef0:	6319      	str	r1, [r3, #48]	; 0x30
 8000ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ef4:	f001 0104 	and.w	r1, r1, #4
 8000ef8:	9107      	str	r1, [sp, #28]
 8000efa:	9907      	ldr	r1, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	9208      	str	r2, [sp, #32]
 8000efe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f00:	f041 0101 	orr.w	r1, r1, #1
 8000f04:	6319      	str	r1, [r3, #48]	; 0x30
 8000f06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f08:	f001 0101 	and.w	r1, r1, #1
 8000f0c:	9108      	str	r1, [sp, #32]
 8000f0e:	9908      	ldr	r1, [sp, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f10:	9209      	str	r2, [sp, #36]	; 0x24
 8000f12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f14:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000f18:	6319      	str	r1, [r3, #48]	; 0x30
 8000f1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f1c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8000f20:	9109      	str	r1, [sp, #36]	; 0x24
 8000f22:	9909      	ldr	r1, [sp, #36]	; 0x24
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f24:	920a      	str	r2, [sp, #40]	; 0x28
 8000f26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f28:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000f2c:	6319      	str	r1, [r3, #48]	; 0x30
 8000f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f30:	f401 6180 	and.w	r1, r1, #1024	; 0x400
 8000f34:	910a      	str	r1, [sp, #40]	; 0x28
 8000f36:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f38:	920b      	str	r2, [sp, #44]	; 0x2c
 8000f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f40:	631a      	str	r2, [r3, #48]	; 0x30
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f48:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f4a:	2400      	movs	r4, #0
 8000f4c:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f4e:	260e      	movs	r6, #14
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f52:	9610      	str	r6, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f54:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000f5e:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f62:	f002 fd4d 	bl	8003a00 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	483e      	ldr	r0, [pc, #248]	; (8001068 <HAL_LTDC_MspInit+0x240>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f70:	9610      	str	r6, [sp, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f72:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000f76:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	f002 fd41 	bl	8003a00 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f7e:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8000f80:	f44f 6204 	mov.w	r2, #2112	; 0x840
 8000f84:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f86:	4839      	ldr	r0, [pc, #228]	; (800106c <HAL_LTDC_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f88:	9610      	str	r6, [sp, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8000f8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000f8e:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f92:	f002 fd35 	bl	8003a00 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f96:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8;
 8000f98:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 8000f9c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f9e:	4834      	ldr	r0, [pc, #208]	; (8001070 <HAL_LTDC_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa0:	9610      	str	r6, [sp, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8;
 8000fa2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000fa6:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000faa:	f002 fd29 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8000fae:	2248      	movs	r2, #72	; 0x48
 8000fb0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	a90c      	add	r1, sp, #48	; 0x30
 8000fb4:	482f      	ldr	r0, [pc, #188]	; (8001074 <HAL_LTDC_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fb6:	9610      	str	r6, [sp, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8000fb8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fbc:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8000fc0:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8000fc4:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc8:	f002 fd1a 	bl	8003a00 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	a90c      	add	r1, sp, #48	; 0x30
 8000fce:	482a      	ldr	r0, [pc, #168]	; (8001078 <HAL_LTDC_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fd0:	9610      	str	r6, [sp, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fd2:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8000fd6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f002 fd11 	bl	8003a00 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8000fe0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000fe4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	4825      	ldr	r0, [pc, #148]	; (800107c <HAL_LTDC_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fe8:	9610      	str	r6, [sp, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8000fea:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8000fee:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f002 fd05 	bl	8003a00 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ff6:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 8000ff8:	f24c 6233 	movw	r2, #50739	; 0xc633
 8000ffc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ffe:	4820      	ldr	r0, [pc, #128]	; (8001080 <HAL_LTDC_MspInit+0x258>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001000:	9610      	str	r6, [sp, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 8001002:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001006:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800100a:	f002 fcf9 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800100e:	22c0      	movs	r2, #192	; 0xc0
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001010:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001012:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001014:	481b      	ldr	r0, [pc, #108]	; (8001084 <HAL_LTDC_MspInit+0x25c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001016:	9610      	str	r6, [sp, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001018:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800101c:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001020:	f002 fcee 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001024:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001026:	a90c      	add	r1, sp, #48	; 0x30
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <HAL_LTDC_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800102a:	9310      	str	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800102c:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001030:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001034:	f002 fce4 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_9;
 8001038:	f24a 2208 	movw	r2, #41480	; 0xa208
 800103c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800103e:	4812      	ldr	r0, [pc, #72]	; (8001088 <HAL_LTDC_MspInit+0x260>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001040:	9610      	str	r6, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001042:	a90c      	add	r1, sp, #48	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_9;
 8001044:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001048:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800104c:	f002 fcd8 	bl	8003a00 <HAL_GPIO_Init>
}
 8001050:	b01e      	add	sp, #120	; 0x78
 8001052:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
      Error_Handler();
 8001056:	f000 faa5 	bl	80015a4 <Error_Handler>
 800105a:	e706      	b.n	8000e6a <HAL_LTDC_MspInit+0x42>
 800105c:	40016800 	.word	0x40016800
 8001060:	40023800 	.word	0x40023800
 8001064:	40021000 	.word	0x40021000
 8001068:	40020400 	.word	0x40020400
 800106c:	40021800 	.word	0x40021800
 8001070:	40022400 	.word	0x40022400
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40020800 	.word	0x40020800
 800107c:	40020000 	.word	0x40020000
 8001080:	40022000 	.word	0x40022000
 8001084:	40022800 	.word	0x40022800
 8001088:	40021c00 	.word	0x40021c00

0800108c <soundProcess>:
   }
}

uint8_t shiftFact = 7;
void soundProcess (q31_t *buff, int nrelements)
{
 800108c:	b570      	push	{r4, r5, r6, lr}

	arm_rfft_q31(&realFFT_Instance, buff, fft_buff);
 800108e:	4c2b      	ldr	r4, [pc, #172]	; (800113c <soundProcess+0xb0>)
{
 8001090:	4605      	mov	r5, r0
	arm_rfft_q31(&realFFT_Instance, buff, fft_buff);
 8001092:	4622      	mov	r2, r4
 8001094:	482a      	ldr	r0, [pc, #168]	; (8001140 <soundProcess+0xb4>)
 8001096:	4629      	mov	r1, r5
 8001098:	f005 fbd4 	bl	8006844 <arm_rfft_q31>

	audio_changer (fft_buff, medianValue);
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <soundProcess+0xb8>)
 800109e:	681a      	ldr	r2, [r3, #0]
   if(nrelements_to_shift > 0)
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	dd2c      	ble.n	80010fe <soundProcess+0x72>
            if(i > (DMABuffLength/2) - nrelements_to_shift -1 ) buff[i] = 0;
 80010a4:	f5c2 71ff 	rsb	r1, r2, #510	; 0x1fe
 80010a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80010ac:	4623      	mov	r3, r4
 80010ae:	3101      	adds	r1, #1
 80010b0:	3a04      	subs	r2, #4
 80010b2:	2401      	movs	r4, #1
 80010b4:	2600      	movs	r6, #0
 80010b6:	e004      	b.n	80010c2 <soundProcess+0x36>
            buff[i] = buff[i + nrelements_to_shift];
 80010b8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80010bc:	6018      	str	r0, [r3, #0]
            for(int i = 0; i< DMABuffLength/2 ; i++)
 80010be:	3401      	adds	r4, #1
 80010c0:	3304      	adds	r3, #4
            if(i > (DMABuffLength/2) - nrelements_to_shift -1 ) buff[i] = 0;
 80010c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80010c6:	458c      	cmp	ip, r1
 80010c8:	ddf6      	ble.n	80010b8 <soundProcess+0x2c>
            for(int i = 0; i< DMABuffLength/2 ; i++)
 80010ca:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80010ce:	601e      	str	r6, [r3, #0]
 80010d0:	d1f5      	bne.n	80010be <soundProcess+0x32>

	arm_shift_q31(fft_buff, shiftFact, fft_buff, DMABuffLength / 2);
 80010d2:	4a1a      	ldr	r2, [pc, #104]	; (800113c <soundProcess+0xb0>)
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <soundProcess+0xbc>)
 80010d6:	4610      	mov	r0, r2
 80010d8:	f993 1000 	ldrsb.w	r1, [r3]
 80010dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e0:	f005 fd60 	bl	8006ba4 <arm_shift_q31>

	arm_cmplx_mag_q31(fft_buff, mag_fft_buff, DMABuffLength / 2);
 80010e4:	4919      	ldr	r1, [pc, #100]	; (800114c <soundProcess+0xc0>)
 80010e6:	4815      	ldr	r0, [pc, #84]	; (800113c <soundProcess+0xb0>)
 80010e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ec:	f005 fc6e 	bl	80069cc <arm_cmplx_mag_q31>

	arm_rfft_q31(&realIFFT_Instance, fft_buff, buff);
 80010f0:	462a      	mov	r2, r5
 80010f2:	4912      	ldr	r1, [pc, #72]	; (800113c <soundProcess+0xb0>)
 80010f4:	4816      	ldr	r0, [pc, #88]	; (8001150 <soundProcess+0xc4>)

//	arm_shift_q15((q15_t *)buff, shiftFact, (q15_t *)buff, DMABuffLength / 2);

}
 80010f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	arm_rfft_q31(&realIFFT_Instance, fft_buff, buff);
 80010fa:	f005 bba3 	b.w	8006844 <arm_rfft_q31>
	   nrelements_to_shift = abs(nrelements_to_shift);
 80010fe:	f502 7c00 	add.w	ip, r2, #512	; 0x200
 8001102:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8001106:	f504 6300 	add.w	r3, r4, #2048	; 0x800
 800110a:	4252      	negs	r2, r2
       for(int i = (DMABuffLength/2) -1; i>=0 ; i--)
 800110c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001110:	2000      	movs	r0, #0
           if(i< nrelements_to_shift) buff[i] = 0;
 8001112:	42a2      	cmp	r2, r4
           buff[i] = buff[i - nrelements_to_shift ];
 8001114:	f85c 1d04 	ldr.w	r1, [ip, #-4]!
       for(int i = (DMABuffLength/2) -1; i>=0 ; i--)
 8001118:	f104 34ff 	add.w	r4, r4, #4294967295
           if(i< nrelements_to_shift) buff[i] = 0;
 800111c:	dc09      	bgt.n	8001132 <soundProcess+0xa6>
       for(int i = (DMABuffLength/2) -1; i>=0 ; i--)
 800111e:	1c66      	adds	r6, r4, #1
 8001120:	f843 1d04 	str.w	r1, [r3, #-4]!
 8001124:	d0d5      	beq.n	80010d2 <soundProcess+0x46>
           if(i< nrelements_to_shift) buff[i] = 0;
 8001126:	42a2      	cmp	r2, r4
           buff[i] = buff[i - nrelements_to_shift ];
 8001128:	f85c 1d04 	ldr.w	r1, [ip, #-4]!
       for(int i = (DMABuffLength/2) -1; i>=0 ; i--)
 800112c:	f104 34ff 	add.w	r4, r4, #4294967295
           if(i< nrelements_to_shift) buff[i] = 0;
 8001130:	ddf5      	ble.n	800111e <soundProcess+0x92>
       for(int i = (DMABuffLength/2) -1; i>=0 ; i--)
 8001132:	1c61      	adds	r1, r4, #1
 8001134:	f843 0d04 	str.w	r0, [r3, #-4]!
 8001138:	d1eb      	bne.n	8001112 <soundProcess+0x86>
 800113a:	e7ca      	b.n	80010d2 <soundProcess+0x46>
 800113c:	20001ad4 	.word	0x20001ad4
 8001140:	20002c7c 	.word	0x20002c7c
 8001144:	20002c78 	.word	0x20002c78
 8001148:	20000000 	.word	0x20000000
 800114c:	200022d4 	.word	0x200022d4
 8001150:	20002c94 	.word	0x20002c94

08001154 <HAL_SAI_RxHalfCpltCallback>:

/* callbacks */

void HAL_SAI_RxHalfCpltCallback (SAI_HandleTypeDef *hsai_BlockB1)
{
 8001154:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_RESET); //pin PA5
 8001156:	4813      	ldr	r0, [pc, #76]	; (80011a4 <HAL_SAI_RxHalfCpltCallback+0x50>)
 8001158:	4c13      	ldr	r4, [pc, #76]	; (80011a8 <HAL_SAI_RxHalfCpltCallback+0x54>)
 800115a:	2200      	movs	r2, #0
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	f002 fe4b 	bl	8003df8 <HAL_GPIO_WritePin>

	for(uint16_t i = 0, j = 0; i < DMABuffLength / 2; i++, j++)
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <HAL_SAI_RxHalfCpltCallback+0x58>)
	HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_RESET); //pin PA5
 8001164:	4622      	mov	r2, r4
 8001166:	2300      	movs	r3, #0
	{
//		DMABuffin_ch1[j] = wave4p[i++];
		DMABuffin_ch1[j] = DMABuffin[i++];
 8001168:	f930 1023 	ldrsh.w	r1, [r0, r3, lsl #2]
 800116c:	f842 1f04 	str.w	r1, [r2, #4]!
	for(uint16_t i = 0, j = 0; i < DMABuffLength / 2; i++, j++)
 8001170:	3301      	adds	r3, #1
 8001172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001176:	d1f7      	bne.n	8001168 <HAL_SAI_RxHalfCpltCallback+0x14>
	}

	soundProcess(DMABuffin_ch1, 0);
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <HAL_SAI_RxHalfCpltCallback+0x5c>)
 800117a:	2100      	movs	r1, #0
 800117c:	f7ff ff86 	bl	800108c <soundProcess>

	for(uint16_t i = 0, j = 0; i < DMABuffLength / 2; i++, j++)
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_SAI_RxHalfCpltCallback+0x60>)
	{
		DMABuffout[i++] = (int16_t) DMABuffin_ch1[j];
		DMABuffout[i] = 0;
 8001182:	2000      	movs	r0, #0
 8001184:	f503 6180 	add.w	r1, r3, #1024	; 0x400
		DMABuffout[i++] = (int16_t) DMABuffin_ch1[j];
 8001188:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800118c:	801a      	strh	r2, [r3, #0]
		DMABuffout[i] = 0;
 800118e:	8058      	strh	r0, [r3, #2]
	for(uint16_t i = 0, j = 0; i < DMABuffLength / 2; i++, j++)
 8001190:	3304      	adds	r3, #4
 8001192:	428b      	cmp	r3, r1
 8001194:	d1f8      	bne.n	8001188 <HAL_SAI_RxHalfCpltCallback+0x34>
	}

	HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_SET); //pin PA5
}
 8001196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_SET); //pin PA5
 800119a:	4802      	ldr	r0, [pc, #8]	; (80011a4 <HAL_SAI_RxHalfCpltCallback+0x50>)
 800119c:	2201      	movs	r2, #1
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	f002 be2a 	b.w	8003df8 <HAL_GPIO_WritePin>
 80011a4:	40021800 	.word	0x40021800
 80011a8:	20000acc 	.word	0x20000acc
 80011ac:	200002d0 	.word	0x200002d0
 80011b0:	20000ad0 	.word	0x20000ad0
 80011b4:	200012d0 	.word	0x200012d0

080011b8 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai_BlockB1)
{
 80011b8:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_RESET); //pin PA5
 80011ba:	481d      	ldr	r0, [pc, #116]	; (8001230 <HAL_SAI_RxCpltCallback+0x78>)
	for(uint16_t i = 0; i < DMABuffLength / 2; i++)
	{
		if(i % 2 == 0)
		{
//			DMABuffin_ch1[j++] = wave4p[DMABuffLength / 2 + i];
			DMABuffin_ch1[j++] = DMABuffin[DMABuffLength / 2 + i];
 80011bc:	4d1d      	ldr	r5, [pc, #116]	; (8001234 <HAL_SAI_RxCpltCallback+0x7c>)
	HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_RESET); //pin PA5
 80011be:	2200      	movs	r2, #0
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	f002 fe19 	bl	8003df8 <HAL_GPIO_WritePin>
 80011c6:	2300      	movs	r3, #0
			DMABuffin_ch1[j++] = DMABuffin[DMABuffLength / 2 + i];
 80011c8:	481b      	ldr	r0, [pc, #108]	; (8001238 <HAL_SAI_RxCpltCallback+0x80>)
	uint16_t j =0;
 80011ca:	461a      	mov	r2, r3
		if(i % 2 == 0)
 80011cc:	f013 0f01 	tst.w	r3, #1
			DMABuffin_ch1[j++] = DMABuffin[DMABuffLength / 2 + i];
 80011d0:	eb00 0143 	add.w	r1, r0, r3, lsl #1
	for(uint16_t i = 0; i < DMABuffLength / 2; i++)
 80011d4:	f103 0301 	add.w	r3, r3, #1
		if(i % 2 == 0)
 80011d8:	d105      	bne.n	80011e6 <HAL_SAI_RxCpltCallback+0x2e>
			DMABuffin_ch1[j++] = DMABuffin[DMABuffLength / 2 + i];
 80011da:	f9b1 4400 	ldrsh.w	r4, [r1, #1024]	; 0x400
 80011de:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
 80011e2:	1c51      	adds	r1, r2, #1
 80011e4:	b28a      	uxth	r2, r1
	for(uint16_t i = 0; i < DMABuffLength / 2; i++)
 80011e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ea:	d1ef      	bne.n	80011cc <HAL_SAI_RxCpltCallback+0x14>
		}
	}

	soundProcess(&DMABuffin_ch1[0], 0);
 80011ec:	2100      	movs	r1, #0
 80011ee:	4811      	ldr	r0, [pc, #68]	; (8001234 <HAL_SAI_RxCpltCallback+0x7c>)
	j = 0;
	for(uint16_t i = 0; i < DMABuffLength / 2; i++)
	{
		if(i % 2 == 0)
		{
		   DMABuffout[DMABuffLength / 2 + i] = (int16_t) DMABuffin_ch1[j++];
 80011f0:	4d10      	ldr	r5, [pc, #64]	; (8001234 <HAL_SAI_RxCpltCallback+0x7c>)
	soundProcess(&DMABuffin_ch1[0], 0);
 80011f2:	f7ff ff4b 	bl	800108c <soundProcess>
 80011f6:	2300      	movs	r3, #0
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_SAI_RxCpltCallback+0x84>)
	j = 0;
 80011fa:	4619      	mov	r1, r3
		}
		else
		{
			DMABuffout[DMABuffLength / 2 + i] = 0;
 80011fc:	461c      	mov	r4, r3
		if(i % 2 == 0)
 80011fe:	f013 0f01 	tst.w	r3, #1
		   DMABuffout[DMABuffLength / 2 + i] = (int16_t) DMABuffin_ch1[j++];
 8001202:	f101 0001 	add.w	r0, r1, #1
	for(uint16_t i = 0; i < DMABuffLength / 2; i++)
 8001206:	f103 0301 	add.w	r3, r3, #1
		   DMABuffout[DMABuffLength / 2 + i] = (int16_t) DMABuffin_ch1[j++];
 800120a:	bf05      	ittet	eq
 800120c:	f855 1021 	ldreq.w	r1, [r5, r1, lsl #2]
 8001210:	8011      	strheq	r1, [r2, #0]
			DMABuffout[DMABuffLength / 2 + i] = 0;
 8001212:	8014      	strhne	r4, [r2, #0]
		   DMABuffout[DMABuffLength / 2 + i] = (int16_t) DMABuffin_ch1[j++];
 8001214:	b281      	uxtheq	r1, r0
	for(uint16_t i = 0; i < DMABuffLength / 2; i++)
 8001216:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800121a:	f102 0202 	add.w	r2, r2, #2
 800121e:	d1ee      	bne.n	80011fe <HAL_SAI_RxCpltCallback+0x46>
		}
	}
	HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_SET); //pin PA5
}
 8001220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(Verificare_samplerate_GPIO_Port, Verificare_samplerate_Pin, GPIO_PIN_SET); //pin PA5
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <HAL_SAI_RxCpltCallback+0x78>)
 8001226:	2201      	movs	r2, #1
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	f002 bde5 	b.w	8003df8 <HAL_GPIO_WritePin>
 800122e:	bf00      	nop
 8001230:	40021800 	.word	0x40021800
 8001234:	20000ad0 	.word	0x20000ad0
 8001238:	200002d0 	.word	0x200002d0
 800123c:	200016d0 	.word	0x200016d0

08001240 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	if (hadc == &hadc3)
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_ADC_ConvCpltCallback+0x34>)
 8001242:	4298      	cmp	r0, r3
 8001244:	d000      	beq.n	8001248 <HAL_ADC_ConvCpltCallback+0x8>
 8001246:	4770      	bx	lr
{
 8001248:	b510      	push	{r4, lr}
 800124a:	4604      	mov	r4, r0
	{
		uint16_t readValue = HAL_ADC_GetValue(&hadc3);
 800124c:	f001 fe36 	bl	8002ebc <HAL_ADC_GetValue>
		amount_of_modulation = (readValue / 32) - 64;
 8001250:	f3c0 114a 	ubfx	r1, r0, #5, #11
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_ADC_ConvCpltCallback+0x38>)
		medianValue = MEDIANFILTER_Insert(&medianFilter, amount_of_modulation);
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_ADC_ConvCpltCallback+0x3c>)
		amount_of_modulation = (readValue / 32) - 64;
 8001258:	3940      	subs	r1, #64	; 0x40
 800125a:	b209      	sxth	r1, r1
 800125c:	8019      	strh	r1, [r3, #0]
		medianValue = MEDIANFILTER_Insert(&medianFilter, amount_of_modulation);
 800125e:	f7ff f9d3 	bl	8000608 <MEDIANFILTER_Insert>
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_ADC_ConvCpltCallback+0x40>)
 8001264:	4602      	mov	r2, r0
		HAL_ADC_Start_IT(&hadc3);
 8001266:	4620      	mov	r0, r4
	}
}
 8001268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		medianValue = MEDIANFILTER_Insert(&medianFilter, amount_of_modulation);
 800126c:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc3);
 800126e:	f001 bd87 	b.w	8002d80 <HAL_ADC_Start_IT>
 8001272:	bf00      	nop
 8001274:	200000c0 	.word	0x200000c0
 8001278:	20001ad0 	.word	0x20001ad0
 800127c:	20002c64 	.word	0x20002c64
 8001280:	20002c78 	.word	0x20002c78
 8001284:	00000000 	.word	0x00000000

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b500      	push	{lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	2300      	movs	r3, #0
{
 800128c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8001292:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001296:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800129a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Macro to configure SAI1BlockB clock source selection
  */
  __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLI2S);
 800129e:	4a30      	ldr	r2, [pc, #192]	; (8001360 <SystemClock_Config+0xd8>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012a0:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a2:	9306      	str	r3, [sp, #24]
  __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLI2S);
 80012a4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
  __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLI2S);

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a8:	482e      	ldr	r0, [pc, #184]	; (8001364 <SystemClock_Config+0xdc>)
  __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLI2S);
 80012aa:	f421 0150 	bic.w	r1, r1, #13631488	; 0xd00000
 80012ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80012b2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(SAI_CLKSOURCE_PLLI2S);
 80012b6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80012ba:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80012be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80012c2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80012ca:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80012ce:	6411      	str	r1, [r2, #64]	; 0x40
 80012d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012d2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	6803      	ldr	r3, [r0, #0]
 80012de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e2:	6003      	str	r3, [r0, #0]
 80012e4:	6803      	ldr	r3, [r0, #0]
 80012e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ea:	9301      	str	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ec:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ee:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f0:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	2002      	movs	r0, #2
 80012f4:	2100      	movs	r1, #0
 80012f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80012fa:	2008      	movs	r0, #8
 80012fc:	21b4      	movs	r1, #180	; 0xb4
 80012fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001302:	2002      	movs	r0, #2
 8001304:	2107      	movs	r1, #7
 8001306:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130c:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001310:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f003 ff7c 	bl	8005210 <HAL_RCC_OscConfig>
 8001318:	b108      	cbz	r0, 800131e <SystemClock_Config+0x96>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	e7fe      	b.n	800131c <SystemClock_Config+0x94>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800131e:	f003 ff3b 	bl	8005198 <HAL_PWREx_EnableOverDrive>
 8001322:	b108      	cbz	r0, 8001328 <SystemClock_Config+0xa0>
 8001324:	b672      	cpsid	i
  while (1)
 8001326:	e7fe      	b.n	8001326 <SystemClock_Config+0x9e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001328:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8001358 <SystemClock_Config+0xd0>
 800132c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001330:	2200      	movs	r2, #0
 8001332:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001336:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001338:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800133c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133e:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001342:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001344:	f004 f96e 	bl	8005624 <HAL_RCC_ClockConfig>
 8001348:	b108      	cbz	r0, 800134e <SystemClock_Config+0xc6>
 800134a:	b672      	cpsid	i
  while (1)
 800134c:	e7fe      	b.n	800134c <SystemClock_Config+0xc4>
}
 800134e:	b015      	add	sp, #84	; 0x54
 8001350:	f85d fb04 	ldr.w	pc, [sp], #4
 8001354:	f3af 8000 	nop.w
 8001358:	0000000f 	.word	0x0000000f
 800135c:	00000002 	.word	0x00000002
 8001360:	40023800 	.word	0x40023800
 8001364:	40007000 	.word	0x40007000

08001368 <PeriphCommonClock_Config>:
{
 8001368:	b500      	push	{lr}
 800136a:	b08d      	sub	sp, #52	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	2228      	movs	r2, #40	; 0x28
 800136e:	2100      	movs	r1, #0
 8001370:	a802      	add	r0, sp, #8
 8001372:	f006 fab3 	bl	80078dc <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLI2S;
 8001376:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8001398 <PeriphCommonClock_Config+0x30>
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800137a:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800137c:	2301      	movs	r3, #1
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLI2S;
 8001380:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001384:	9203      	str	r2, [sp, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001386:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001388:	f004 fa0a 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 800138c:	b108      	cbz	r0, 8001392 <PeriphCommonClock_Config+0x2a>
 800138e:	b672      	cpsid	i
  while (1)
 8001390:	e7fe      	b.n	8001390 <PeriphCommonClock_Config+0x28>
}
 8001392:	b00d      	add	sp, #52	; 0x34
 8001394:	f85d fb04 	ldr.w	pc, [sp], #4
 8001398:	00000002 	.word	0x00000002
 800139c:	00000032 	.word	0x00000032

080013a0 <main>:
{
 80013a0:	b508      	push	{r3, lr}
  HAL_Init();
 80013a2:	f001 fc01 	bl	8002ba8 <HAL_Init>
  medianFilter.medianBuffer = medianBuffer;
 80013a6:	4b66      	ldr	r3, [pc, #408]	; (8001540 <main+0x1a0>)
  medianFilter.numNodes = NUM_ELEMENTS;
 80013a8:	4866      	ldr	r0, [pc, #408]	; (8001544 <main+0x1a4>)
 80013aa:	2219      	movs	r2, #25
  medianFilter.medianBuffer = medianBuffer;
 80013ac:	e9c0 2300 	strd	r2, r3, [r0]
  MEDIANFILTER_Init(&medianFilter);
 80013b0:	f7ff f900 	bl	80005b4 <MEDIANFILTER_Init>
  SystemClock_Config();
 80013b4:	f7ff ff68 	bl	8001288 <SystemClock_Config>
  PeriphCommonClock_Config();
 80013b8:	f7ff ffd6 	bl	8001368 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80013bc:	f7ff fb12 	bl	80009e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013c0:	f7ff fb9e 	bl	8000b00 <MX_I2C1_Init>
  MX_DMA_Init();
 80013c4:	f7ff fa0e 	bl	80007e4 <MX_DMA_Init>
  MX_SAI1_Init();
 80013c8:	f000 f8ee 	bl	80015a8 <MX_SAI1_Init>
  MX_ADC3_Init();
 80013cc:	f7ff f98c 	bl	80006e8 <MX_ADC3_Init>
  MX_DMA2D_Init();
 80013d0:	f7ff fa2a 	bl	8000828 <MX_DMA2D_Init>
  MX_FMC_Init();
 80013d4:	f7ff fa6c 	bl	80008b0 <MX_FMC_Init>
  MX_I2C3_Init();
 80013d8:	f7ff fbca 	bl	8000b70 <MX_I2C3_Init>
  MX_LTDC_Init();
 80013dc:	f7ff fcb2 	bl	8000d44 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 80013e0:	f000 fa68 	bl	80018b4 <MX_USART1_UART_Init>
  BSP_TS_Init(480, 272);
 80013e4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80013e8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80013ec:	f001 fb76 	bl	8002adc <BSP_TS_Init>
  BSP_LCD_Init();
 80013f0:	f001 fa0c 	bl	800280c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80013f4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80013f8:	2000      	movs	r0, #0
 80013fa:	f000 fe49 	bl	8002090 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 80013fe:	f001 f8fb 	bl	80025f8 <BSP_LCD_DisplayOn>
  BSP_LCD_Init();
 8001402:	f001 fa03 	bl	800280c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001406:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800140a:	2000      	movs	r0, #0
 800140c:	f000 fe40 	bl	8002090 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001410:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001414:	f000 fea2 	bl	800215c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f000 fe76 	bl	800210c <BSP_LCD_SetTextColor>
	BSP_LCD_DrawLine(30,240,460,240);
 8001420:	23f0      	movs	r3, #240	; 0xf0
 8001422:	4619      	mov	r1, r3
 8001424:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8001428:	201e      	movs	r0, #30
 800142a:	f001 f85f 	bl	80024ec <BSP_LCD_DrawLine>
	BSP_LCD_DrawLine(30,30,30,240);
 800142e:	221e      	movs	r2, #30
 8001430:	4611      	mov	r1, r2
 8001432:	4610      	mov	r0, r2
 8001434:	23f0      	movs	r3, #240	; 0xf0
 8001436:	f001 f859 	bl	80024ec <BSP_LCD_DrawLine>
	BSP_LCD_SetFont(&Font16);
 800143a:	4843      	ldr	r0, [pc, #268]	; (8001548 <main+0x1a8>)
 800143c:	f000 fe80 	bl	8002140 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001440:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001444:	f000 fe6e 	bl	8002124 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 fe5e 	bl	800210c <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(10, 10, (uint8_t *)"Spectrum analyzer", CENTER_MODE);
 8001450:	210a      	movs	r1, #10
 8001452:	4608      	mov	r0, r1
 8001454:	4a3d      	ldr	r2, [pc, #244]	; (800154c <main+0x1ac>)
 8001456:	2301      	movs	r3, #1
 8001458:	f000 ff3a 	bl	80022d0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 800145c:	483c      	ldr	r0, [pc, #240]	; (8001550 <main+0x1b0>)
 800145e:	f000 fe6f 	bl	8002140 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(30, 250, (uint8_t *)"250Hz  500HZ  1kHz  2kHz  3kHz  4kHz  5kHz  6kHz  7kHz  8kHz", LEFT_MODE);
 8001462:	4a3c      	ldr	r2, [pc, #240]	; (8001554 <main+0x1b4>)
 8001464:	2303      	movs	r3, #3
 8001466:	21fa      	movs	r1, #250	; 0xfa
 8001468:	201e      	movs	r0, #30
 800146a:	f000 ff31 	bl	80022d0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayVertStringAt(5, 30,(uint8_t *)"+4",LEFT_MODE);
 800146e:	4a3a      	ldr	r2, [pc, #232]	; (8001558 <main+0x1b8>)
 8001470:	2303      	movs	r3, #3
 8001472:	211e      	movs	r1, #30
 8001474:	2005      	movs	r0, #5
 8001476:	f000 ff87 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DisplayVertStringAt(5, 50,(uint8_t *)"+2",LEFT_MODE);
 800147a:	4a38      	ldr	r2, [pc, #224]	; (800155c <main+0x1bc>)
 800147c:	2303      	movs	r3, #3
 800147e:	2132      	movs	r1, #50	; 0x32
 8001480:	2005      	movs	r0, #5
 8001482:	f000 ff81 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DisplayVertStringAt(5, 70,(uint8_t *)"+0",LEFT_MODE);
 8001486:	4a36      	ldr	r2, [pc, #216]	; (8001560 <main+0x1c0>)
 8001488:	2303      	movs	r3, #3
 800148a:	2146      	movs	r1, #70	; 0x46
 800148c:	2005      	movs	r0, #5
 800148e:	f000 ff7b 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DisplayVertStringAt(5, 90,(uint8_t *)"-2",LEFT_MODE);
 8001492:	4a34      	ldr	r2, [pc, #208]	; (8001564 <main+0x1c4>)
 8001494:	2303      	movs	r3, #3
 8001496:	215a      	movs	r1, #90	; 0x5a
 8001498:	2005      	movs	r0, #5
 800149a:	f000 ff75 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DisplayVertStringAt(5, 110,(uint8_t *)"-4",LEFT_MODE);
 800149e:	4a32      	ldr	r2, [pc, #200]	; (8001568 <main+0x1c8>)
 80014a0:	2303      	movs	r3, #3
 80014a2:	216e      	movs	r1, #110	; 0x6e
 80014a4:	2005      	movs	r0, #5
 80014a6:	f000 ff6f 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DisplayVertStringAt(5, 130,(uint8_t *)"-8",LEFT_MODE);
 80014aa:	4a30      	ldr	r2, [pc, #192]	; (800156c <main+0x1cc>)
 80014ac:	2303      	movs	r3, #3
 80014ae:	2182      	movs	r1, #130	; 0x82
 80014b0:	2005      	movs	r0, #5
 80014b2:	f000 ff69 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DisplayVertStringAt(5, 150,(uint8_t *)"-12",LEFT_MODE);
 80014b6:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <main+0x1d0>)
 80014b8:	2303      	movs	r3, #3
 80014ba:	2196      	movs	r1, #150	; 0x96
 80014bc:	2005      	movs	r0, #5
 80014be:	f000 ff63 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DisplayVertStringAt(5, 170,(uint8_t *)"-14",LEFT_MODE);
 80014c2:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <main+0x1d4>)
 80014c4:	2303      	movs	r3, #3
 80014c6:	21aa      	movs	r1, #170	; 0xaa
 80014c8:	2005      	movs	r0, #5
 80014ca:	f000 ff5d 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DisplayVertStringAt(5, 190,(uint8_t *)"-16",LEFT_MODE);
 80014ce:	4a2a      	ldr	r2, [pc, #168]	; (8001578 <main+0x1d8>)
 80014d0:	2303      	movs	r3, #3
 80014d2:	21be      	movs	r1, #190	; 0xbe
 80014d4:	2005      	movs	r0, #5
 80014d6:	f000 ff57 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DisplayVertStringAt(5, 210,(uint8_t *)"-20",LEFT_MODE);
 80014da:	4a28      	ldr	r2, [pc, #160]	; (800157c <main+0x1dc>)
 80014dc:	2303      	movs	r3, #3
 80014de:	21d2      	movs	r1, #210	; 0xd2
 80014e0:	2005      	movs	r0, #5
 80014e2:	f000 ff51 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DisplayVertStringAt(5, 230,(uint8_t *)"-40",LEFT_MODE);
 80014e6:	2303      	movs	r3, #3
 80014e8:	4a25      	ldr	r2, [pc, #148]	; (8001580 <main+0x1e0>)
 80014ea:	21e6      	movs	r1, #230	; 0xe6
 80014ec:	2005      	movs	r0, #5
 80014ee:	f000 ff4b 	bl	8002388 <BSP_LCD_DisplayVertStringAt>
	BSP_LCD_DrawVLine(130,120,40);
 80014f2:	2228      	movs	r2, #40	; 0x28
 80014f4:	2178      	movs	r1, #120	; 0x78
 80014f6:	2082      	movs	r0, #130	; 0x82
 80014f8:	f000 ffb0 	bl	800245c <BSP_LCD_DrawVLine>
  WM8994_Init(&hi2c1);
 80014fc:	4821      	ldr	r0, [pc, #132]	; (8001584 <main+0x1e4>)
 80014fe:	f7ff f8c1 	bl	8000684 <WM8994_Init>
  arm_rfft_init_q31(&realFFT_Instance, 256, 0, 1);
 8001502:	2301      	movs	r3, #1
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150a:	481f      	ldr	r0, [pc, #124]	; (8001588 <main+0x1e8>)
 800150c:	f005 f9d6 	bl	80068bc <arm_rfft_init_q31>
  arm_rfft_init_q31(&realIFFT_Instance, DMABuffLength / 4, 1, 1);
 8001510:	2301      	movs	r3, #1
 8001512:	461a      	mov	r2, r3
 8001514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001518:	481c      	ldr	r0, [pc, #112]	; (800158c <main+0x1ec>)
 800151a:	f005 f9cf 	bl	80068bc <arm_rfft_init_q31>
  HAL_SAI_Receive_DMA (&hsai_BlockA1, (uint8_t*) &DMABuffin, DMABuffLength);
 800151e:	491c      	ldr	r1, [pc, #112]	; (8001590 <main+0x1f0>)
 8001520:	481c      	ldr	r0, [pc, #112]	; (8001594 <main+0x1f4>)
 8001522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001526:	f004 fc2f 	bl	8005d88 <HAL_SAI_Receive_DMA>
  HAL_SAI_Transmit_DMA(&hsai_BlockB1, (uint8_t*) &DMABuffout, DMABuffLength);
 800152a:	491b      	ldr	r1, [pc, #108]	; (8001598 <main+0x1f8>)
 800152c:	481b      	ldr	r0, [pc, #108]	; (800159c <main+0x1fc>)
 800152e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001532:	f004 fb9f 	bl	8005c74 <HAL_SAI_Transmit_DMA>
  HAL_ADC_Start_IT(&hadc3);
 8001536:	481a      	ldr	r0, [pc, #104]	; (80015a0 <main+0x200>)
 8001538:	f001 fc22 	bl	8002d80 <HAL_ADC_Start_IT>
  while (1)
 800153c:	e7fe      	b.n	800153c <main+0x19c>
 800153e:	bf00      	nop
 8001540:	20002ad4 	.word	0x20002ad4
 8001544:	20002c64 	.word	0x20002c64
 8001548:	20000088 	.word	0x20000088
 800154c:	08007a8c 	.word	0x08007a8c
 8001550:	20000080 	.word	0x20000080
 8001554:	08007aa0 	.word	0x08007aa0
 8001558:	08007ae0 	.word	0x08007ae0
 800155c:	08007ae4 	.word	0x08007ae4
 8001560:	08007ae8 	.word	0x08007ae8
 8001564:	08007aec 	.word	0x08007aec
 8001568:	08007af0 	.word	0x08007af0
 800156c:	08007af4 	.word	0x08007af4
 8001570:	08007af8 	.word	0x08007af8
 8001574:	08007afc 	.word	0x08007afc
 8001578:	08007b00 	.word	0x08007b00
 800157c:	08007b04 	.word	0x08007b04
 8001580:	08007b08 	.word	0x08007b08
 8001584:	20000180 	.word	0x20000180
 8001588:	20002c7c 	.word	0x20002c7c
 800158c:	20002c94 	.word	0x20002c94
 8001590:	200002d0 	.word	0x200002d0
 8001594:	20002d70 	.word	0x20002d70
 8001598:	200012d0 	.word	0x200012d0
 800159c:	20002df8 	.word	0x20002df8
 80015a0:	200000c0 	.word	0x200000c0

080015a4 <Error_Handler>:
 80015a4:	b672      	cpsid	i
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <Error_Handler+0x2>

080015a8 <MX_SAI1_Init>:

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80015a8:	4831      	ldr	r0, [pc, #196]	; (8001670 <MX_SAI1_Init+0xc8>)
{
 80015aa:	b510      	push	{r4, lr}
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 80015ac:	2103      	movs	r1, #3
  hsai_BlockA1.Instance = SAI1_Block_A;
 80015ae:	4c31      	ldr	r4, [pc, #196]	; (8001674 <MX_SAI1_Init+0xcc>)
 80015b0:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80015b2:	2300      	movs	r3, #0
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80015b4:	2201      	movs	r2, #1
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 80015b6:	2480      	movs	r4, #128	; 0x80
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 80015b8:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80015ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80015be:	e9c0 430e 	strd	r4, r3, [r0, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80015c2:	6402      	str	r2, [r0, #64]	; 0x40
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockA1.FrameInit.FrameLength = 32;
 80015c4:	2420      	movs	r4, #32
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 80015c6:	6082      	str	r2, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80015c8:	6101      	str	r1, [r0, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80015ca:	6182      	str	r2, [r0, #24]
  hsai_BlockA1.FrameInit.ActiveFrameLength = 16;
 80015cc:	2110      	movs	r1, #16
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80015ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015d2:	e9c0 1212 	strd	r1, r2, [r0, #72]	; 0x48
  hsai_BlockA1.FrameInit.FrameLength = 32;
 80015d6:	6444      	str	r4, [r0, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  hsai_BlockA1.SlotInit.SlotNumber = 2;
 80015d8:	2102      	movs	r1, #2
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80015da:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 80015de:	f64f 72ff 	movw	r2, #65535	; 0xffff
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80015e2:	e9c0 3414 	strd	r3, r4, [r0, #80]	; 0x50
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80015e6:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 80015ea:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80015ee:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80015f0:	f004 fa02 	bl	80059f8 <HAL_SAI_Init>
 80015f4:	bb58      	cbnz	r0, 800164e <MX_SAI1_Init+0xa6>
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80015f6:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001660 <MX_SAI1_Init+0xb8>
  hsai_BlockB1.Instance = SAI1_Block_B;
 80015fa:	481f      	ldr	r0, [pc, #124]	; (8001678 <MX_SAI1_Init+0xd0>)
 80015fc:	491f      	ldr	r1, [pc, #124]	; (800167c <MX_SAI1_Init+0xd4>)
 80015fe:	6001      	str	r1, [r0, #0]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 8001600:	2280      	movs	r2, #128	; 0x80
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001602:	ed80 7b04 	vstr	d7, [r0, #16]
 8001606:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8001668 <MX_SAI1_Init+0xc0>
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_16;
 800160a:	6382      	str	r2, [r0, #56]	; 0x38
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_PLLI2S;
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
  hsai_BlockB1.FrameInit.FrameLength = 32;
 800160c:	2220      	movs	r2, #32
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 800160e:	f44f 547a 	mov.w	r4, #16000	; 0x3e80
  hsai_BlockB1.FrameInit.ActiveFrameLength = 16;
 8001612:	2110      	movs	r1, #16
  hsai_BlockB1.FrameInit.FrameLength = 32;
 8001614:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800161a:	2300      	movs	r3, #0
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800161c:	e9c0 1212 	strd	r1, r2, [r0, #72]	; 0x48
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001620:	6204      	str	r4, [r0, #32]
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  hsai_BlockB1.SlotInit.SlotNumber = 2;
 8001622:	2102      	movs	r1, #2
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001624:	f44f 2480 	mov.w	r4, #262144	; 0x40000
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 8001628:	f64f 72ff 	movw	r2, #65535	; 0xffff
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800162c:	ed80 7b06 	vstr	d7, [r0, #24]
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001630:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001634:	e9c0 3414 	strd	r3, r4, [r0, #80]	; 0x50
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001638:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotActive = 0x0000FFFF;
 800163c:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001640:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001642:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001644:	6083      	str	r3, [r0, #8]
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001646:	f004 f9d7 	bl	80059f8 <HAL_SAI_Init>
 800164a:	b918      	cbnz	r0, 8001654 <MX_SAI1_Init+0xac>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800164c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800164e:	f7ff ffa9 	bl	80015a4 <Error_Handler>
 8001652:	e7d0      	b.n	80015f6 <MX_SAI1_Init+0x4e>
}
 8001654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001658:	f7ff bfa4 	b.w	80015a4 <Error_Handler>
 800165c:	f3af 8000 	nop.w
 8001660:	00002000 	.word	0x00002000
 8001664:	00000000 	.word	0x00000000
 8001668:	00000001 	.word	0x00000001
 800166c:	00100000 	.word	0x00100000
 8001670:	20002d70 	.word	0x20002d70
 8001674:	40015804 	.word	0x40015804
 8001678:	20002df8 	.word	0x20002df8
 800167c:	40015824 	.word	0x40015824

08001680 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001680:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001682:	4a55      	ldr	r2, [pc, #340]	; (80017d8 <HAL_SAI_MspInit+0x158>)
 8001684:	6803      	ldr	r3, [r0, #0]
 8001686:	4293      	cmp	r3, r2
{
 8001688:	b088      	sub	sp, #32
 800168a:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 800168c:	d004      	beq.n	8001698 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 800168e:	4a53      	ldr	r2, [pc, #332]	; (80017dc <HAL_SAI_MspInit+0x15c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d036      	beq.n	8001702 <HAL_SAI_MspInit+0x82>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8001694:	b008      	add	sp, #32
 8001696:	bd70      	pop	{r4, r5, r6, pc}
    if (SAI1_client == 0)
 8001698:	4e51      	ldr	r6, [pc, #324]	; (80017e0 <HAL_SAI_MspInit+0x160>)
 800169a:	6832      	ldr	r2, [r6, #0]
 800169c:	2a00      	cmp	r2, #0
 800169e:	d065      	beq.n	800176c <HAL_SAI_MspInit+0xec>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016a0:	ed9f 7b49 	vldr	d7, [pc, #292]	; 80017c8 <HAL_SAI_MspInit+0x148>
    SAI1_client ++;
 80016a4:	3201      	adds	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016a6:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a8:	484e      	ldr	r0, [pc, #312]	; (80017e4 <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 80016aa:	6032      	str	r2, [r6, #0]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ac:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ae:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80016b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016b2:	2300      	movs	r3, #0
    hdma_sai1_a.Instance = DMA2_Stream1;
 80016b4:	4d4c      	ldr	r5, [pc, #304]	; (80017e8 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80016ba:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016be:	f002 f99f 	bl	8003a00 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA2_Stream1;
 80016c2:	494a      	ldr	r1, [pc, #296]	; (80017ec <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80016c4:	2300      	movs	r3, #0
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80016c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80016ca:	e9c5 1300 	strd	r1, r3, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80016ce:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d8:	e9c5 1205 	strd	r1, r2, [r5, #20]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80016dc:	4628      	mov	r0, r5
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80016de:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e2:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80016e6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ea:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80016ec:	f001 fdb6 	bl	800325c <HAL_DMA_Init>
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d166      	bne.n	80017c2 <HAL_SAI_MspInit+0x142>
    if(saiHandle->Instance==SAI1_Block_B)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	4a39      	ldr	r2, [pc, #228]	; (80017dc <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80016f8:	6765      	str	r5, [r4, #116]	; 0x74
    if(saiHandle->Instance==SAI1_Block_B)
 80016fa:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80016fc:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80016fe:	6725      	str	r5, [r4, #112]	; 0x70
    if(saiHandle->Instance==SAI1_Block_B)
 8001700:	d1c8      	bne.n	8001694 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 8001702:	4e37      	ldr	r6, [pc, #220]	; (80017e0 <HAL_SAI_MspInit+0x160>)
 8001704:	6832      	ldr	r2, [r6, #0]
 8001706:	2a00      	cmp	r2, #0
 8001708:	d047      	beq.n	800179a <HAL_SAI_MspInit+0x11a>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_8;
 800170a:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80017d0 <HAL_SAI_MspInit+0x150>
    SAI1_client ++;
 800170e:	3201      	adds	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001710:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001712:	4837      	ldr	r0, [pc, #220]	; (80017f0 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 8001714:	6032      	str	r2, [r6, #0]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001716:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_8;
 8001718:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800171a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_8;
 800171c:	2300      	movs	r3, #0
    hdma_sai1_b.Instance = DMA2_Stream4;
 800171e:	4d35      	ldr	r5, [pc, #212]	; (80017f4 <HAL_SAI_MspInit+0x174>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_8;
 8001720:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001724:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001728:	f002 f96a 	bl	8003a00 <HAL_GPIO_Init>
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 800172c:	4932      	ldr	r1, [pc, #200]	; (80017f8 <HAL_SAI_MspInit+0x178>)
 800172e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001732:	2300      	movs	r3, #0
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8001734:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001738:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800173a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800173e:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8001742:	612a      	str	r2, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174c:	e9c5 1205 	strd	r1, r2, [r5, #20]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8001750:	4628      	mov	r0, r5
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8001752:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 8001756:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800175a:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800175c:	f001 fd7e 	bl	800325c <HAL_DMA_Init>
 8001760:	b9c0      	cbnz	r0, 8001794 <HAL_SAI_MspInit+0x114>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8001762:	6765      	str	r5, [r4, #116]	; 0x74
 8001764:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8001766:	6725      	str	r5, [r4, #112]	; 0x70
}
 8001768:	b008      	add	sp, #32
 800176a:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 800176c:	4b23      	ldr	r3, [pc, #140]	; (80017fc <HAL_SAI_MspInit+0x17c>)
 800176e:	9200      	str	r2, [sp, #0]
 8001770:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001772:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001776:	6459      	str	r1, [r3, #68]	; 0x44
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 800177e:	4611      	mov	r1, r2
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001780:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001782:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001784:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8001786:	f001 fd03 	bl	8003190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 800178a:	2057      	movs	r0, #87	; 0x57
 800178c:	f001 fd3e 	bl	800320c <HAL_NVIC_EnableIRQ>
    SAI1_client ++;
 8001790:	6832      	ldr	r2, [r6, #0]
 8001792:	e785      	b.n	80016a0 <HAL_SAI_MspInit+0x20>
      Error_Handler();
 8001794:	f7ff ff06 	bl	80015a4 <Error_Handler>
 8001798:	e7e3      	b.n	8001762 <HAL_SAI_MspInit+0xe2>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_SAI_MspInit+0x17c>)
 800179c:	9201      	str	r2, [sp, #4]
 800179e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80017a0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80017a4:	6459      	str	r1, [r3, #68]	; 0x44
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80017ac:	4611      	mov	r1, r2
       __HAL_RCC_SAI1_CLK_ENABLE();
 80017ae:	9301      	str	r3, [sp, #4]
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80017b0:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
 80017b2:	9b01      	ldr	r3, [sp, #4]
      HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 80017b4:	f001 fcec 	bl	8003190 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
 80017b8:	2057      	movs	r0, #87	; 0x57
 80017ba:	f001 fd27 	bl	800320c <HAL_NVIC_EnableIRQ>
    SAI1_client ++;
 80017be:	6832      	ldr	r2, [r6, #0]
 80017c0:	e7a3      	b.n	800170a <HAL_SAI_MspInit+0x8a>
      Error_Handler();
 80017c2:	f7ff feef 	bl	80015a4 <Error_Handler>
 80017c6:	e795      	b.n	80016f4 <HAL_SAI_MspInit+0x74>
 80017c8:	00000040 	.word	0x00000040
 80017cc:	00000002 	.word	0x00000002
 80017d0:	000003c0 	.word	0x000003c0
 80017d4:	00000002 	.word	0x00000002
 80017d8:	40015804 	.word	0x40015804
 80017dc:	40015824 	.word	0x40015824
 80017e0:	20002cac 	.word	0x20002cac
 80017e4:	40021000 	.word	0x40021000
 80017e8:	20002cb0 	.word	0x20002cb0
 80017ec:	40026428 	.word	0x40026428
 80017f0:	40021400 	.word	0x40021400
 80017f4:	20002d10 	.word	0x20002d10
 80017f8:	40026470 	.word	0x40026470
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_MspInit+0x38>)
 8001804:	2100      	movs	r1, #0
 8001806:	9100      	str	r1, [sp, #0]
 8001808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800180a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
 8001810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001812:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001816:	9200      	str	r2, [sp, #0]
 8001818:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	9101      	str	r1, [sp, #4]
 800181c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800181e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001822:	641a      	str	r2, [r3, #64]	; 0x40
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800182e:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001830:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001832:	f001 bc9b 	b.w	800316c <HAL_NVIC_SetPriorityGrouping>
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler>
 800183e:	bf00      	nop

08001840 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <HardFault_Handler>
 8001842:	bf00      	nop

08001844 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <MemManage_Handler>
 8001846:	bf00      	nop

08001848 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <BusFault_Handler>
 800184a:	bf00      	nop

0800184c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler>
 800184e:	bf00      	nop

08001850 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop

08001854 <DebugMon_Handler>:
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <PendSV_Handler>:
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop

0800185c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800185c:	f001 b9be 	b.w	8002bdc <HAL_IncTick>

08001860 <ADC_IRQHandler>:
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001860:	4801      	ldr	r0, [pc, #4]	; (8001868 <ADC_IRQHandler+0x8>)
 8001862:	f001 bb33 	b.w	8002ecc <HAL_ADC_IRQHandler>
 8001866:	bf00      	nop
 8001868:	200000c0 	.word	0x200000c0

0800186c <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800186c:	4801      	ldr	r0, [pc, #4]	; (8001874 <DMA2_Stream1_IRQHandler+0x8>)
 800186e:	f001 be69 	b.w	8003544 <HAL_DMA_IRQHandler>
 8001872:	bf00      	nop
 8001874:	20002cb0 	.word	0x20002cb0

08001878 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8001878:	4801      	ldr	r0, [pc, #4]	; (8001880 <DMA2_Stream4_IRQHandler+0x8>)
 800187a:	f001 be63 	b.w	8003544 <HAL_DMA_IRQHandler>
 800187e:	bf00      	nop
 8001880:	20002d10 	.word	0x20002d10

08001884 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8001884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8001886:	4804      	ldr	r0, [pc, #16]	; (8001898 <SAI1_IRQHandler+0x14>)
 8001888:	f004 fb9c 	bl	8005fc4 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 800188c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SAI_IRQHandler(&hsai_BlockB1);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <SAI1_IRQHandler+0x18>)
 8001892:	f004 bb97 	b.w	8005fc4 <HAL_SAI_IRQHandler>
 8001896:	bf00      	nop
 8001898:	20002d70 	.word	0x20002d70
 800189c:	20002df8 	.word	0x20002df8

080018a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a0:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <SystemInit+0x10>)
 80018a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018b4:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018b6:	480b      	ldr	r0, [pc, #44]	; (80018e4 <MX_USART1_UART_Init+0x30>)
 80018b8:	4c0b      	ldr	r4, [pc, #44]	; (80018e8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ba:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 80018bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c0:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80018c2:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ca:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ce:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d2:	f004 fcf7 	bl	80062c4 <HAL_UART_Init>
 80018d6:	b900      	cbnz	r0, 80018da <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018d8:	bd10      	pop	{r4, pc}
 80018da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80018de:	f7ff be61 	b.w	80015a4 <Error_Handler>
 80018e2:	bf00      	nop
 80018e4:	20002e80 	.word	0x20002e80
 80018e8:	40011000 	.word	0x40011000

080018ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018ec:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 80018ee:	4a24      	ldr	r2, [pc, #144]	; (8001980 <HAL_UART_MspInit+0x94>)
 80018f0:	6801      	ldr	r1, [r0, #0]
{
 80018f2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART1)
 80018f6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80018fc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001900:	9308      	str	r3, [sp, #32]
  if(uartHandle->Instance==USART1)
 8001902:	d001      	beq.n	8001908 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001904:	b00a      	add	sp, #40	; 0x28
 8001906:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001908:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	481c      	ldr	r0, [pc, #112]	; (8001984 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001912:	f041 0110 	orr.w	r1, r1, #16
 8001916:	6451      	str	r1, [r2, #68]	; 0x44
 8001918:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800191a:	f001 0110 	and.w	r1, r1, #16
 800191e:	9101      	str	r1, [sp, #4]
 8001920:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	9302      	str	r3, [sp, #8]
 8001924:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001926:	f041 0102 	orr.w	r1, r1, #2
 800192a:	6311      	str	r1, [r2, #48]	; 0x30
 800192c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800192e:	f001 0102 	and.w	r1, r1, #2
 8001932:	9102      	str	r1, [sp, #8]
 8001934:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	9303      	str	r3, [sp, #12]
 8001938:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6313      	str	r3, [r2, #48]	; 0x30
 8001940:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	2302      	movs	r3, #2
 800194c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001950:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001956:	e9cd 3407 	strd	r3, r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f002 f850 	bl	8003a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001964:	2302      	movs	r3, #2
 8001966:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <HAL_UART_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800196c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800196e:	2200      	movs	r2, #0
 8001970:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001974:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	f002 f842 	bl	8003a00 <HAL_GPIO_Init>
}
 800197c:	b00a      	add	sp, #40	; 0x28
 800197e:	bd10      	pop	{r4, pc}
 8001980:	40011000 	.word	0x40011000
 8001984:	40020400 	.word	0x40020400
 8001988:	40020000 	.word	0x40020000

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001990:	480d      	ldr	r0, [pc, #52]	; (80019c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001992:	490e      	ldr	r1, [pc, #56]	; (80019cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a8:	4c0b      	ldr	r4, [pc, #44]	; (80019d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019b6:	f7ff ff73 	bl	80018a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f005 ff6b 	bl	8007894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff fcef 	bl	80013a0 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80019d0:	0802a470 	.word	0x0802a470
  ldr r2, =_sbss
 80019d4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80019d8:	20003134 	.word	0x20003134

080019dc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <CAN1_RX0_IRQHandler>
	...

080019e0 <exc7200_Reset>:
  * @retval None
  */
void exc7200_Reset(uint16_t DeviceAddr)
{

}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop

080019e4 <exc7200_ReadID>:
  * @retval The Device ID (two bytes).
  */
uint16_t exc7200_ReadID(uint16_t DeviceAddr)
{
  return 0;
}
 80019e4:	2000      	movs	r0, #0
 80019e6:	4770      	bx	lr

080019e8 <exc7200_TS_ITStatus>:
  * @retval TS interrupts status
  */
uint8_t exc7200_TS_ITStatus(uint16_t DeviceAddr)
{
  return 0;
}
 80019e8:	2000      	movs	r0, #0
 80019ea:	4770      	bx	lr

080019ec <exc7200_Init>:
  IOE_Init(); 
 80019ec:	f000 ba66 	b.w	8001ebc <IOE_Init>

080019f0 <exc7200_TS_DetectTouch>:
{
 80019f0:	b510      	push	{r4, lr}
  IOE_ReadMultiple(DeviceAddr | 1, EXC7200_READ_CMD, aBufferTS, 10);  
 80019f2:	4c08      	ldr	r4, [pc, #32]	; (8001a14 <exc7200_TS_DetectTouch+0x24>)
 80019f4:	f040 0001 	orr.w	r0, r0, #1
 80019f8:	230a      	movs	r3, #10
 80019fa:	4622      	mov	r2, r4
 80019fc:	2109      	movs	r1, #9
 80019fe:	b2c0      	uxtb	r0, r0
 8001a00:	f000 faf2 	bl	8001fe8 <IOE_ReadMultiple>
  if (aBufferTS[1]==0x83)
 8001a04:	7860      	ldrb	r0, [r4, #1]
}
 8001a06:	f1a0 0083 	sub.w	r0, r0, #131	; 0x83
 8001a0a:	fab0 f080 	clz	r0, r0
 8001a0e:	0940      	lsrs	r0, r0, #5
 8001a10:	bd10      	pop	{r4, pc}
 8001a12:	bf00      	nop
 8001a14:	20002ec4 	.word	0x20002ec4

08001a18 <exc7200_TS_GetXY>:
{
 8001a18:	b410      	push	{r4}
  *X = (((aBufferTS[3]&0x00ff) << 4) | ((aBufferTS[2]&0x00f0) >> 4)) << 1;
 8001a1a:	4c0c      	ldr	r4, [pc, #48]	; (8001a4c <exc7200_TS_GetXY+0x34>)
 8001a1c:	78a3      	ldrb	r3, [r4, #2]
 8001a1e:	f894 c003 	ldrb.w	ip, [r4, #3]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	800b      	strh	r3, [r1, #0]
  *Y = (((aBufferTS[5]&0x00ff) << 4) | ((aBufferTS[4]&0x00f0) >> 4)) << 1;
 8001a2c:	7923      	ldrb	r3, [r4, #4]
 8001a2e:	7961      	ldrb	r1, [r4, #5]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	8013      	strh	r3, [r2, #0]
  IOE_ReadMultiple(DeviceAddr, EXC7200_READ_CMD, aBufferTS, 10);    
 8001a3a:	b2c0      	uxtb	r0, r0
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	230a      	movs	r3, #10
}
 8001a40:	f85d 4b04 	ldr.w	r4, [sp], #4
  IOE_ReadMultiple(DeviceAddr, EXC7200_READ_CMD, aBufferTS, 10);    
 8001a44:	2109      	movs	r1, #9
 8001a46:	f000 bacf 	b.w	8001fe8 <IOE_ReadMultiple>
 8001a4a:	bf00      	nop
 8001a4c:	20002ec4 	.word	0x20002ec4

08001a50 <exc7200_TS_DisableIT>:
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <exc7200_TS_ClearIT>:
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop

08001a58 <exc7200_TS_Start>:
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <exc7200_TS_EnableIT>:
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <stmpe811_TS_ClearIT>:
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001a60:	221f      	movs	r2, #31
 8001a62:	210b      	movs	r1, #11
 8001a64:	b2c0      	uxtb	r0, r0
 8001a66:	f000 ba71 	b.w	8001f4c <IOE_Write>
 8001a6a:	bf00      	nop

08001a6c <stmpe811_Reset>:
{
 8001a6c:	b510      	push	{r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001a6e:	b2c4      	uxtb	r4, r0
 8001a70:	2202      	movs	r2, #2
 8001a72:	2103      	movs	r1, #3
 8001a74:	4620      	mov	r0, r4
 8001a76:	f000 fa69 	bl	8001f4c <IOE_Write>
  IOE_Delay(10); 
 8001a7a:	200a      	movs	r0, #10
 8001a7c:	f000 fb06 	bl	800208c <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001a80:	4620      	mov	r0, r4
 8001a82:	2200      	movs	r2, #0
 8001a84:	2103      	movs	r1, #3
 8001a86:	f000 fa61 	bl	8001f4c <IOE_Write>
}
 8001a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f000 bafc 	b.w	800208c <IOE_Delay>

08001a94 <stmpe811_ReadID>:
{
 8001a94:	b510      	push	{r4, lr}
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001a96:	b2c4      	uxtb	r4, r0
  IOE_Init(); 
 8001a98:	f000 fa10 	bl	8001ebc <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f000 fa7a 	bl	8001f98 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001aa4:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001aa6:	4603      	mov	r3, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001aa8:	4620      	mov	r0, r4
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001aaa:	461c      	mov	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001aac:	f000 fa74 	bl	8001f98 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001ab0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8001ab4:	b280      	uxth	r0, r0
 8001ab6:	bd10      	pop	{r4, pc}

08001ab8 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001ab8:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001aba:	b2c4      	uxtb	r4, r0
 8001abc:	2140      	movs	r1, #64	; 0x40
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f000 fa6a 	bl	8001f98 <IOE_Read>
  
  if(state > 0)
 8001ac4:	0603      	lsls	r3, r0, #24
 8001ac6:	d40b      	bmi.n	8001ae0 <stmpe811_TS_DetectTouch+0x28>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001ac8:	4620      	mov	r0, r4
 8001aca:	2201      	movs	r2, #1
 8001acc:	214b      	movs	r1, #75	; 0x4b
 8001ace:	f000 fa3d 	bl	8001f4c <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	214b      	movs	r1, #75	; 0x4b
 8001ad8:	f000 fa38 	bl	8001f4c <IOE_Write>
  uint8_t ret = 0;
 8001adc:	2000      	movs	r0, #0
  }
  
  return ret;
}
 8001ade:	bd10      	pop	{r4, pc}
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001ae0:	214c      	movs	r1, #76	; 0x4c
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f000 fa58 	bl	8001f98 <IOE_Read>
      ret = 1;
 8001ae8:	3800      	subs	r0, #0
 8001aea:	bf18      	it	ne
 8001aec:	2001      	movne	r0, #1
}
 8001aee:	bd10      	pop	{r4, pc}

08001af0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8001af0:	b508      	push	{r3, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001af2:	210b      	movs	r1, #11
 8001af4:	b2c0      	uxtb	r0, r0
 8001af6:	f000 fa4f 	bl	8001f98 <IOE_Read>
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
}
 8001afa:	f000 001f 	and.w	r0, r0, #31
 8001afe:	bd08      	pop	{r3, pc}

08001b00 <stmpe811_TS_GetXY>:
{
 8001b00:	b570      	push	{r4, r5, r6, lr}
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001b02:	2304      	movs	r3, #4
{
 8001b04:	b082      	sub	sp, #8
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001b06:	b2c4      	uxtb	r4, r0
{
 8001b08:	4615      	mov	r5, r2
 8001b0a:	460e      	mov	r6, r1
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001b0c:	eb0d 0203 	add.w	r2, sp, r3
 8001b10:	21d7      	movs	r1, #215	; 0xd7
 8001b12:	4620      	mov	r0, r4
 8001b14:	f000 fa68 	bl	8001fe8 <IOE_ReadMultiple>
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001b18:	9b01      	ldr	r3, [sp, #4]
 8001b1a:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001b1c:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001b1e:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001b22:	8032      	strh	r2, [r6, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001b24:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001b26:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	214b      	movs	r1, #75	; 0x4b
 8001b2c:	f000 fa0e 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001b30:	2200      	movs	r2, #0
 8001b32:	214b      	movs	r1, #75	; 0x4b
 8001b34:	4620      	mov	r0, r4
 8001b36:	f000 fa09 	bl	8001f4c <IOE_Write>
}
 8001b3a:	b002      	add	sp, #8
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
 8001b3e:	bf00      	nop

08001b40 <stmpe811_TS_Start>:
{
 8001b40:	b538      	push	{r3, r4, r5, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001b42:	b2c4      	uxtb	r4, r0
 8001b44:	2104      	movs	r1, #4
 8001b46:	4620      	mov	r0, r4
 8001b48:	f000 fa26 	bl	8001f98 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001b52:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001b54:	4620      	mov	r0, r4
 8001b56:	f000 f9f9 	bl	8001f4c <IOE_Write>
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001b5a:	2117      	movs	r1, #23
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f000 fa1b 	bl	8001f98 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001b62:	2117      	movs	r1, #23
 8001b64:	f000 020f 	and.w	r2, r0, #15
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f000 f9ef 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001b6e:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 8001b72:	4620      	mov	r0, r4
 8001b74:	2104      	movs	r1, #4
 8001b76:	f000 f9e9 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001b7a:	2249      	movs	r2, #73	; 0x49
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f000 f9e4 	bl	8001f4c <IOE_Write>
  IOE_Delay(2); 
 8001b84:	2002      	movs	r0, #2
 8001b86:	f000 fa81 	bl	800208c <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2121      	movs	r1, #33	; 0x21
 8001b90:	f000 f9dc 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001b94:	4620      	mov	r0, r4
 8001b96:	229a      	movs	r2, #154	; 0x9a
 8001b98:	2141      	movs	r1, #65	; 0x41
 8001b9a:	f000 f9d7 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	214a      	movs	r1, #74	; 0x4a
 8001ba4:	f000 f9d2 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001ba8:	4620      	mov	r0, r4
 8001baa:	2201      	movs	r2, #1
 8001bac:	214b      	movs	r1, #75	; 0x4b
 8001bae:	f000 f9cd 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	214b      	movs	r1, #75	; 0x4b
 8001bb8:	f000 f9c8 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2156      	movs	r1, #86	; 0x56
 8001bc2:	f000 f9c3 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2158      	movs	r1, #88	; 0x58
 8001bcc:	f000 f9be 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2140      	movs	r1, #64	; 0x40
 8001bd6:	f000 f9b9 	bl	8001f4c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001bda:	4620      	mov	r0, r4
 8001bdc:	22ff      	movs	r2, #255	; 0xff
 8001bde:	210b      	movs	r1, #11
 8001be0:	f000 f9b4 	bl	8001f4c <IOE_Write>
}
 8001be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Delay(2); 
 8001be8:	2002      	movs	r0, #2
 8001bea:	f000 ba4f 	b.w	800208c <IOE_Delay>
 8001bee:	bf00      	nop

08001bf0 <stmpe811_TS_DisableIT>:
{
 8001bf0:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001bf2:	b2c4      	uxtb	r4, r0
 8001bf4:	2109      	movs	r1, #9
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f000 f9ce 	bl	8001f98 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001bfc:	2109      	movs	r1, #9
 8001bfe:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8001c02:	4620      	mov	r0, r4
 8001c04:	f000 f9a2 	bl	8001f4c <IOE_Write>
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001c08:	210a      	movs	r1, #10
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f000 f9c4 	bl	8001f98 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001c10:	210a      	movs	r1, #10
 8001c12:	f000 02e0 	and.w	r2, r0, #224	; 0xe0
 8001c16:	4620      	mov	r0, r4
}
 8001c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001c1c:	f000 b996 	b.w	8001f4c <IOE_Write>

08001c20 <stmpe811_TS_EnableIT>:
{
 8001c20:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001c22:	b2c4      	uxtb	r4, r0
  IOE_ITConfig();
 8001c24:	f000 f956 	bl	8001ed4 <IOE_ITConfig>
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001c28:	210a      	movs	r1, #10
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f000 f9b4 	bl	8001f98 <IOE_Read>
  tmp |= Source; 
 8001c30:	f040 001f 	orr.w	r0, r0, #31
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001c34:	b2c2      	uxtb	r2, r0
 8001c36:	210a      	movs	r1, #10
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f000 f987 	bl	8001f4c <IOE_Write>
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001c3e:	2109      	movs	r1, #9
 8001c40:	4620      	mov	r0, r4
 8001c42:	f000 f9a9 	bl	8001f98 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001c46:	f040 0001 	orr.w	r0, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001c4a:	b2c2      	uxtb	r2, r0
 8001c4c:	2109      	movs	r1, #9
 8001c4e:	4620      	mov	r0, r4
}
 8001c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001c54:	f000 b97a 	b.w	8001f4c <IOE_Write>

08001c58 <stmpe811_Init>:
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8001c58:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <stmpe811_Init+0x44>)
 8001c5a:	7813      	ldrb	r3, [r2, #0]
 8001c5c:	4298      	cmp	r0, r3
 8001c5e:	d004      	beq.n	8001c6a <stmpe811_Init+0x12>
 8001c60:	7851      	ldrb	r1, [r2, #1]
 8001c62:	4288      	cmp	r0, r1
 8001c64:	d001      	beq.n	8001c6a <stmpe811_Init+0x12>
 8001c66:	b113      	cbz	r3, 8001c6e <stmpe811_Init+0x16>
 8001c68:	b101      	cbz	r1, 8001c6c <stmpe811_Init+0x14>
 8001c6a:	4770      	bx	lr
 8001c6c:	2301      	movs	r3, #1
{
 8001c6e:	b510      	push	{r4, lr}
      stmpe811[empty] = DeviceAddr;
 8001c70:	b2c4      	uxtb	r4, r0
 8001c72:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 8001c74:	f000 f922 	bl	8001ebc <IOE_Init>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001c78:	2202      	movs	r2, #2
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f000 f965 	bl	8001f4c <IOE_Write>
  IOE_Delay(10); 
 8001c82:	200a      	movs	r0, #10
 8001c84:	f000 fa02 	bl	800208c <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001c88:	4620      	mov	r0, r4
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	f000 f95d 	bl	8001f4c <IOE_Write>
}
 8001c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8001c96:	2002      	movs	r0, #2
 8001c98:	f000 b9f8 	b.w	800208c <IOE_Delay>
 8001c9c:	20002ed0 	.word	0x20002ed0

08001ca0 <ts3510_Reset>:
  * @retval None
  */
void ts3510_Reset(uint16_t DeviceAddr)
{

}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop

08001ca4 <ts3510_ReadID>:
  * @retval The Device ID (two bytes).
  */
uint16_t ts3510_ReadID(uint16_t DeviceAddr)
{
  return 0;
}
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	4770      	bx	lr

08001ca8 <ts3510_TS_ITStatus>:
  * @retval TS interrupts status
  */
uint8_t ts3510_TS_ITStatus(uint16_t DeviceAddr)
{
  return 0;
}
 8001ca8:	2000      	movs	r0, #0
 8001caa:	4770      	bx	lr

08001cac <ts3510_Init>:
  IOE_Init(); 
 8001cac:	f000 b906 	b.w	8001ebc <IOE_Init>

08001cb0 <ts3510_TS_DetectTouch>:
{
 8001cb0:	b500      	push	{lr}
 8001cb2:	b087      	sub	sp, #28
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001cb4:	f640 0c81 	movw	ip, #2177	; 0x881
  IOE_WriteMultiple(DeviceAddr, TS3510_SEND_CMD_REG, aTmpBuffer, 2);
 8001cb8:	b2c0      	uxtb	r0, r0
 8001cba:	aa02      	add	r2, sp, #8
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	9001      	str	r0, [sp, #4]
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001cc2:	f8ad c008 	strh.w	ip, [sp, #8]
  IOE_WriteMultiple(DeviceAddr, TS3510_SEND_CMD_REG, aTmpBuffer, 2);
 8001cc6:	f000 f9bf 	bl	8002048 <IOE_WriteMultiple>
  IOE_ReadMultiple(DeviceAddr, TS3510_READ_BLOCK_REG, aBufferTS, 11);  
 8001cca:	aa03      	add	r2, sp, #12
 8001ccc:	9801      	ldr	r0, [sp, #4]
 8001cce:	230b      	movs	r3, #11
 8001cd0:	218a      	movs	r1, #138	; 0x8a
 8001cd2:	f000 f989 	bl	8001fe8 <IOE_ReadMultiple>
  if((aBufferTS[1] == 0xFF) && (aBufferTS[2] == 0xFF) && (aBufferTS[3] == 0xFF) && (aBufferTS[4] == 0xFF))
 8001cd6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001cda:	f89d 100e 	ldrb.w	r1, [sp, #14]
 8001cde:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8001ce2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001ce6:	4008      	ands	r0, r1
 8001ce8:	4010      	ands	r0, r2
 8001cea:	4018      	ands	r0, r3
}
 8001cec:	38ff      	subs	r0, #255	; 0xff
 8001cee:	bf18      	it	ne
 8001cf0:	2001      	movne	r0, #1
 8001cf2:	b007      	add	sp, #28
 8001cf4:	f85d fb04 	ldr.w	pc, [sp], #4

08001cf8 <ts3510_TS_GetXY>:
{
 8001cf8:	b530      	push	{r4, r5, lr}
 8001cfa:	b087      	sub	sp, #28
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001cfc:	f640 0581 	movw	r5, #2177	; 0x881
  IOE_WriteMultiple(DeviceAddr, TS3510_SEND_CMD_REG, aTmpBuffer, 2);
 8001d00:	b2c0      	uxtb	r0, r0
{
 8001d02:	4614      	mov	r4, r2
  uint8_t aTmpBuffer[2] = {TS3510_READ_CMD, TS3510_WRITE_CMD};
 8001d04:	f8ad 5008 	strh.w	r5, [sp, #8]
  IOE_WriteMultiple(DeviceAddr, TS3510_SEND_CMD_REG, aTmpBuffer, 2);
 8001d08:	aa02      	add	r2, sp, #8
{
 8001d0a:	460d      	mov	r5, r1
  IOE_WriteMultiple(DeviceAddr, TS3510_SEND_CMD_REG, aTmpBuffer, 2);
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	2100      	movs	r1, #0
 8001d10:	9001      	str	r0, [sp, #4]
 8001d12:	f000 f999 	bl	8002048 <IOE_WriteMultiple>
  IOE_ReadMultiple(DeviceAddr, TS3510_READ_BLOCK_REG, aBufferTS, 11);  
 8001d16:	aa03      	add	r2, sp, #12
 8001d18:	9801      	ldr	r0, [sp, #4]
 8001d1a:	230b      	movs	r3, #11
 8001d1c:	218a      	movs	r1, #138	; 0x8a
 8001d1e:	f000 f963 	bl	8001fe8 <IOE_ReadMultiple>
  *X = (((aBufferTS[1] << 8) | aBufferTS[2]) << 12) / 640;
 8001d22:	f8bd 200d 	ldrh.w	r2, [sp, #13]
  *Y = (((aBufferTS[3] << 8) | aBufferTS[4]) << 12) / 480;
 8001d26:	f8bd 300f 	ldrh.w	r3, [sp, #15]
  *X = (((aBufferTS[1] << 8) | aBufferTS[2]) << 12) / 640;
 8001d2a:	4909      	ldr	r1, [pc, #36]	; (8001d50 <ts3510_TS_GetXY+0x58>)
 8001d2c:	ba52      	rev16	r2, r2
 8001d2e:	b292      	uxth	r2, r2
  *Y = (((aBufferTS[3] << 8) | aBufferTS[4]) << 12) / 480;
 8001d30:	ba5b      	rev16	r3, r3
  *X = (((aBufferTS[1] << 8) | aBufferTS[2]) << 12) / 640;
 8001d32:	0312      	lsls	r2, r2, #12
 8001d34:	fba1 1202 	umull	r1, r2, r1, r2
  *Y = (((aBufferTS[3] << 8) | aBufferTS[4]) << 12) / 480;
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4906      	ldr	r1, [pc, #24]	; (8001d54 <ts3510_TS_GetXY+0x5c>)
 8001d3c:	031b      	lsls	r3, r3, #12
 8001d3e:	fba1 1303 	umull	r1, r3, r1, r3
  *X = (((aBufferTS[1] << 8) | aBufferTS[2]) << 12) / 640;
 8001d42:	0a52      	lsrs	r2, r2, #9
  *Y = (((aBufferTS[3] << 8) | aBufferTS[4]) << 12) / 480;
 8001d44:	0a1b      	lsrs	r3, r3, #8
  *X = (((aBufferTS[1] << 8) | aBufferTS[2]) << 12) / 640;
 8001d46:	802a      	strh	r2, [r5, #0]
  *Y = (((aBufferTS[3] << 8) | aBufferTS[4]) << 12) / 480;
 8001d48:	8023      	strh	r3, [r4, #0]
}
 8001d4a:	b007      	add	sp, #28
 8001d4c:	bd30      	pop	{r4, r5, pc}
 8001d4e:	bf00      	nop
 8001d50:	cccccccd 	.word	0xcccccccd
 8001d54:	88888889 	.word	0x88888889

08001d58 <ts3510_TS_DisableIT>:
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop

08001d5c <ts3510_TS_ClearIT>:
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <ts3510_TS_Start>:
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <ts3510_TS_EnableIT>:
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <I2Cx_Init.part.0>:
}

/**
  * @brief  Initializes I2C HAL.
  */
static void I2Cx_Init(void)
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	b088      	sub	sp, #32
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d6c:	4e2b      	ldr	r6, [pc, #172]	; (8001e1c <I2Cx_Init.part.0+0xb4>)
{
  if(HAL_I2C_GetState(&heval_I2c) == HAL_I2C_STATE_RESET)
  {
    heval_I2c.Instance = I2C1;
 8001d6e:	4c2c      	ldr	r4, [pc, #176]	; (8001e20 <I2Cx_Init.part.0+0xb8>)
 8001d70:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <I2Cx_Init.part.0+0xbc>)
 8001d72:	6023      	str	r3, [r4, #0]
    heval_I2c.Init.ClockSpeed      = BSP_I2C_SPEED;
    heval_I2c.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8001d74:	2500      	movs	r5, #0
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d76:	9500      	str	r5, [sp, #0]
 8001d78:	6b33      	ldr	r3, [r6, #48]	; 0x30
    heval_I2c.Init.ClockSpeed      = BSP_I2C_SPEED;
 8001d7a:	4a2b      	ldr	r2, [pc, #172]	; (8001e28 <I2Cx_Init.part.0+0xc0>)
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6333      	str	r3, [r6, #48]	; 0x30
 8001d82:	6b33      	ldr	r3, [r6, #48]	; 0x30
    heval_I2c.Init.ClockSpeed      = BSP_I2C_SPEED;
 8001d84:	6062      	str	r2, [r4, #4]
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	9300      	str	r3, [sp, #0]
    heval_I2c.Init.OwnAddress1     = 0;
    heval_I2c.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8001d8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    heval_I2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001d90:	e9c4 3504 	strd	r3, r5, [r4, #16]
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001d94:	9a00      	ldr	r2, [sp, #0]
    heval_I2c.Init.OwnAddress2     = 0;
    heval_I2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
    heval_I2c.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLED;  
 8001d96:	6225      	str	r5, [r4, #32]
  GPIO_InitStruct.Pin = EVAL_I2Cx_SCL_PIN;
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2040      	movs	r0, #64	; 0x40
 8001d9c:	2112      	movs	r1, #18
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
  GPIO_InitStruct.Alternate = EVAL_I2Cx_SCL_SDA_AF;
 8001da8:	2304      	movs	r3, #4
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001daa:	a902      	add	r1, sp, #8
 8001dac:	481f      	ldr	r0, [pc, #124]	; (8001e2c <I2Cx_Init.part.0+0xc4>)
  GPIO_InitStruct.Alternate = EVAL_I2Cx_SCL_SDA_AF;
 8001dae:	9306      	str	r3, [sp, #24]
    heval_I2c.Init.OwnAddress1     = 0;
 8001db0:	e9c4 5502 	strd	r5, r5, [r4, #8]
    heval_I2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001db4:	e9c4 5506 	strd	r5, r5, [r4, #24]
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001db8:	f001 fe22 	bl	8003a00 <HAL_GPIO_Init>
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001dbc:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = EVAL_I2Cx_SDA_PIN;
 8001dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001dc2:	481a      	ldr	r0, [pc, #104]	; (8001e2c <I2Cx_Init.part.0+0xc4>)
  GPIO_InitStruct.Pin = EVAL_I2Cx_SDA_PIN;
 8001dc4:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001dc6:	f001 fe1b 	bl	8003a00 <HAL_GPIO_Init>
  EVAL_I2Cx_CLK_ENABLE();
 8001dca:	9501      	str	r5, [sp, #4]
 8001dcc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd2:	6433      	str	r3, [r6, #64]	; 0x40
 8001dd4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	9b01      	ldr	r3, [sp, #4]
  EVAL_I2Cx_FORCE_RESET(); 
 8001dde:	6a33      	ldr	r3, [r6, #32]
 8001de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de4:	6233      	str	r3, [r6, #32]
  EVAL_I2Cx_RELEASE_RESET(); 
 8001de6:	6a33      	ldr	r3, [r6, #32]
 8001de8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dec:	6233      	str	r3, [r6, #32]
  HAL_NVIC_SetPriority(EVAL_I2Cx_EV_IRQn, 0x0F, 0);
 8001dee:	462a      	mov	r2, r5
 8001df0:	210f      	movs	r1, #15
 8001df2:	201f      	movs	r0, #31
 8001df4:	f001 f9cc 	bl	8003190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EVAL_I2Cx_EV_IRQn);
 8001df8:	201f      	movs	r0, #31
 8001dfa:	f001 fa07 	bl	800320c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EVAL_I2Cx_ER_IRQn, 0x0F, 0);
 8001dfe:	462a      	mov	r2, r5
 8001e00:	210f      	movs	r1, #15
 8001e02:	2020      	movs	r0, #32
 8001e04:	f001 f9c4 	bl	8003190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EVAL_I2Cx_ER_IRQn);
 8001e08:	2020      	movs	r0, #32
 8001e0a:	f001 f9ff 	bl	800320c <HAL_NVIC_EnableIRQ>
    
    /* Init the I2C */
    I2Cx_MspInit();
    HAL_I2C_Init(&heval_I2c);    
 8001e0e:	4620      	mov	r0, r4
  }
}
 8001e10:	b008      	add	sp, #32
 8001e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(&heval_I2c);    
 8001e16:	f002 ba3d 	b.w	8004294 <HAL_I2C_Init>
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	20002ed4 	.word	0x20002ed4
 8001e24:	40005400 	.word	0x40005400
 8001e28:	000186a0 	.word	0x000186a0
 8001e2c:	40020400 	.word	0x40020400

08001e30 <BSP_TS3510_IsDetected>:
{
 8001e30:	b510      	push	{r4, lr}
 8001e32:	b086      	sub	sp, #24
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&heval_I2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e38:	2202      	movs	r2, #2
 8001e3a:	ab05      	add	r3, sp, #20
 8001e3c:	e9cd 3200 	strd	r3, r2, [sp]
  uint8_t tmp_buffer[2] = {0x81, 0x08};
 8001e40:	f640 0481 	movw	r4, #2177	; 0x881
  status = HAL_I2C_Mem_Write(&heval_I2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e44:	9102      	str	r1, [sp, #8]
 8001e46:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <BSP_TS3510_IsDetected+0x88>)
  uint8_t tmp_buffer[2] = {0x81, 0x08};
 8001e48:	f8ad 4014 	strh.w	r4, [sp, #20]
  status = HAL_I2C_Mem_Write(&heval_I2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	228a      	movs	r2, #138	; 0x8a
 8001e50:	2180      	movs	r1, #128	; 0x80
 8001e52:	f002 fd71 	bl	8004938 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001e56:	b978      	cbnz	r0, 8001e78 <BSP_TS3510_IsDetected+0x48>
  status = HAL_I2C_Mem_Read(&heval_I2c, TS3510_I2C_ADDRESS, 0x8A, I2C_MEMADD_SIZE_8BIT, &a_buffer, 1, 1000);
 8001e58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e5c:	f10d 0213 	add.w	r2, sp, #19
 8001e60:	2301      	movs	r3, #1
 8001e62:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001e66:	9200      	str	r2, [sp, #0]
 8001e68:	4813      	ldr	r0, [pc, #76]	; (8001eb8 <BSP_TS3510_IsDetected+0x88>)
 8001e6a:	228a      	movs	r2, #138	; 0x8a
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	f002 fe57 	bl	8004b20 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001e72:	b960      	cbnz	r0, 8001e8e <BSP_TS3510_IsDetected+0x5e>
}
 8001e74:	b006      	add	sp, #24
 8001e76:	bd10      	pop	{r4, pc}
  * @param  Addr: I2C Address
  */
static void I2Cx_Error(uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&heval_I2c);
 8001e78:	480f      	ldr	r0, [pc, #60]	; (8001eb8 <BSP_TS3510_IsDetected+0x88>)
 8001e7a:	f002 fad3 	bl	8004424 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&heval_I2c) == HAL_I2C_STATE_RESET)
 8001e7e:	480e      	ldr	r0, [pc, #56]	; (8001eb8 <BSP_TS3510_IsDetected+0x88>)
 8001e80:	f002 fffc 	bl	8004e7c <HAL_I2C_GetState>
 8001e84:	2800      	cmp	r0, #0
 8001e86:	d1e7      	bne.n	8001e58 <BSP_TS3510_IsDetected+0x28>
 8001e88:	f7ff ff6e 	bl	8001d68 <I2Cx_Init.part.0>
 8001e8c:	e7e4      	b.n	8001e58 <BSP_TS3510_IsDetected+0x28>
    error = (uint32_t)HAL_I2C_GetError(&heval_I2c);
 8001e8e:	480a      	ldr	r0, [pc, #40]	; (8001eb8 <BSP_TS3510_IsDetected+0x88>)
 8001e90:	f002 fff8 	bl	8004e84 <HAL_I2C_GetError>
 8001e94:	4604      	mov	r4, r0
  HAL_I2C_DeInit(&heval_I2c);
 8001e96:	4808      	ldr	r0, [pc, #32]	; (8001eb8 <BSP_TS3510_IsDetected+0x88>)
 8001e98:	f002 fac4 	bl	8004424 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&heval_I2c) == HAL_I2C_STATE_RESET)
 8001e9c:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <BSP_TS3510_IsDetected+0x88>)
 8001e9e:	f002 ffed 	bl	8004e7c <HAL_I2C_GetState>
 8001ea2:	b130      	cbz	r0, 8001eb2 <BSP_TS3510_IsDetected+0x82>
      return 1;
 8001ea4:	f1a4 0004 	sub.w	r0, r4, #4
 8001ea8:	fab0 f080 	clz	r0, r0
 8001eac:	0940      	lsrs	r0, r0, #5
}
 8001eae:	b006      	add	sp, #24
 8001eb0:	bd10      	pop	{r4, pc}
 8001eb2:	f7ff ff59 	bl	8001d68 <I2Cx_Init.part.0>
 8001eb6:	e7f5      	b.n	8001ea4 <BSP_TS3510_IsDetected+0x74>
 8001eb8:	20002ed4 	.word	0x20002ed4

08001ebc <IOE_Init>:

/**
  * @brief  Initializes IOE low level.
  */
void IOE_Init(void) 
{
 8001ebc:	b508      	push	{r3, lr}
  if(HAL_I2C_GetState(&heval_I2c) == HAL_I2C_STATE_RESET)
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <IOE_Init+0x14>)
 8001ec0:	f002 ffdc 	bl	8004e7c <HAL_I2C_GetState>
 8001ec4:	b100      	cbz	r0, 8001ec8 <IOE_Init+0xc>
  I2Cx_Init();
}
 8001ec6:	bd08      	pop	{r3, pc}
 8001ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001ecc:	f7ff bf4c 	b.w	8001d68 <I2Cx_Init.part.0>
 8001ed0:	20002ed4 	.word	0x20002ed4

08001ed4 <IOE_ITConfig>:
  if(I2C_IT_Enabled == 0)
 8001ed4:	4a1a      	ldr	r2, [pc, #104]	; (8001f40 <IOE_ITConfig+0x6c>)
 8001ed6:	7813      	ldrb	r3, [r2, #0]
 8001ed8:	b103      	cbz	r3, 8001edc <IOE_ITConfig+0x8>
 8001eda:	4770      	bx	lr

/**
  * @brief  Configures IOE low level interrupt.
  */
void IOE_ITConfig(void)
{
 8001edc:	b510      	push	{r4, lr}
 8001ede:	b088      	sub	sp, #32
    __GPIOI_CLK_ENABLE();
 8001ee0:	4c18      	ldr	r4, [pc, #96]	; (8001f44 <IOE_ITConfig+0x70>)
 8001ee2:	9300      	str	r3, [sp, #0]
    I2C_IT_Enabled = 1;
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	7011      	strb	r1, [r2, #0]
    __GPIOI_CLK_ENABLE();
 8001ee8:	6b22      	ldr	r2, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001eea:	4817      	ldr	r0, [pc, #92]	; (8001f48 <IOE_ITConfig+0x74>)
    __GPIOI_CLK_ENABLE();
 8001eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ef0:	6322      	str	r2, [r4, #48]	; 0x30
 8001ef2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ef4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001ef8:	9200      	str	r2, [sp, #0]
 8001efa:	9a00      	ldr	r2, [sp, #0]
    __SYSCFG_CLK_ENABLE();
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f04:	6463      	str	r3, [r4, #68]	; 0x44
 8001f06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f0c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin   = GPIO_PIN_8;
 8001f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f1a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin   = GPIO_PIN_8;
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __SYSCFG_CLK_ENABLE();
 8001f24:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f26:	f001 fd6b 	bl	8003a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(EXTI9_5_IRQn), 0x0F, 0x0F);
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	2017      	movs	r0, #23
 8001f30:	f001 f92e 	bl	8003190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI9_5_IRQn));
 8001f34:	2017      	movs	r0, #23
 8001f36:	f001 f969 	bl	800320c <HAL_NVIC_EnableIRQ>
  I2Cx_ITConfig();
}
 8001f3a:	b008      	add	sp, #32
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	bf00      	nop
 8001f40:	20002ed2 	.word	0x20002ed2
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40022000 	.word	0x40022000

08001f4c <IOE_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001f4c:	b500      	push	{lr}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	4686      	mov	lr, r0
 8001f52:	4694      	mov	ip, r2
  status = HAL_I2C_Mem_Write(&heval_I2c, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 100); 
 8001f54:	2064      	movs	r0, #100	; 0x64
 8001f56:	f10d 0217 	add.w	r2, sp, #23
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e9cd 2300 	strd	r2, r3, [sp]
 8001f60:	9002      	str	r0, [sp, #8]
 8001f62:	460a      	mov	r2, r1
 8001f64:	480b      	ldr	r0, [pc, #44]	; (8001f94 <IOE_Write+0x48>)
 8001f66:	f88d c017 	strb.w	ip, [sp, #23]
 8001f6a:	4671      	mov	r1, lr
 8001f6c:	f002 fce4 	bl	8004938 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001f70:	b910      	cbnz	r0, 8001f78 <IOE_Write+0x2c>
  I2Cx_Write(Addr, Reg, Value);
}
 8001f72:	b007      	add	sp, #28
 8001f74:	f85d fb04 	ldr.w	pc, [sp], #4
  HAL_I2C_DeInit(&heval_I2c);
 8001f78:	4806      	ldr	r0, [pc, #24]	; (8001f94 <IOE_Write+0x48>)
 8001f7a:	f002 fa53 	bl	8004424 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&heval_I2c) == HAL_I2C_STATE_RESET)
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <IOE_Write+0x48>)
 8001f80:	f002 ff7c 	bl	8004e7c <HAL_I2C_GetState>
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d1f4      	bne.n	8001f72 <IOE_Write+0x26>
 8001f88:	f7ff feee 	bl	8001d68 <I2Cx_Init.part.0>
}
 8001f8c:	b007      	add	sp, #28
 8001f8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f92:	bf00      	nop
 8001f94:	20002ed4 	.word	0x20002ed4

08001f98 <IOE_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address 
  * @retval Read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001f98:	b510      	push	{r4, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	4684      	mov	ip, r0
 8001f9e:	460a      	mov	r2, r1
  uint8_t Value = 0;
 8001fa0:	2000      	movs	r0, #0
  status = HAL_I2C_Mem_Read(&heval_I2c, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 8001fa2:	f10d 0117 	add.w	r1, sp, #23
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001fac:	e9cd 1300 	strd	r1, r3, [sp]
  uint8_t Value = 0;
 8001fb0:	f88d 0017 	strb.w	r0, [sp, #23]
  status = HAL_I2C_Mem_Read(&heval_I2c, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 1000);
 8001fb4:	9402      	str	r4, [sp, #8]
 8001fb6:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <IOE_Read+0x4c>)
 8001fb8:	4661      	mov	r1, ip
 8001fba:	f002 fdb1 	bl	8004b20 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001fbe:	b918      	cbnz	r0, 8001fc8 <IOE_Read+0x30>
  return I2Cx_Read(Addr, Reg);
}
 8001fc0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001fc4:	b006      	add	sp, #24
 8001fc6:	bd10      	pop	{r4, pc}
  HAL_I2C_DeInit(&heval_I2c);
 8001fc8:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <IOE_Read+0x4c>)
 8001fca:	f002 fa2b 	bl	8004424 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&heval_I2c) == HAL_I2C_STATE_RESET)
 8001fce:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <IOE_Read+0x4c>)
 8001fd0:	f002 ff54 	bl	8004e7c <HAL_I2C_GetState>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d1f3      	bne.n	8001fc0 <IOE_Read+0x28>
 8001fd8:	f7ff fec6 	bl	8001d68 <I2Cx_Init.part.0>
}
 8001fdc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001fe0:	b006      	add	sp, #24
 8001fe2:	bd10      	pop	{r4, pc}
 8001fe4:	20002ed4 	.word	0x20002ed4

08001fe8 <IOE_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001fe8:	b570      	push	{r4, r5, r6, lr}
  if(Addr == EXC7200_I2C_ADDRESS)
 8001fea:	2808      	cmp	r0, #8
{
 8001fec:	b084      	sub	sp, #16
 8001fee:	4604      	mov	r4, r0
  if(Addr == EXC7200_I2C_ADDRESS)
 8001ff0:	d010      	beq.n	8002014 <IOE_ReadMultiple+0x2c>
    status = HAL_I2C_Mem_Read(&heval_I2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ff2:	461e      	mov	r6, r3
 8001ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff8:	e9cd 2600 	strd	r2, r6, [sp]
 8001ffc:	9302      	str	r3, [sp, #8]
 8001ffe:	460a      	mov	r2, r1
 8002000:	4810      	ldr	r0, [pc, #64]	; (8002044 <IOE_ReadMultiple+0x5c>)
 8002002:	4621      	mov	r1, r4
 8002004:	2301      	movs	r3, #1
 8002006:	f002 fd8b 	bl	8004b20 <HAL_I2C_Mem_Read>
 800200a:	4604      	mov	r4, r0
  if(status != HAL_OK)
 800200c:	b964      	cbnz	r4, 8002028 <IOE_ReadMultiple+0x40>
 return I2Cx_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 800200e:	b2a0      	uxth	r0, r4
 8002010:	b004      	add	sp, #16
 8002012:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_I2C_Master_Receive(&heval_I2c, Addr, Buffer, Length, 1000);  
 8002014:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002018:	9100      	str	r1, [sp, #0]
 800201a:	480a      	ldr	r0, [pc, #40]	; (8002044 <IOE_ReadMultiple+0x5c>)
 800201c:	4621      	mov	r1, r4
 800201e:	f002 fa1b 	bl	8004458 <HAL_I2C_Master_Receive>
 8002022:	4604      	mov	r4, r0
  if(status != HAL_OK)
 8002024:	2c00      	cmp	r4, #0
 8002026:	d0f2      	beq.n	800200e <IOE_ReadMultiple+0x26>
  HAL_I2C_DeInit(&heval_I2c);
 8002028:	4806      	ldr	r0, [pc, #24]	; (8002044 <IOE_ReadMultiple+0x5c>)
 800202a:	f002 f9fb 	bl	8004424 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&heval_I2c) == HAL_I2C_STATE_RESET)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <IOE_ReadMultiple+0x5c>)
 8002030:	f002 ff24 	bl	8004e7c <HAL_I2C_GetState>
 8002034:	2800      	cmp	r0, #0
 8002036:	d1ea      	bne.n	800200e <IOE_ReadMultiple+0x26>
 8002038:	f7ff fe96 	bl	8001d68 <I2Cx_Init.part.0>
}
 800203c:	b2a0      	uxth	r0, r4
 800203e:	b004      	add	sp, #16
 8002040:	bd70      	pop	{r4, r5, r6, pc}
 8002042:	bf00      	nop
 8002044:	20002ed4 	.word	0x20002ed4

08002048 <IOE_WriteMultiple>:
  * @param  Reg: Register address 
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  */
void IOE_WriteMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002048:	b500      	push	{lr}
 800204a:	b085      	sub	sp, #20
 800204c:	4684      	mov	ip, r0
  status = HAL_I2C_Mem_Write(&heval_I2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800204e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002052:	e9cd 2300 	strd	r2, r3, [sp]
 8002056:	9002      	str	r0, [sp, #8]
 8002058:	460a      	mov	r2, r1
 800205a:	480b      	ldr	r0, [pc, #44]	; (8002088 <IOE_WriteMultiple+0x40>)
 800205c:	2301      	movs	r3, #1
 800205e:	4661      	mov	r1, ip
 8002060:	f002 fc6a 	bl	8004938 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8002064:	b910      	cbnz	r0, 800206c <IOE_WriteMultiple+0x24>
  I2Cx_WriteMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8002066:	b005      	add	sp, #20
 8002068:	f85d fb04 	ldr.w	pc, [sp], #4
  HAL_I2C_DeInit(&heval_I2c);
 800206c:	4806      	ldr	r0, [pc, #24]	; (8002088 <IOE_WriteMultiple+0x40>)
 800206e:	f002 f9d9 	bl	8004424 <HAL_I2C_DeInit>
  if(HAL_I2C_GetState(&heval_I2c) == HAL_I2C_STATE_RESET)
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <IOE_WriteMultiple+0x40>)
 8002074:	f002 ff02 	bl	8004e7c <HAL_I2C_GetState>
 8002078:	2800      	cmp	r0, #0
 800207a:	d1f4      	bne.n	8002066 <IOE_WriteMultiple+0x1e>
}
 800207c:	b005      	add	sp, #20
 800207e:	f85d eb04 	ldr.w	lr, [sp], #4
 8002082:	f7ff be71 	b.w	8001d68 <I2Cx_Init.part.0>
 8002086:	bf00      	nop
 8002088:	20002ed4 	.word	0x20002ed4

0800208c <IOE_Delay>:
  * @brief  IOE delay 
  * @param  Delay: Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800208c:	f000 bdb8 	b.w	8002c00 <HAL_Delay>

08002090 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002090:	b530      	push	{r4, r5, lr}
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <BSP_LCD_LayerDefaultInit+0x6c>)
 8002094:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <BSP_LCD_LayerDefaultInit+0x70>)
 8002096:	681b      	ldr	r3, [r3, #0]
{     
 8002098:	b08f      	sub	sp, #60	; 0x3c
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 800209a:	f04f 0c34 	mov.w	ip, #52	; 0x34
 800209e:	fb0c 2c03 	mla	ip, ip, r3, r2
  Layercfg.WindowX0 = 0;
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
  Layercfg.WindowY0 = 0;
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  Layercfg.FBStartAdress = FB_Address;
 80020a2:	910a      	str	r1, [sp, #40]	; 0x28
  Layercfg.WindowX0 = 0;
 80020a4:	2300      	movs	r3, #0
  Layercfg.Alpha = 255;
 80020a6:	21ff      	movs	r1, #255	; 0xff
 80020a8:	e9cd 3105 	strd	r3, r1, [sp, #20]
  Layercfg.WindowX0 = 0;
 80020ac:	9301      	str	r3, [sp, #4]
  Layercfg.WindowY0 = 0;
 80020ae:	9303      	str	r3, [sp, #12]
  Layercfg.Alpha0 = 0;
 80020b0:	9307      	str	r3, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 80020b2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
  Layercfg.Backcolor.Red = 0;
 80020b6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80020ba:	2307      	movs	r3, #7
 80020bc:	9309      	str	r3, [sp, #36]	; 0x24
  return hltdc_eval.LayerCfg[ActiveLayer].ImageHeight;
 80020be:	e9dc 1318 	ldrd	r1, r3, [ip, #96]	; 0x60
{     
 80020c2:	4604      	mov	r4, r0
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80020c4:	4610      	mov	r0, r2
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80020c6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80020ca:	9208      	str	r2, [sp, #32]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80020cc:	9102      	str	r1, [sp, #8]
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80020ce:	4622      	mov	r2, r4
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80020d0:	910b      	str	r1, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80020d2:	a901      	add	r1, sp, #4
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80020d4:	9304      	str	r3, [sp, #16]
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80020d6:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 80020d8:	f002 ff8a 	bl	8004ff0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80020dc:	4a09      	ldr	r2, [pc, #36]	; (8002104 <BSP_LCD_LayerDefaultInit+0x74>)
  DrawProp[LayerIndex].pFont     = &Font24;
 80020de:	490a      	ldr	r1, [pc, #40]	; (8002108 <BSP_LCD_LayerDefaultInit+0x78>)
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80020e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80020e4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80020e8:	f04f 457f 	mov.w	r5, #4278190080	; 0xff000000
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
  DrawProp[LayerIndex].pFont     = &Font24;
 80020f0:	e9c3 0101 	strd	r0, r1, [r3, #4]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80020f4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
}
 80020f8:	b00f      	add	sp, #60	; 0x3c
 80020fa:	bd30      	pop	{r4, r5, pc}
 80020fc:	20002f28 	.word	0x20002f28
 8002100:	20002f88 	.word	0x20002f88
 8002104:	20002f2c 	.word	0x20002f2c
 8002108:	20000090 	.word	0x20000090

0800210c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <BSP_LCD_SetTextColor+0x10>)
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <BSP_LCD_SetTextColor+0x14>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002116:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 800211a:	4770      	bx	lr
 800211c:	20002f28 	.word	0x20002f28
 8002120:	20002f2c 	.word	0x20002f2c

08002124 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[ActiveLayer].BackColor = Color;
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <BSP_LCD_SetBackColor+0x14>)
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <BSP_LCD_SetBackColor+0x18>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800212e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002132:	6058      	str	r0, [r3, #4]
}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20002f28 	.word	0x20002f28
 800213c:	20002f2c 	.word	0x20002f2c

08002140 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <BSP_LCD_SetFont+0x14>)
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <BSP_LCD_SetFont+0x18>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800214a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800214e:	6098      	str	r0, [r3, #8]
}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20002f28 	.word	0x20002f28
 8002158:	20002f2c 	.word	0x20002f2c

0800215c <BSP_LCD_Clear>:
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <BSP_LCD_Clear+0x6c>)
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <BSP_LCD_Clear+0x70>)
{ 
 8002160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002164:	6816      	ldr	r6, [r2, #0]
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8002166:	4c1a      	ldr	r4, [pc, #104]	; (80021d0 <BSP_LCD_Clear+0x74>)
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002168:	2234      	movs	r2, #52	; 0x34
 800216a:	fb02 3306 	mla	r3, r2, r6, r3
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 800216e:	e9d3 7817 	ldrd	r7, r8, [r3, #92]	; 0x5c
  return hltdc_eval.LayerCfg[ActiveLayer].ImageHeight;
 8002172:	f8d3 9064 	ldr.w	r9, [r3, #100]	; 0x64
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8002176:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <BSP_LCD_Clear+0x78>)
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8002178:	2300      	movs	r3, #0
  hdma2d_eval.Init.OutputOffset = OffLine;      
 800217a:	e9c4 3302 	strd	r3, r3, [r4, #8]
{ 
 800217e:	b083      	sub	sp, #12
 8002180:	4605      	mov	r5, r0
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8002182:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  
  hdma2d_eval.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK) 
 8002186:	4620      	mov	r0, r4
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8002188:	e9c4 2300 	strd	r2, r3, [r4]
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK) 
 800218c:	f001 faca 	bl	8003724 <HAL_DMA2D_Init>
 8002190:	b110      	cbz	r0, 8002198 <BSP_LCD_Clear+0x3c>
}
 8002192:	b003      	add	sp, #12
 8002194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK) 
 8002198:	4631      	mov	r1, r6
 800219a:	4620      	mov	r0, r4
 800219c:	f001 fbda 	bl	8003954 <HAL_DMA2D_ConfigLayer>
 80021a0:	2800      	cmp	r0, #0
 80021a2:	d1f6      	bne.n	8002192 <BSP_LCD_Clear+0x36>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80021a4:	f8cd 9000 	str.w	r9, [sp]
 80021a8:	4643      	mov	r3, r8
 80021aa:	463a      	mov	r2, r7
 80021ac:	4629      	mov	r1, r5
 80021ae:	4620      	mov	r0, r4
 80021b0:	f001 fae6 	bl	8003780 <HAL_DMA2D_Start>
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d1ec      	bne.n	8002192 <BSP_LCD_Clear+0x36>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 80021b8:	210a      	movs	r1, #10
 80021ba:	4620      	mov	r0, r4
}
 80021bc:	b003      	add	sp, #12
 80021be:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 80021c2:	f001 bb33 	b.w	800382c <HAL_DMA2D_PollForTransfer>
 80021c6:	bf00      	nop
 80021c8:	20002f28 	.word	0x20002f28
 80021cc:	20002f88 	.word	0x20002f88
 80021d0:	20002f48 	.word	0x20002f48
 80021d4:	4002b000 	.word	0x4002b000

080021d8 <BSP_LCD_DisplayChar>:
{
 80021d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80021dc:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <BSP_LCD_DisplayChar+0xec>)
 80021de:	4e3a      	ldr	r6, [pc, #232]	; (80022c8 <BSP_LCD_DisplayChar+0xf0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
{
 80021e2:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80021e4:	3a20      	subs	r2, #32
{
 80021e6:	9103      	str	r1, [sp, #12]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80021e8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80021ec:	eb06 0681 	add.w	r6, r6, r1, lsl #2
{
 80021f0:	9005      	str	r0, [sp, #20]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80021f2:	68b1      	ldr	r1, [r6, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80021f4:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 80021f8:	f8b1 b006 	ldrh.w	fp, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80021fc:	6808      	ldr	r0, [r1, #0]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80021fe:	f10a 0907 	add.w	r9, sl, #7
 8002202:	ea4f 09e9 	mov.w	r9, r9, asr #3
  offset =  8 *((width + 7)/8) -  width ;
 8002206:	ebca 01c9 	rsb	r1, sl, r9, lsl #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800220a:	fb0b f202 	mul.w	r2, fp, r2
  offset =  8 *((width + 7)/8) -  width ;
 800220e:	b2c9      	uxtb	r1, r1
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002210:	fb09 f202 	mul.w	r2, r9, r2
  offset =  8 *((width + 7)/8) -  width ;
 8002214:	9104      	str	r1, [sp, #16]
  for(i = 0; i < height; i++)
 8002216:	f1bb 0f00 	cmp.w	fp, #0
 800221a:	d048      	beq.n	80022ae <BSP_LCD_DisplayChar+0xd6>
 800221c:	492b      	ldr	r1, [pc, #172]	; (80022cc <BSP_LCD_DisplayChar+0xf4>)
 800221e:	eb00 0802 	add.w	r8, r0, r2
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 8002222:	2234      	movs	r2, #52	; 0x34
 8002224:	fb02 1103 	mla	r1, r2, r3, r1
  for(i = 0; i < height; i++)
 8002228:	2700      	movs	r7, #0
 800222a:	9b03      	ldr	r3, [sp, #12]
    switch(((width + 7)/8))
 800222c:	f1b9 0f01 	cmp.w	r9, #1
 8002230:	eb03 0507 	add.w	r5, r3, r7
 8002234:	b2ad      	uxth	r5, r5
 8002236:	d03d      	beq.n	80022b4 <BSP_LCD_DisplayChar+0xdc>
 8002238:	f1b9 0f02 	cmp.w	r9, #2
 800223c:	d03d      	beq.n	80022ba <BSP_LCD_DisplayChar+0xe2>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800223e:	f898 4001 	ldrb.w	r4, [r8, #1]
 8002242:	f898 3000 	ldrb.w	r3, [r8]
 8002246:	0224      	lsls	r4, r4, #8
 8002248:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800224c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8002250:	431c      	orrs	r4, r3
    for (j = 0; j < width; j++)
 8002252:	f1ba 0f00 	cmp.w	sl, #0
 8002256:	d026      	beq.n	80022a6 <BSP_LCD_DisplayChar+0xce>
 8002258:	9b04      	ldr	r3, [sp, #16]
 800225a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800225e:	441a      	add	r2, r3
      if(line & (1 << (width- j + offset- 1))) 
 8002260:	e9cd 4701 	strd	r4, r7, [sp, #4]
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002264:	9b05      	ldr	r3, [sp, #20]
 8002266:	eba2 0e0a 	sub.w	lr, r2, sl
      if(line & (1 << (width- j + offset- 1))) 
 800226a:	f04f 0c01 	mov.w	ip, #1
 800226e:	e008      	b.n	8002282 <BSP_LCD_DisplayChar+0xaa>
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002270:	6dcf      	ldr	r7, [r1, #92]	; 0x5c
 8002272:	6834      	ldr	r4, [r6, #0]
 8002274:	f847 4020 	str.w	r4, [r7, r0, lsl #2]
    for (j = 0; j < width; j++)
 8002278:	3a01      	subs	r2, #1
 800227a:	3301      	adds	r3, #1
 800227c:	4572      	cmp	r2, lr
 800227e:	b29b      	uxth	r3, r3
 8002280:	d010      	beq.n	80022a4 <BSP_LCD_DisplayChar+0xcc>
      if(line & (1 << (width- j + offset- 1))) 
 8002282:	9c01      	ldr	r4, [sp, #4]
 8002284:	fa0c f002 	lsl.w	r0, ip, r2
 8002288:	4220      	tst	r0, r4
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800228a:	6e08      	ldr	r0, [r1, #96]	; 0x60
 800228c:	fb00 3005 	mla	r0, r0, r5, r3
      if(line & (1 << (width- j + offset- 1))) 
 8002290:	d1ee      	bne.n	8002270 <BSP_LCD_DisplayChar+0x98>
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002292:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8002294:	6877      	ldr	r7, [r6, #4]
 8002296:	f844 7020 	str.w	r7, [r4, r0, lsl #2]
    for (j = 0; j < width; j++)
 800229a:	3a01      	subs	r2, #1
 800229c:	3301      	adds	r3, #1
 800229e:	4572      	cmp	r2, lr
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	d1ee      	bne.n	8002282 <BSP_LCD_DisplayChar+0xaa>
 80022a4:	9f02      	ldr	r7, [sp, #8]
  for(i = 0; i < height; i++)
 80022a6:	3701      	adds	r7, #1
 80022a8:	45bb      	cmp	fp, r7
 80022aa:	44c8      	add	r8, r9
 80022ac:	d1bd      	bne.n	800222a <BSP_LCD_DisplayChar+0x52>
}
 80022ae:	b007      	add	sp, #28
 80022b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      line =  pchar[0];      
 80022b4:	f898 4000 	ldrb.w	r4, [r8]
      break;
 80022b8:	e7cb      	b.n	8002252 <BSP_LCD_DisplayChar+0x7a>
      line =  (pchar[0]<< 8) | pchar[1];      
 80022ba:	f8b8 4000 	ldrh.w	r4, [r8]
 80022be:	ba64      	rev16	r4, r4
 80022c0:	b2a4      	uxth	r4, r4
      break;
 80022c2:	e7c6      	b.n	8002252 <BSP_LCD_DisplayChar+0x7a>
 80022c4:	20002f28 	.word	0x20002f28
 80022c8:	20002f2c 	.word	0x20002f2c
 80022cc:	20002f88 	.word	0x20002f88

080022d0 <BSP_LCD_DisplayStringAt>:
{
 80022d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  while (*ptr++) size ++ ;
 80022d4:	4616      	mov	r6, r2
{
 80022d6:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 80022d8:	f816 2b01 	ldrb.w	r2, [r6], #1
{
 80022dc:	4604      	mov	r4, r0
 80022de:	4689      	mov	r9, r1
  while (*ptr++) size ++ ;
 80022e0:	2a00      	cmp	r2, #0
 80022e2:	d048      	beq.n	8002376 <BSP_LCD_DisplayStringAt+0xa6>
  uint32_t size = 0, xsize = 0; 
 80022e4:	2100      	movs	r1, #0
  while (*ptr++) size ++ ;
 80022e6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80022ea:	3101      	adds	r1, #1
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d1fa      	bne.n	80022e6 <BSP_LCD_DisplayStringAt+0x16>
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 80022f0:	4822      	ldr	r0, [pc, #136]	; (800237c <BSP_LCD_DisplayStringAt+0xac>)
 80022f2:	f8df e090 	ldr.w	lr, [pc, #144]	; 8002384 <BSP_LCD_DisplayStringAt+0xb4>
 80022f6:	f8d0 c000 	ldr.w	ip, [r0]
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80022fa:	4821      	ldr	r0, [pc, #132]	; (8002380 <BSP_LCD_DisplayStringAt+0xb0>)
 80022fc:	eb0c 064c 	add.w	r6, ip, ip, lsl #1
 8002300:	eb00 0086 	add.w	r0, r0, r6, lsl #2
  switch (Mode)
 8002304:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002306:	6887      	ldr	r7, [r0, #8]
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 8002308:	f04f 0034 	mov.w	r0, #52	; 0x34
 800230c:	fb00 e00c 	mla	r0, r0, ip, lr
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002310:	f8b7 8004 	ldrh.w	r8, [r7, #4]
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 8002314:	6e06      	ldr	r6, [r0, #96]	; 0x60
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002316:	fbb6 f0f8 	udiv	r0, r6, r8
  switch (Mode)
 800231a:	d025      	beq.n	8002368 <BSP_LCD_DisplayStringAt+0x98>
 800231c:	2b02      	cmp	r3, #2
 800231e:	d104      	bne.n	800232a <BSP_LCD_DisplayStringAt+0x5a>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002320:	1a41      	subs	r1, r0, r1
 8002322:	fb11 f108 	smulbb	r1, r1, r8
 8002326:	1b0c      	subs	r4, r1, r4
 8002328:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800232a:	b2b6      	uxth	r6, r6
 800232c:	45b0      	cmp	r8, r6
 800232e:	d819      	bhi.n	8002364 <BSP_LCD_DisplayStringAt+0x94>
 8002330:	b1c2      	cbz	r2, 8002364 <BSP_LCD_DisplayStringAt+0x94>
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 8002332:	2634      	movs	r6, #52	; 0x34
 8002334:	fb06 e60c 	mla	r6, r6, ip, lr
 8002338:	f1c5 0801 	rsb	r8, r5, #1
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800233c:	4620      	mov	r0, r4
 800233e:	4649      	mov	r1, r9
 8002340:	f7ff ff4a 	bl	80021d8 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002344:	88b9      	ldrh	r1, [r7, #4]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002346:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8002348:	eb08 0205 	add.w	r2, r8, r5
 800234c:	b292      	uxth	r2, r2
 800234e:	fb01 3312 	mls	r3, r1, r2, r3
 8002352:	b29b      	uxth	r3, r3
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002354:	440c      	add	r4, r1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002356:	428b      	cmp	r3, r1
 8002358:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800235c:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800235e:	d301      	bcc.n	8002364 <BSP_LCD_DisplayStringAt+0x94>
 8002360:	2a00      	cmp	r2, #0
 8002362:	d1eb      	bne.n	800233c <BSP_LCD_DisplayStringAt+0x6c>
}
 8002364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002368:	1a41      	subs	r1, r0, r1
 800236a:	fb08 f101 	mul.w	r1, r8, r1
 800236e:	eb04 0451 	add.w	r4, r4, r1, lsr #1
 8002372:	b2a4      	uxth	r4, r4
      break;
 8002374:	e7d9      	b.n	800232a <BSP_LCD_DisplayStringAt+0x5a>
  uint32_t size = 0, xsize = 0; 
 8002376:	4611      	mov	r1, r2
 8002378:	e7ba      	b.n	80022f0 <BSP_LCD_DisplayStringAt+0x20>
 800237a:	bf00      	nop
 800237c:	20002f28 	.word	0x20002f28
 8002380:	20002f2c 	.word	0x20002f2c
 8002384:	20002f88 	.word	0x20002f88

08002388 <BSP_LCD_DisplayVertStringAt>:
{
 8002388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  while (*ptr++) size ++ ;
 800238c:	4616      	mov	r6, r2
{
 800238e:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 8002390:	f816 2b01 	ldrb.w	r2, [r6], #1
{
 8002394:	4604      	mov	r4, r0
 8002396:	4689      	mov	r9, r1
  while (*ptr++) size ++ ;
 8002398:	2a00      	cmp	r2, #0
 800239a:	d057      	beq.n	800244c <BSP_LCD_DisplayVertStringAt+0xc4>
  uint32_t size = 0, xsize = 0;
 800239c:	2100      	movs	r1, #0
  while (*ptr++) size ++ ;
 800239e:	f816 0b01 	ldrb.w	r0, [r6], #1
 80023a2:	3101      	adds	r1, #1
 80023a4:	2800      	cmp	r0, #0
 80023a6:	d1fa      	bne.n	800239e <BSP_LCD_DisplayVertStringAt+0x16>
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 80023a8:	4829      	ldr	r0, [pc, #164]	; (8002450 <BSP_LCD_DisplayVertStringAt+0xc8>)
 80023aa:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002458 <BSP_LCD_DisplayVertStringAt+0xd0>
 80023ae:	6807      	ldr	r7, [r0, #0]
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80023b0:	4828      	ldr	r0, [pc, #160]	; (8002454 <BSP_LCD_DisplayVertStringAt+0xcc>)
 80023b2:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80023b6:	eb00 0086 	add.w	r0, r0, r6, lsl #2
  switch (Mode)
 80023ba:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80023bc:	6886      	ldr	r6, [r0, #8]
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 80023be:	f04f 0034 	mov.w	r0, #52	; 0x34
 80023c2:	fb00 8007 	mla	r0, r0, r7, r8
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80023c6:	f8b6 e004 	ldrh.w	lr, [r6, #4]
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 80023ca:	f8d0 c060 	ldr.w	ip, [r0, #96]	; 0x60
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80023ce:	fbbc f0fe 	udiv	r0, ip, lr
  switch (Mode)
 80023d2:	d034      	beq.n	800243e <BSP_LCD_DisplayVertStringAt+0xb6>
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d104      	bne.n	80023e2 <BSP_LCD_DisplayVertStringAt+0x5a>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80023d8:	1a41      	subs	r1, r0, r1
 80023da:	fb11 f10e 	smulbb	r1, r1, lr
 80023de:	1b0c      	subs	r4, r1, r4
 80023e0:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Height))
 80023e2:	88f3      	ldrh	r3, [r6, #6]
 80023e4:	fa1f fc8c 	uxth.w	ip, ip
 80023e8:	459c      	cmp	ip, r3
 80023ea:	d326      	bcc.n	800243a <BSP_LCD_DisplayVertStringAt+0xb2>
 80023ec:	b32a      	cbz	r2, 800243a <BSP_LCD_DisplayVertStringAt+0xb2>
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 80023ee:	2334      	movs	r3, #52	; 0x34
 80023f0:	fb03 8807 	mla	r8, r3, r7, r8
 80023f4:	f1c5 0701 	rsb	r7, r5, #1
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80023f8:	4649      	mov	r1, r9
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7ff feec 	bl	80021d8 <BSP_LCD_DisplayChar>
    if(*Text == 32) {Ypos += DrawProp[ActiveLayer].pFont->Height; refcolumn-=14;}
 8002400:	782b      	ldrb	r3, [r5, #0]
    refcolumn += (DrawProp[ActiveLayer].pFont->Width );
 8002402:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    if(*Text == 32) {Ypos += DrawProp[ActiveLayer].pFont->Height; refcolumn-=14;}
 8002406:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 800240a:	2b20      	cmp	r3, #32
 800240c:	eb07 0205 	add.w	r2, r7, r5
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Height))
 8002410:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
 8002414:	b292      	uxth	r2, r2
    refcolumn += (DrawProp[ActiveLayer].pFont->Width );
 8002416:	4464      	add	r4, ip
 8002418:	b2a4      	uxth	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Height))
 800241a:	fb0c 3312 	mls	r3, ip, r2, r3
    if(*Text == 32) {Ypos += DrawProp[ActiveLayer].pFont->Height; refcolumn-=14;}
 800241e:	bf04      	itt	eq
 8002420:	3c0e      	subeq	r4, #14
 8002422:	44f1      	addeq	r9, lr
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Height))
 8002424:	b29b      	uxth	r3, r3
    if(*Text == 32) {Ypos += DrawProp[ActiveLayer].pFont->Height; refcolumn-=14;}
 8002426:	bf04      	itt	eq
 8002428:	fa1f f989 	uxtheq.w	r9, r9
 800242c:	b2a4      	uxtheq	r4, r4
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Height))
 800242e:	4573      	cmp	r3, lr
 8002430:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002434:	d301      	bcc.n	800243a <BSP_LCD_DisplayVertStringAt+0xb2>
 8002436:	2a00      	cmp	r2, #0
 8002438:	d1de      	bne.n	80023f8 <BSP_LCD_DisplayVertStringAt+0x70>
}
 800243a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800243e:	1a41      	subs	r1, r0, r1
 8002440:	fb0e f101 	mul.w	r1, lr, r1
 8002444:	eb04 0451 	add.w	r4, r4, r1, lsr #1
 8002448:	b2a4      	uxth	r4, r4
      break;
 800244a:	e7ca      	b.n	80023e2 <BSP_LCD_DisplayVertStringAt+0x5a>
  uint32_t size = 0, xsize = 0;
 800244c:	4611      	mov	r1, r2
 800244e:	e7ab      	b.n	80023a8 <BSP_LCD_DisplayVertStringAt+0x20>
 8002450:	20002f28 	.word	0x20002f28
 8002454:	20002f2c 	.word	0x20002f2c
 8002458:	20002f88 	.word	0x20002f88

0800245c <BSP_LCD_DrawVLine>:
{
 800245c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002460:	4c1d      	ldr	r4, [pc, #116]	; (80024d8 <BSP_LCD_DrawVLine+0x7c>)
 8002462:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <BSP_LCD_DrawVLine+0x80>)
 8002464:	6825      	ldr	r5, [r4, #0]
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8002466:	4c1e      	ldr	r4, [pc, #120]	; (80024e0 <BSP_LCD_DrawVLine+0x84>)
{
 8002468:	4617      	mov	r7, r2
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800246a:	2234      	movs	r2, #52	; 0x34
 800246c:	fb02 3305 	mla	r3, r2, r5, r3
 8002470:	e9d3 b917 	ldrd	fp, r9, [r3, #92]	; 0x5c
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002474:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <BSP_LCD_DrawVLine+0x88>)
 800247a:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 800247e:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <BSP_LCD_DrawVLine+0x8c>)
 8002480:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002484:	e9c4 2300 	strd	r2, r3, [r4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 8002488:	2300      	movs	r3, #0
{
 800248a:	b083      	sub	sp, #12
 800248c:	4606      	mov	r6, r0
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 800248e:	60a3      	str	r3, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK) 
 8002490:	4620      	mov	r0, r4
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002492:	f109 33ff 	add.w	r3, r9, #4294967295
{
 8002496:	4688      	mov	r8, r1
  hdma2d_eval.Init.OutputOffset = OffLine;      
 8002498:	60e3      	str	r3, [r4, #12]
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK) 
 800249a:	f001 f943 	bl	8003724 <HAL_DMA2D_Init>
 800249e:	b110      	cbz	r0, 80024a6 <BSP_LCD_DrawVLine+0x4a>
}
 80024a0:	b003      	add	sp, #12
 80024a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK) 
 80024a6:	4629      	mov	r1, r5
 80024a8:	4620      	mov	r0, r4
 80024aa:	f001 fa53 	bl	8003954 <HAL_DMA2D_ConfigLayer>
 80024ae:	2800      	cmp	r0, #0
 80024b0:	d1f6      	bne.n	80024a0 <BSP_LCD_DrawVLine+0x44>
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80024b2:	fb09 6208 	mla	r2, r9, r8, r6
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80024b6:	9700      	str	r7, [sp, #0]
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80024b8:	2301      	movs	r3, #1
 80024ba:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 80024be:	4651      	mov	r1, sl
 80024c0:	4620      	mov	r0, r4
 80024c2:	f001 f95d 	bl	8003780 <HAL_DMA2D_Start>
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d1ea      	bne.n	80024a0 <BSP_LCD_DrawVLine+0x44>
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 80024ca:	210a      	movs	r1, #10
 80024cc:	4620      	mov	r0, r4
}
 80024ce:	b003      	add	sp, #12
 80024d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 80024d4:	f001 b9aa 	b.w	800382c <HAL_DMA2D_PollForTransfer>
 80024d8:	20002f28 	.word	0x20002f28
 80024dc:	20002f88 	.word	0x20002f88
 80024e0:	20002f48 	.word	0x20002f48
 80024e4:	20002f2c 	.word	0x20002f2c
 80024e8:	4002b000 	.word	0x4002b000

080024ec <BSP_LCD_DrawLine>:
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80024ec:	eba2 0c00 	sub.w	ip, r2, r0
{
 80024f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80024f4:	f1bc 0f00 	cmp.w	ip, #0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80024f8:	eba3 0b01 	sub.w	fp, r3, r1
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80024fc:	bfb8      	it	lt
 80024fe:	f1cc 0c00 	rsblt	ip, ip, #0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002502:	f1bb 0f00 	cmp.w	fp, #0
 8002506:	bfb8      	it	lt
 8002508:	f1cb 0b00 	rsblt	fp, fp, #0
  if (x2 >= x1)                 /* The x-values are increasing */
 800250c:	f64f 79ff 	movw	r9, #65535	; 0xffff
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002510:	fa0f fc8c 	sxth.w	ip, ip
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002514:	fa0f fb8b 	sxth.w	fp, fp
  if (x2 >= x1)                 /* The x-values are increasing */
 8002518:	4282      	cmp	r2, r0
 800251a:	bf34      	ite	cc
 800251c:	46ca      	movcc	sl, r9
 800251e:	f04f 0a01 	movcs.w	sl, #1
  if (y2 >= y1)                 /* The y-values are increasing */
 8002522:	428b      	cmp	r3, r1
 8002524:	bf28      	it	cs
 8002526:	f04f 0901 	movcs.w	r9, #1
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800252a:	45dc      	cmp	ip, fp
{
 800252c:	b085      	sub	sp, #20
  x = x1;                       /* Start x off at the first pixel */
 800252e:	fa0f fe80 	sxth.w	lr, r0
  y = y1;                       /* Start y off at the first pixel */
 8002532:	b20a      	sxth	r2, r1
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002534:	db4d      	blt.n	80025d2 <BSP_LCD_DrawLine+0xe6>
    num = deltax / 2;
 8002536:	4656      	mov	r6, sl
 8002538:	eb0c 78dc 	add.w	r8, ip, ip, lsr #31
 800253c:	f04f 0a00 	mov.w	sl, #0
 8002540:	ea4f 0868 	mov.w	r8, r8, asr #1
    numpixels = deltax;         /* There are more x-values than y-values */
 8002544:	4657      	mov	r7, sl
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002546:	f1bc 0f00 	cmp.w	ip, #0
 800254a:	db35      	blt.n	80025b8 <BSP_LCD_DrawLine+0xcc>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <BSP_LCD_DrawLine+0x100>)
 800254e:	4928      	ldr	r1, [pc, #160]	; (80025f0 <BSP_LCD_DrawLine+0x104>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4d28      	ldr	r5, [pc, #160]	; (80025f4 <BSP_LCD_DrawLine+0x108>)
 8002554:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002558:	fa1f fb8b 	uxth.w	fp, fp
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800255c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002560:	9103      	str	r1, [sp, #12]
  return hltdc_eval.LayerCfg[ActiveLayer].ImageWidth;
 8002562:	2134      	movs	r1, #52	; 0x34
 8002564:	fb01 5503 	mla	r5, r1, r3, r5
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002568:	2400      	movs	r4, #0
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800256a:	6e28      	ldr	r0, [r5, #96]	; 0x60
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800256c:	fa1f f38e 	uxth.w	r3, lr
 8002570:	b292      	uxth	r2, r2
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002572:	eb0b 0108 	add.w	r1, fp, r8
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002576:	fb00 3802 	mla	r8, r0, r2, r3
      y += yinc1;                             /* Change the y as appropriate */
 800257a:	eb02 0009 	add.w	r0, r2, r9
    y += yinc2;                               /* Change the y as appropriate */
 800257e:	443a      	add	r2, r7
      x += xinc1;                             /* Change the x as appropriate */
 8002580:	eb03 0e0a 	add.w	lr, r3, sl
    y += yinc2;                               /* Change the y as appropriate */
 8002584:	9202      	str	r2, [sp, #8]
    x += xinc2;                               /* Change the x as appropriate */
 8002586:	4433      	add	r3, r6
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002588:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    x += xinc2;                               /* Change the x as appropriate */
 800258a:	9301      	str	r3, [sp, #4]
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800258c:	9b03      	ldr	r3, [sp, #12]
 800258e:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002592:	fa0f f881 	sxth.w	r8, r1
    x += xinc2;                               /* Change the x as appropriate */
 8002596:	44b6      	add	lr, r6
    y += yinc2;                               /* Change the y as appropriate */
 8002598:	4438      	add	r0, r7
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800259a:	b289      	uxth	r1, r1
    if (num >= den)                           /* Check if numerator >= denominator */
 800259c:	45c4      	cmp	ip, r8
    x += xinc2;                               /* Change the x as appropriate */
 800259e:	fa0f fe8e 	sxth.w	lr, lr
    y += yinc2;                               /* Change the y as appropriate */
 80025a2:	b202      	sxth	r2, r0
      num -= den;                             /* Calculate the new numerator value */
 80025a4:	eba1 010c 	sub.w	r1, r1, ip
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80025a8:	f104 0401 	add.w	r4, r4, #1
    if (num >= den)                           /* Check if numerator >= denominator */
 80025ac:	dc07      	bgt.n	80025be <BSP_LCD_DrawLine+0xd2>
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80025ae:	b223      	sxth	r3, r4
 80025b0:	4563      	cmp	r3, ip
      num -= den;                             /* Calculate the new numerator value */
 80025b2:	fa0f f881 	sxth.w	r8, r1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80025b6:	ddd8      	ble.n	800256a <BSP_LCD_DrawLine+0x7e>
}
 80025b8:	b005      	add	sp, #20
 80025ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80025be:	b223      	sxth	r3, r4
 80025c0:	459c      	cmp	ip, r3
    x += xinc2;                               /* Change the x as appropriate */
 80025c2:	f9bd e004 	ldrsh.w	lr, [sp, #4]
    y += yinc2;                               /* Change the y as appropriate */
 80025c6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80025ca:	dace      	bge.n	800256a <BSP_LCD_DrawLine+0x7e>
}
 80025cc:	b005      	add	sp, #20
 80025ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 80025d2:	4663      	mov	r3, ip
 80025d4:	eb0b 78db 	add.w	r8, fp, fp, lsr #31
 80025d8:	464f      	mov	r7, r9
 80025da:	f04f 0900 	mov.w	r9, #0
 80025de:	46dc      	mov	ip, fp
 80025e0:	f348 084f 	sbfx	r8, r8, #1, #16
 80025e4:	469b      	mov	fp, r3
 80025e6:	464e      	mov	r6, r9
 80025e8:	e7ad      	b.n	8002546 <BSP_LCD_DrawLine+0x5a>
 80025ea:	bf00      	nop
 80025ec:	20002f28 	.word	0x20002f28
 80025f0:	20002f2c 	.word	0x20002f2c
 80025f4:	20002f88 	.word	0x20002f88

080025f8 <BSP_LCD_DisplayOn>:
  __HAL_LTDC_ENABLE(&hltdc_eval);
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <BSP_LCD_DisplayOn+0x10>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	6993      	ldr	r3, [r2, #24]
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6193      	str	r3, [r2, #24]
}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20002f88 	.word	0x20002f88

0800260c <BSP_LCD_ClockConfig>:
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <BSP_LCD_ClockConfig+0x54>)
{
 800260e:	b510      	push	{r4, lr}
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2082      	movs	r0, #130	; 0x82
{
 8002614:	460c      	mov	r4, r1
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002616:	4798      	blx	r3
 8002618:	f640 0311 	movw	r3, #2065	; 0x811
 800261c:	4298      	cmp	r0, r3
 800261e:	d010      	beq.n	8002642 <BSP_LCD_ClockConfig+0x36>
    if(*(uint32_t *)Params == LCD_MAX_PCLK)
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	4810      	ldr	r0, [pc, #64]	; (8002664 <BSP_LCD_ClockConfig+0x58>)
      periph_clk_init_struct.PLLSAI.PLLSAIN = 108;
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2497      	moveq	r4, #151	; 0x97
 800262a:	246c      	movne	r4, #108	; 0x6c
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;    
 800262c:	2108      	movs	r1, #8
    periph_clk_init_struct.PLLSAI.PLLSAIR = 3;    
 800262e:	2203      	movs	r2, #3
    periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002630:	2300      	movs	r3, #0
 8002632:	6104      	str	r4, [r0, #16]
}
 8002634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;    
 8002638:	6001      	str	r1, [r0, #0]
    periph_clk_init_struct.PLLSAI.PLLSAIR = 3;    
 800263a:	6182      	str	r2, [r0, #24]
    periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800263c:	6243      	str	r3, [r0, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800263e:	f003 b8af 	b.w	80057a0 <HAL_RCCEx_PeriphCLKConfig>
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002642:	4808      	ldr	r0, [pc, #32]	; (8002664 <BSP_LCD_ClockConfig+0x58>)
 8002644:	2408      	movs	r4, #8
    periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002646:	21c0      	movs	r1, #192	; 0xc0
    periph_clk_init_struct.PLLSAI.PLLSAIR = AMPIRE480272_FREQUENCY_DIVIDER;
 8002648:	2205      	movs	r2, #5
    periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800264a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800264e:	6004      	str	r4, [r0, #0]
}
 8002650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002654:	6101      	str	r1, [r0, #16]
    periph_clk_init_struct.PLLSAI.PLLSAIR = AMPIRE480272_FREQUENCY_DIVIDER;
 8002656:	6182      	str	r2, [r0, #24]
    periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002658:	6243      	str	r3, [r0, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800265a:	f003 b8a1 	b.w	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 800265e:	bf00      	nop
 8002660:	20000030 	.word	0x20000030
 8002664:	20003030 	.word	0x20003030

08002668 <BSP_LCD_InitEx>:
{    
 8002668:	b5f0      	push	{r4, r5, r6, r7, lr}
  PCLK_profile = PclkConfig;
 800266a:	4a5d      	ldr	r2, [pc, #372]	; (80027e0 <BSP_LCD_InitEx+0x178>)
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800266c:	4b5d      	ldr	r3, [pc, #372]	; (80027e4 <BSP_LCD_InitEx+0x17c>)
  PCLK_profile = PclkConfig;
 800266e:	6010      	str	r0, [r2, #0]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002670:	685b      	ldr	r3, [r3, #4]
{    
 8002672:	b08d      	sub	sp, #52	; 0x34
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002674:	2082      	movs	r0, #130	; 0x82
 8002676:	4798      	blx	r3
 8002678:	f640 0311 	movw	r3, #2065	; 0x811
 800267c:	4298      	cmp	r0, r3
    hltdc_eval.Init.HorizontalSync = (AMPIRE480272_HSYNC - 1);
 800267e:	4b5a      	ldr	r3, [pc, #360]	; (80027e8 <BSP_LCD_InitEx+0x180>)
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002680:	f000 8092 	beq.w	80027a8 <BSP_LCD_InitEx+0x140>
    hltdc_eval.Init.HorizontalSync = (AMPIRE640480_HSYNC - 1);
 8002684:	211d      	movs	r1, #29
    hltdc_eval.Init.VerticalSync = (AMPIRE640480_VSYNC - 1);
 8002686:	2202      	movs	r2, #2
 8002688:	e9c3 1205 	strd	r1, r2, [r3, #20]
    hltdc_eval.Init.AccumulatedHBP = (AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 800268c:	248f      	movs	r4, #143	; 0x8f
    hltdc_eval.Init.AccumulatedVBP = (AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);  
 800268e:	2022      	movs	r0, #34	; 0x22
    hltdc_eval.Init.AccumulatedActiveH = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);
 8002690:	f240 2102 	movw	r1, #514	; 0x202
    hltdc_eval.Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 8002694:	f240 320f 	movw	r2, #783	; 0x30f
    hltdc_eval.Init.AccumulatedVBP = (AMPIRE640480_VSYNC + AMPIRE640480_VBP - 1);  
 8002698:	e9c3 4007 	strd	r4, r0, [r3, #28]
    hltdc_eval.Init.AccumulatedActiveW = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP - 1);
 800269c:	e9c3 2109 	strd	r2, r1, [r3, #36]	; 0x24
    hltdc_eval.Init.TotalHeigh = (AMPIRE640480_HEIGHT + AMPIRE640480_VSYNC + AMPIRE640480_VBP + AMPIRE640480_VFP - 1);
 80026a0:	f44f 7403 	mov.w	r4, #524	; 0x20c
    hltdc_eval.Init.TotalWidth = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1);
 80026a4:	f240 301f 	movw	r0, #799	; 0x31f
    hltdc_eval.LayerCfg->ImageWidth  = AMPIRE640480_WIDTH;
 80026a8:	f44f 7120 	mov.w	r1, #640	; 0x280
    hltdc_eval.LayerCfg->ImageHeight = AMPIRE640480_HEIGHT;
 80026ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    hltdc_eval.Init.TotalWidth = (AMPIRE640480_WIDTH + AMPIRE640480_HSYNC + AMPIRE640480_HBP + AMPIRE640480_HFP - 1);
 80026b0:	e9c3 040b 	strd	r0, r4, [r3, #44]	; 0x2c
    hltdc_eval.LayerCfg->ImageHeight = AMPIRE640480_HEIGHT;
 80026b4:	e9c3 1218 	strd	r1, r2, [r3, #96]	; 0x60
  hltdc_eval.Init.Backcolor.Blue = 0;
 80026b8:	2400      	movs	r4, #0
  hltdc_eval.Instance = LTDC;
 80026ba:	4a4c      	ldr	r2, [pc, #304]	; (80027ec <BSP_LCD_InitEx+0x184>)
  hltdc_eval.Init.Backcolor.Blue = 0;
 80026bc:	869c      	strh	r4, [r3, #52]	; 0x34
  BSP_LCD_ClockConfig(&hltdc_eval, &PCLK_profile);  
 80026be:	4948      	ldr	r1, [pc, #288]	; (80027e0 <BSP_LCD_InitEx+0x178>)
 80026c0:	4849      	ldr	r0, [pc, #292]	; (80027e8 <BSP_LCD_InitEx+0x180>)
  hltdc_eval.Init.Backcolor.Red = 0;
 80026c2:	f883 4036 	strb.w	r4, [r3, #54]	; 0x36
  hltdc_eval.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80026c6:	e9c3 4401 	strd	r4, r4, [r3, #4]
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026ca:	e9c3 4403 	strd	r4, r4, [r3, #12]
  hltdc_eval.Instance = LTDC;
 80026ce:	601a      	str	r2, [r3, #0]
  BSP_LCD_ClockConfig(&hltdc_eval, &PCLK_profile);  
 80026d0:	f7ff ff9c 	bl	800260c <BSP_LCD_ClockConfig>
  __HAL_RCC_LTDC_CLK_ENABLE();
 80026d4:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <BSP_LCD_InitEx+0x188>)
 80026d6:	9401      	str	r4, [sp, #4]
 80026d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 80026da:	4846      	ldr	r0, [pc, #280]	; (80027f4 <BSP_LCD_InitEx+0x18c>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80026dc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
 80026e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026e4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80026e8:	9201      	str	r2, [sp, #4]
 80026ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80026ec:	9402      	str	r4, [sp, #8]
 80026ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
 80026f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f8:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80026fc:	9202      	str	r2, [sp, #8]
 80026fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE(); 
 8002700:	9403      	str	r4, [sp, #12]
 8002702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
 800270a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800270c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002710:	9203      	str	r2, [sp, #12]
 8002712:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002714:	9404      	str	r4, [sp, #16]
 8002716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
 800271e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002720:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002724:	9204      	str	r2, [sp, #16]
 8002726:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();  
 8002728:	9405      	str	r4, [sp, #20]
 800272a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800272c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;  
 8002738:	250e      	movs	r5, #14
  __HAL_RCC_GPIOK_CLK_ENABLE();  
 800273a:	9305      	str	r3, [sp, #20]
  GPIO_Init_Structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
 800273c:	2600      	movs	r6, #0
 800273e:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8002740:	a906      	add	r1, sp, #24
  GPIO_Init_Structure.Pin       = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
 8002742:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8002746:	2302      	movs	r3, #2
 8002748:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800274c:	e9cd 6708 	strd	r6, r7, [sp, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();  
 8002750:	9b05      	ldr	r3, [sp, #20]
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;  
 8002752:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8002754:	f001 f954 	bl	8003a00 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);  
 8002758:	a906      	add	r1, sp, #24
  GPIO_Init_Structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800275a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);  
 8002760:	4825      	ldr	r0, [pc, #148]	; (80027f8 <BSP_LCD_InitEx+0x190>)
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;  
 8002762:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_Init_Structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002764:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002768:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOJ, &GPIO_Init_Structure);  
 800276c:	f001 f948 	bl	8003a00 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8002770:	a906      	add	r1, sp, #24
  GPIO_Init_Structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8002776:	4821      	ldr	r0, [pc, #132]	; (80027fc <BSP_LCD_InitEx+0x194>)
  GPIO_Init_Structure.Alternate = GPIO_AF14_LTDC;  
 8002778:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_Init_Structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800277a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800277e:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOK, &GPIO_Init_Structure);
 8002782:	f001 f93d 	bl	8003a00 <HAL_GPIO_Init>
  HAL_LTDC_Init(&hltdc_eval);
 8002786:	4818      	ldr	r0, [pc, #96]	; (80027e8 <BSP_LCD_InitEx+0x180>)
 8002788:	f002 fbc2 	bl	8004f10 <HAL_LTDC_Init>
  BSP_SDRAM_Init();
 800278c:	f000 f964 	bl	8002a58 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <BSP_LCD_InitEx+0x198>)
 8002792:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <BSP_LCD_InitEx+0x19c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	491c      	ldr	r1, [pc, #112]	; (8002808 <BSP_LCD_InitEx+0x1a0>)
 8002798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800279c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
}
 80027a0:	4620      	mov	r0, r4
  DrawProp[ActiveLayer].pFont = fonts;
 80027a2:	6099      	str	r1, [r3, #8]
}
 80027a4:	b00d      	add	sp, #52	; 0x34
 80027a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hltdc_eval.Init.HorizontalSync = (AMPIRE480272_HSYNC - 1);
 80027a8:	2128      	movs	r1, #40	; 0x28
    hltdc_eval.Init.VerticalSync = (AMPIRE480272_VSYNC - 1);
 80027aa:	2209      	movs	r2, #9
 80027ac:	e9c3 1205 	strd	r1, r2, [r3, #20]
    hltdc_eval.Init.AccumulatedHBP = (AMPIRE480272_HSYNC + AMPIRE480272_HBP - 1);
 80027b0:	242a      	movs	r4, #42	; 0x2a
    hltdc_eval.Init.AccumulatedVBP = (AMPIRE480272_VSYNC + AMPIRE480272_VBP - 1);  
 80027b2:	200b      	movs	r0, #11
    hltdc_eval.Init.AccumulatedActiveH = (AMPIRE480272_HEIGHT + AMPIRE480272_VSYNC + AMPIRE480272_VBP - 1);
 80027b4:	f240 111b 	movw	r1, #283	; 0x11b
    hltdc_eval.Init.AccumulatedActiveW = (AMPIRE480272_WIDTH + AMPIRE480272_HSYNC + AMPIRE480272_HBP - 1);
 80027b8:	f240 220a 	movw	r2, #522	; 0x20a
    hltdc_eval.Init.AccumulatedVBP = (AMPIRE480272_VSYNC + AMPIRE480272_VBP - 1);  
 80027bc:	e9c3 4007 	strd	r4, r0, [r3, #28]
    hltdc_eval.Init.AccumulatedActiveW = (AMPIRE480272_WIDTH + AMPIRE480272_HSYNC + AMPIRE480272_HBP - 1);
 80027c0:	e9c3 2109 	strd	r2, r1, [r3, #36]	; 0x24
    hltdc_eval.Init.TotalHeigh = (AMPIRE480272_HEIGHT + AMPIRE480272_VSYNC + AMPIRE480272_VBP + AMPIRE480272_VFP - 1);
 80027c4:	f240 141d 	movw	r4, #285	; 0x11d
    hltdc_eval.Init.TotalWidth = (AMPIRE480272_WIDTH + AMPIRE480272_HSYNC + AMPIRE480272_HBP + AMPIRE480272_HFP - 1);
 80027c8:	f44f 7003 	mov.w	r0, #524	; 0x20c
    hltdc_eval.LayerCfg->ImageWidth  = AMPIRE480272_WIDTH;
 80027cc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    hltdc_eval.LayerCfg->ImageHeight = AMPIRE480272_HEIGHT;   
 80027d0:	f44f 7288 	mov.w	r2, #272	; 0x110
    hltdc_eval.Init.TotalWidth = (AMPIRE480272_WIDTH + AMPIRE480272_HSYNC + AMPIRE480272_HBP + AMPIRE480272_HFP - 1);
 80027d4:	e9c3 040b 	strd	r0, r4, [r3, #44]	; 0x2c
    hltdc_eval.LayerCfg->ImageHeight = AMPIRE480272_HEIGHT;   
 80027d8:	e9c3 1218 	strd	r1, r2, [r3, #96]	; 0x60
 80027dc:	e76c      	b.n	80026b8 <BSP_LCD_InitEx+0x50>
 80027de:	bf00      	nop
 80027e0:	20002f44 	.word	0x20002f44
 80027e4:	20000030 	.word	0x20000030
 80027e8:	20002f88 	.word	0x20002f88
 80027ec:	40016800 	.word	0x40016800
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40022400 	.word	0x40022400
 80027fc:	40022800 	.word	0x40022800
 8002800:	20002f28 	.word	0x20002f28
 8002804:	20002f2c 	.word	0x20002f2c
 8002808:	20000090 	.word	0x20000090

0800280c <BSP_LCD_Init>:
  return (BSP_LCD_InitEx(LCD_MAX_PCLK));
 800280c:	2000      	movs	r0, #0
 800280e:	f7ff bf2b 	b.w	8002668 <BSP_LCD_InitEx>
 8002812:	bf00      	nop
 8002814:	0000      	movs	r0, r0
	...

08002818 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002818:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800281c:	ed9f 7b26 	vldr	d7, [pc, #152]	; 80028b8 <BSP_SDRAM_Initialization_sequence+0xa0>
 8002820:	4c27      	ldr	r4, [pc, #156]	; (80028c0 <BSP_SDRAM_Initialization_sequence+0xa8>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002822:	4d28      	ldr	r5, [pc, #160]	; (80028c4 <BSP_SDRAM_Initialization_sequence+0xac>)
{
 8002824:	b082      	sub	sp, #8
  __IO uint32_t tmpmrd = 0;
 8002826:	2300      	movs	r3, #0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002828:	4621      	mov	r1, r4
 800282a:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 800282e:	4606      	mov	r6, r0
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002830:	f04f 0801 	mov.w	r8, #1
 8002834:	f04f 0900 	mov.w	r9, #0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002838:	4628      	mov	r0, r5
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800283a:	ed84 7b00 	vstr	d7, [r4]
  __IO uint32_t tmpmrd = 0;
 800283e:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002840:	e9c4 8902 	strd	r8, r9, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002844:	f003 fd08 	bl	8006258 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002848:	2001      	movs	r0, #1
 800284a:	f000 f9d9 	bl	8002c00 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800284e:	e9c4 8902 	strd	r8, r9, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002852:	4621      	mov	r1, r4
 8002854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002858:	4628      	mov	r0, r5
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800285a:	f04f 0802 	mov.w	r8, #2
 800285e:	f04f 0910 	mov.w	r9, #16
 8002862:	e9c4 8900 	strd	r8, r9, [r4]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002866:	f003 fcf7 	bl	8006258 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800286a:	2203      	movs	r2, #3
 800286c:	2310      	movs	r3, #16
 800286e:	e9c4 2300 	strd	r2, r3, [r4]
 8002872:	2300      	movs	r3, #0
 8002874:	2208      	movs	r2, #8
 8002876:	e9c4 2302 	strd	r2, r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800287a:	4621      	mov	r1, r4
 800287c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002880:	4628      	mov	r0, r5
 8002882:	f003 fce9 	bl	8006258 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002886:	f44f 730c 	mov.w	r3, #560	; 0x230
 800288a:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800288c:	2204      	movs	r2, #4
 800288e:	2310      	movs	r3, #16
 8002890:	e9c4 2300 	strd	r2, r3, [r4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 8002894:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 8002896:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber      = 1;
 8002898:	60a2      	str	r2, [r4, #8]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800289a:	4621      	mov	r1, r4
 800289c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028a0:	4628      	mov	r0, r5
  Command.ModeRegisterDefinition = tmpmrd;
 80028a2:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80028a4:	f003 fcd8 	bl	8006258 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80028a8:	4631      	mov	r1, r6
 80028aa:	4628      	mov	r0, r5
}
 80028ac:	b002      	add	sp, #8
 80028ae:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80028b2:	f003 bcef 	b.w	8006294 <HAL_SDRAM_ProgramRefreshRate>
 80028b6:	bf00      	nop
 80028b8:	00000001 	.word	0x00000001
 80028bc:	00000010 	.word	0x00000010
 80028c0:	20003060 	.word	0x20003060
 80028c4:	200030ec 	.word	0x200030ec

080028c8 <BSP_SDRAM_MspInit>:

/**
  * @brief  Initializes SDRAM MSP.
  */
__weak void BSP_SDRAM_MspInit(void)
{  
 80028c8:	b530      	push	{r4, r5, lr}
 80028ca:	b08f      	sub	sp, #60	; 0x3c
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_Init_Structure;
  SDRAM_HandleTypeDef  *hsdram = &sdramHandle; 
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80028cc:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <BSP_SDRAM_MspInit+0x168>)
  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 80028ce:	4859      	ldr	r0, [pc, #356]	; (8002a34 <BSP_SDRAM_MspInit+0x16c>)
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);  
  
  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80028d0:	4c59      	ldr	r4, [pc, #356]	; (8002a38 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80028d2:	2500      	movs	r5, #0
 80028d4:	9500      	str	r5, [sp, #0]
 80028d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
 80028de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e0:	f002 0201 	and.w	r2, r2, #1
 80028e4:	9200      	str	r2, [sp, #0]
 80028e6:	9a00      	ldr	r2, [sp, #0]
  __DMAx_CLK_ENABLE();
 80028e8:	9501      	str	r5, [sp, #4]
 80028ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30
 80028f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80028f8:	9201      	str	r2, [sp, #4]
 80028fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028fc:	9502      	str	r5, [sp, #8]
 80028fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002900:	f042 0208 	orr.w	r2, r2, #8
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
 8002906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002908:	f002 0208 	and.w	r2, r2, #8
 800290c:	9202      	str	r2, [sp, #8]
 800290e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002910:	9503      	str	r5, [sp, #12]
 8002912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002914:	f042 0210 	orr.w	r2, r2, #16
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
 800291a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291c:	f002 0210 	and.w	r2, r2, #16
 8002920:	9203      	str	r2, [sp, #12]
 8002922:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002924:	9504      	str	r5, [sp, #16]
 8002926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002928:	f042 0220 	orr.w	r2, r2, #32
 800292c:	631a      	str	r2, [r3, #48]	; 0x30
 800292e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002930:	f002 0220 	and.w	r2, r2, #32
 8002934:	9204      	str	r2, [sp, #16]
 8002936:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002938:	9505      	str	r5, [sp, #20]
 800293a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800293c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002940:	631a      	str	r2, [r3, #48]	; 0x30
 8002942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002944:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002948:	9205      	str	r2, [sp, #20]
 800294a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800294c:	9506      	str	r5, [sp, #24]
 800294e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002950:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
 8002956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002958:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800295c:	9206      	str	r2, [sp, #24]
 800295e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();  
 8002960:	9507      	str	r5, [sp, #28]
 8002962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	9307      	str	r3, [sp, #28]
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 8002972:	210c      	movs	r1, #12
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002974:	f24c 7203 	movw	r2, #50947	; 0xc703
 8002978:	2302      	movs	r3, #2
 800297a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 800297e:	910c      	str	r1, [sp, #48]	; 0x30
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002980:	2201      	movs	r2, #1
  __HAL_RCC_GPIOI_CLK_ENABLE();  
 8002982:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8002984:	a908      	add	r1, sp, #32
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002986:	2302      	movs	r3, #2
 8002988:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800298c:	f001 f838 	bl	8003a00 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8002990:	a908      	add	r1, sp, #32
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002992:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8002996:	4829      	ldr	r0, [pc, #164]	; (8002a3c <BSP_SDRAM_MspInit+0x174>)
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002998:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800299a:	f001 f831 	bl	8003a00 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);
 800299e:	a908      	add	r1, sp, #32
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80029a0:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);
 80029a4:	4826      	ldr	r0, [pc, #152]	; (8002a40 <BSP_SDRAM_MspInit+0x178>)
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80029a6:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);
 80029a8:	f001 f82a 	bl	8003a00 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 80029ac:	a908      	add	r1, sp, #32
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80029ae:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 80029b2:	4824      	ldr	r0, [pc, #144]	; (8002a44 <BSP_SDRAM_MspInit+0x17c>)
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80029b4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 80029b6:	f001 f823 	bl	8003a00 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_Init_Structure); 
 80029ba:	a908      	add	r1, sp, #32
  GPIO_Init_Structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80029bc:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_Init_Structure); 
 80029c0:	4821      	ldr	r0, [pc, #132]	; (8002a48 <BSP_SDRAM_MspInit+0x180>)
  GPIO_Init_Structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80029c2:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_Init_Structure); 
 80029c4:	f001 f81c 	bl	8003a00 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);  
 80029c8:	a908      	add	r1, sp, #32
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80029ca:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);  
 80029ce:	481f      	ldr	r0, [pc, #124]	; (8002a4c <BSP_SDRAM_MspInit+0x184>)
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80029d0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);  
 80029d2:	f001 f815 	bl	8003a00 <HAL_GPIO_Init>
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80029d6:	2180      	movs	r1, #128	; 0x80
 80029d8:	e9c4 5101 	strd	r5, r1, [r4, #4]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80029dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80029e4:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80029e8:	e9c4 0103 	strd	r0, r1, [r4, #12]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80029ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <BSP_SDRAM_MspInit+0x188>)
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <BSP_SDRAM_MspInit+0x18c>)
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80029f4:	631c      	str	r4, [r3, #48]	; 0x30
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80029f6:	e9c4 c105 	strd	ip, r1, [r4, #20]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80029fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80029fe:	e9c4 5107 	strd	r5, r1, [r4, #28]
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002a02:	4620      	mov	r0, r4
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a04:	2103      	movs	r1, #3
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002a06:	63a3      	str	r3, [r4, #56]	; 0x38
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a08:	e9c4 5109 	strd	r5, r1, [r4, #36]	; 0x24
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002a0c:	6022      	str	r2, [r4, #0]
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002a0e:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  HAL_DMA_DeInit(&dmaHandle);
 8002a12:	f000 fcbb 	bl	800338c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002a16:	4620      	mov	r0, r4
 8002a18:	f000 fc20 	bl	800325c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002a1c:	462a      	mov	r2, r5
 8002a1e:	210f      	movs	r1, #15
 8002a20:	2038      	movs	r0, #56	; 0x38
 8002a22:	f000 fbb5 	bl	8003190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002a26:	2038      	movs	r0, #56	; 0x38
 8002a28:	f000 fbf0 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 8002a2c:	b00f      	add	sp, #60	; 0x3c
 8002a2e:	bd30      	pop	{r4, r5, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	2000308c 	.word	0x2000308c
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40021400 	.word	0x40021400
 8002a44:	40021800 	.word	0x40021800
 8002a48:	40021c00 	.word	0x40021c00
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	200030ec 	.word	0x200030ec
 8002a54:	40026410 	.word	0x40026410

08002a58 <BSP_SDRAM_Init>:
{ 
 8002a58:	b538      	push	{r3, r4, r5, lr}
  Timing.LoadToActiveDelay    = 2;
 8002a5a:	4d1c      	ldr	r5, [pc, #112]	; (8002acc <BSP_SDRAM_Init+0x74>)
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002a5c:	4c1c      	ldr	r4, [pc, #112]	; (8002ad0 <BSP_SDRAM_Init+0x78>)
 8002a5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <BSP_SDRAM_Init+0x7c>)
 8002a60:	6022      	str	r2, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 8002a62:	2002      	movs	r0, #2
 8002a64:	2107      	movs	r1, #7
 8002a66:	e9c5 0100 	strd	r0, r1, [r5]
 8002a6a:	2004      	movs	r0, #4
 8002a6c:	2107      	movs	r1, #7
 8002a6e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002a72:	2002      	movs	r0, #2
 8002a74:	2102      	movs	r1, #2
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002a76:	2300      	movs	r3, #0
  Timing.LoadToActiveDelay    = 2;
 8002a78:	e9c5 0104 	strd	r0, r1, [r5, #16]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002a7c:	2201      	movs	r2, #1
  Timing.RCDDelay             = 2;
 8002a7e:	2102      	movs	r1, #2
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8002a80:	e9c4 3201 	strd	r3, r2, [r4, #4]
  Timing.RCDDelay             = 2;
 8002a84:	61a9      	str	r1, [r5, #24]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002a86:	2220      	movs	r2, #32
 8002a88:	2104      	movs	r1, #4
 8002a8a:	e9c4 1203 	strd	r1, r2, [r4, #12]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002a8e:	2140      	movs	r1, #64	; 0x40
 8002a90:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002a94:	e9c4 1205 	strd	r1, r2, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002a98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002a9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002aa0:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002aa4:	e9c4 3107 	strd	r3, r1, [r4, #28]
  BSP_SDRAM_MspInit();
 8002aa8:	f7ff ff0e 	bl	80028c8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002aac:	4629      	mov	r1, r5
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f003 fbb0 	bl	8006214 <HAL_SDRAM_Init>
 8002ab4:	4c08      	ldr	r4, [pc, #32]	; (8002ad8 <BSP_SDRAM_Init+0x80>)
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	bf18      	it	ne
 8002aba:	2301      	movne	r3, #1
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002abc:	f240 5069 	movw	r0, #1385	; 0x569
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002ac0:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002ac2:	f7ff fea9 	bl	8002818 <BSP_SDRAM_Initialization_sequence>
}
 8002ac6:	7820      	ldrb	r0, [r4, #0]
 8002ac8:	bd38      	pop	{r3, r4, r5, pc}
 8002aca:	bf00      	nop
 8002acc:	20003070 	.word	0x20003070
 8002ad0:	200030ec 	.word	0x200030ec
 8002ad4:	a0000140 	.word	0xa0000140
 8002ad8:	20000098 	.word	0x20000098

08002adc <BSP_TS_Init>:
  * @param  xSize: Maximum X size of the TS area on LCD
  * @param  ySize: Maximum Y size of the TS area on LCD  
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t xSize, uint16_t ySize)
{
 8002adc:	b570      	push	{r4, r5, r6, lr}
  uint8_t status = TS_OK;
  ts_x_boundary = xSize;
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <BSP_TS_Init+0x64>)
  ts_y_boundary = ySize;
  
  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID) 
 8002ae0:	4c18      	ldr	r4, [pc, #96]	; (8002b44 <BSP_TS_Init+0x68>)
  ts_y_boundary = ySize;
 8002ae2:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <BSP_TS_Init+0x6c>)
  ts_x_boundary = xSize;
 8002ae4:	8018      	strh	r0, [r3, #0]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID) 
 8002ae6:	6863      	ldr	r3, [r4, #4]
  ts_y_boundary = ySize;
 8002ae8:	8011      	strh	r1, [r2, #0]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID) 
 8002aea:	2082      	movs	r0, #130	; 0x82
 8002aec:	4798      	blx	r3
 8002aee:	f640 0311 	movw	r3, #2065	; 0x811
 8002af2:	4298      	cmp	r0, r3
 8002af4:	d10f      	bne.n	8002b16 <BSP_TS_Init+0x3a>
  { 
    /* Initialize the TS driver structure */
    ts_driver = &stmpe811_ts_drv;  
 8002af6:	4e15      	ldr	r6, [pc, #84]	; (8002b4c <BSP_TS_Init+0x70>)
    I2C_Address = TS_I2C_ADDRESS;
 8002af8:	4d15      	ldr	r5, [pc, #84]	; (8002b50 <BSP_TS_Init+0x74>)
    ts_orientation = TS_SWAP_Y;
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <BSP_TS_Init+0x78>)
    ts_driver = &stmpe811_ts_drv;  
 8002afc:	6034      	str	r4, [r6, #0]
    I2C_Address = TS_I2C_ADDRESS;
 8002afe:	2082      	movs	r0, #130	; 0x82
    ts_orientation = TS_SWAP_Y;
 8002b00:	2202      	movs	r2, #2
    I2C_Address = TS_I2C_ADDRESS;
 8002b02:	7028      	strb	r0, [r5, #0]
    ts_orientation = TS_SWAP_Y;
 8002b04:	701a      	strb	r2, [r3, #0]
    }
    ts_orientation = TS_SWAP_NONE;
  }
  
  /* Initialize the TS driver */
  ts_driver->Init(I2C_Address);
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	4798      	blx	r3
  ts_driver->Start(I2C_Address);
 8002b0a:	6833      	ldr	r3, [r6, #0]
 8002b0c:	7828      	ldrb	r0, [r5, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4798      	blx	r3
  
  return status;
}
 8002b12:	2000      	movs	r0, #0
 8002b14:	bd70      	pop	{r4, r5, r6, pc}
    IOE_Init();
 8002b16:	f7ff f9d1 	bl	8001ebc <IOE_Init>
    if(BSP_TS3510_IsDetected() == 0)
 8002b1a:	f7ff f989 	bl	8001e30 <BSP_TS3510_IsDetected>
 8002b1e:	b150      	cbz	r0, 8002b36 <BSP_TS_Init+0x5a>
 8002b20:	2008      	movs	r0, #8
      ts_driver = &exc7200_ts_drv; 
 8002b22:	4c0d      	ldr	r4, [pc, #52]	; (8002b58 <BSP_TS_Init+0x7c>)
      I2C_Address = EXC7200_I2C_ADDRESS;
 8002b24:	4603      	mov	r3, r0
 8002b26:	4d0a      	ldr	r5, [pc, #40]	; (8002b50 <BSP_TS_Init+0x74>)
 8002b28:	4e08      	ldr	r6, [pc, #32]	; (8002b4c <BSP_TS_Init+0x70>)
 8002b2a:	702b      	strb	r3, [r5, #0]
    ts_orientation = TS_SWAP_NONE;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <BSP_TS_Init+0x78>)
 8002b2e:	6034      	str	r4, [r6, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e7e7      	b.n	8002b06 <BSP_TS_Init+0x2a>
 8002b36:	2080      	movs	r0, #128	; 0x80
      ts_driver = &ts3510_ts_drv; 
 8002b38:	4c08      	ldr	r4, [pc, #32]	; (8002b5c <BSP_TS_Init+0x80>)
      I2C_Address = TS3510_I2C_ADDRESS;
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	e7f3      	b.n	8002b26 <BSP_TS_Init+0x4a>
 8002b3e:	bf00      	nop
 8002b40:	2000312a 	.word	0x2000312a
 8002b44:	20000030 	.word	0x20000030
 8002b48:	2000312c 	.word	0x2000312c
 8002b4c:	20003124 	.word	0x20003124
 8002b50:	20003120 	.word	0x20003120
 8002b54:	20003128 	.word	0x20003128
 8002b58:	20000008 	.word	0x20000008
 8002b5c:	20000058 	.word	0x20000058

08002b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b62:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <HAL_InitTick+0x3c>)
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <HAL_InitTick+0x40>)
 8002b66:	7812      	ldrb	r2, [r2, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
{
 8002b6a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b70:	fbb0 f0f2 	udiv	r0, r0, r2
 8002b74:	fbb3 f0f0 	udiv	r0, r3, r0
 8002b78:	f000 fb56 	bl	8003228 <HAL_SYSTICK_Config>
 8002b7c:	b908      	cbnz	r0, 8002b82 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b7e:	2d0f      	cmp	r5, #15
 8002b80:	d901      	bls.n	8002b86 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002b82:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002b84:	bd38      	pop	{r3, r4, r5, pc}
 8002b86:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f000 fafe 	bl	8003190 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_InitTick+0x44>)
 8002b96:	4620      	mov	r0, r4
 8002b98:	601d      	str	r5, [r3, #0]
}
 8002b9a:	bd38      	pop	{r3, r4, r5, pc}
 8002b9c:	20000099 	.word	0x20000099
 8002ba0:	20000004 	.word	0x20000004
 8002ba4:	2000009c 	.word	0x2000009c

08002ba8 <HAL_Init>:
{
 8002ba8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_Init+0x30>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f000 fad1 	bl	800316c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7ff ffc8 	bl	8002b60 <HAL_InitTick>
  HAL_MspInit();
 8002bd0:	f7fe fe16 	bl	8001800 <HAL_MspInit>
}
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	bd08      	pop	{r3, pc}
 8002bd8:	40023c00 	.word	0x40023c00

08002bdc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002bdc:	4a03      	ldr	r2, [pc, #12]	; (8002bec <HAL_IncTick+0x10>)
 8002bde:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <HAL_IncTick+0x14>)
 8002be0:	6811      	ldr	r1, [r2, #0]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	440b      	add	r3, r1
 8002be6:	6013      	str	r3, [r2, #0]
}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20003130 	.word	0x20003130
 8002bf0:	20000099 	.word	0x20000099

08002bf4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002bf4:	4b01      	ldr	r3, [pc, #4]	; (8002bfc <HAL_GetTick+0x8>)
 8002bf6:	6818      	ldr	r0, [r3, #0]
}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20003130 	.word	0x20003130

08002c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c00:	b538      	push	{r3, r4, r5, lr}
 8002c02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7ff fff6 	bl	8002bf4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c08:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002c0a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002c0c:	d002      	beq.n	8002c14 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <HAL_Delay+0x20>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c14:	f7ff ffee 	bl	8002bf4 <HAL_GetTick>
 8002c18:	1b43      	subs	r3, r0, r5
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	d3fa      	bcc.n	8002c14 <HAL_Delay+0x14>
  {
  }
}
 8002c1e:	bd38      	pop	{r3, r4, r5, pc}
 8002c20:	20000099 	.word	0x20000099

08002c24 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c24:	2800      	cmp	r0, #0
 8002c26:	f000 809f 	beq.w	8002d68 <HAL_ADC_Init+0x144>
{
 8002c2a:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c2c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002c2e:	4604      	mov	r4, r0
 8002c30:	b13d      	cbz	r5, 8002c42 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c34:	06db      	lsls	r3, r3, #27
 8002c36:	d50c      	bpl.n	8002c52 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8002c3e:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8002c40:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002c42:	f7fd fd93 	bl	800076c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002c46:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8002c4a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c4e:	06db      	lsls	r3, r3, #27
 8002c50:	d4f2      	bmi.n	8002c38 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8002c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c54:	4a48      	ldr	r2, [pc, #288]	; (8002d78 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8002c56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c5a:	f023 0302 	bic.w	r3, r3, #2
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c64:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c66:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c68:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8002c6c:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c6e:	6851      	ldr	r1, [r2, #4]
 8002c70:	6860      	ldr	r0, [r4, #4]
 8002c72:	4301      	orrs	r1, r0
 8002c74:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c76:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c78:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c7a:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8002c88:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8002c90:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4302      	orrs	r2, r0
 8002c96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c98:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c9a:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c9c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002ca0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca2:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ca4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca6:	4302      	orrs	r2, r0
 8002ca8:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002caa:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <HAL_ADC_Init+0x158>)
 8002cac:	4291      	cmp	r1, r2
 8002cae:	d052      	beq.n	8002d56 <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cb0:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cb2:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cb4:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8002cb8:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	4311      	orrs	r1, r2
 8002cbe:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8002cc6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	432a      	orrs	r2, r5
 8002ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	f022 0202 	bic.w	r2, r2, #2
 8002cd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	7e21      	ldrb	r1, [r4, #24]
 8002cda:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002cde:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ce0:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002ce4:	2a00      	cmp	r2, #0
 8002ce6:	d041      	beq.n	8002d6c <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ce8:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cea:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cec:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002cf0:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cf2:	6858      	ldr	r0, [r3, #4]
 8002cf4:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8002cf8:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cfa:	1e51      	subs	r1, r2, #1
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002d02:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d06:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d08:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	3901      	subs	r1, #1
 8002d14:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d1a:	6899      	ldr	r1, [r3, #8]
 8002d1c:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002d20:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d22:	6899      	ldr	r1, [r3, #8]
 8002d24:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8002d28:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8002d2c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d2e:	6899      	ldr	r1, [r3, #8]
 8002d30:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002d34:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d36:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002d38:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d3a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8002d3e:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002d40:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d44:	f023 0303 	bic.w	r3, r3, #3
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002d54:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	e7b2      	b.n	8002cce <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8002d68:	2001      	movs	r0, #1
}
 8002d6a:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	e7c6      	b.n	8002d04 <HAL_ADC_Init+0xe0>
 8002d76:	bf00      	nop
 8002d78:	40012300 	.word	0x40012300
 8002d7c:	0f000001 	.word	0x0f000001

08002d80 <HAL_ADC_Start_IT>:
{
 8002d80:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 8002d82:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002d86:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8002d88:	2100      	movs	r1, #0
  __HAL_LOCK(hadc);
 8002d8a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8002d8c:	9101      	str	r1, [sp, #4]
  __HAL_LOCK(hadc);
 8002d8e:	f000 8081 	beq.w	8002e94 <HAL_ADC_Start_IT+0x114>
 8002d92:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d94:	6801      	ldr	r1, [r0, #0]
  __HAL_LOCK(hadc);
 8002d96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d9a:	688b      	ldr	r3, [r1, #8]
 8002d9c:	07dc      	lsls	r4, r3, #31
 8002d9e:	4602      	mov	r2, r0
 8002da0:	d414      	bmi.n	8002dcc <HAL_ADC_Start_IT+0x4c>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_ADC_Start_IT+0x128>)
 8002da4:	4c41      	ldr	r4, [pc, #260]	; (8002eac <HAL_ADC_Start_IT+0x12c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8002da8:	6888      	ldr	r0, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002daa:	fba4 4303 	umull	r4, r3, r4, r3
 8002dae:	0c9b      	lsrs	r3, r3, #18
 8002db0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8002db4:	f040 0001 	orr.w	r0, r0, #1
 8002db8:	6088      	str	r0, [r1, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dba:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8002dbc:	9b01      	ldr	r3, [sp, #4]
 8002dbe:	b12b      	cbz	r3, 8002dcc <HAL_ADC_Start_IT+0x4c>
      counter--;
 8002dc0:	9b01      	ldr	r3, [sp, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8002dc6:	9b01      	ldr	r3, [sp, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f9      	bne.n	8002dc0 <HAL_ADC_Start_IT+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dcc:	6888      	ldr	r0, [r1, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002dce:	6c13      	ldr	r3, [r2, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dd0:	f010 0001 	ands.w	r0, r0, #1
 8002dd4:	d03a      	beq.n	8002e4c <HAL_ADC_Start_IT+0xcc>
    ADC_STATE_CLR_SET(hadc->State,
 8002dd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002de4:	684b      	ldr	r3, [r1, #4]
 8002de6:	0558      	lsls	r0, r3, #21
 8002de8:	d505      	bpl.n	8002df6 <HAL_ADC_Start_IT+0x76>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002dec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002df6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002df8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dfc:	bf1c      	itt	ne
 8002dfe:	6c53      	ldrne	r3, [r2, #68]	; 0x44
 8002e00:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8002e06:	2000      	movs	r0, #0
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e08:	f06f 0322 	mvn.w	r3, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8002e0c:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e10:	600b      	str	r3, [r1, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002e12:	684b      	ldr	r3, [r1, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e14:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <HAL_ADC_Start_IT+0x130>)
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002e16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e1a:	f043 0320 	orr.w	r3, r3, #32
 8002e1e:	604b      	str	r3, [r1, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e20:	6853      	ldr	r3, [r2, #4]
 8002e22:	f013 031f 	ands.w	r3, r3, #31
 8002e26:	d11c      	bne.n	8002e62 <HAL_ADC_Start_IT+0xe2>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e28:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002e2c:	f500 3090 	add.w	r0, r0, #73728	; 0x12000
 8002e30:	4281      	cmp	r1, r0
 8002e32:	d026      	beq.n	8002e82 <HAL_ADC_Start_IT+0x102>
 8002e34:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002e38:	4281      	cmp	r1, r0
 8002e3a:	d01f      	beq.n	8002e7c <HAL_ADC_Start_IT+0xfc>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e3c:	481d      	ldr	r0, [pc, #116]	; (8002eb4 <HAL_ADC_Start_IT+0x134>)
 8002e3e:	4281      	cmp	r1, r0
 8002e40:	d02d      	beq.n	8002e9e <HAL_ADC_Start_IT+0x11e>
  return HAL_OK;
 8002e42:	2000      	movs	r0, #0
}
 8002e44:	b003      	add	sp, #12
 8002e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e4a:	4770      	bx	lr
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4c:	f043 0310 	orr.w	r3, r3, #16
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e52:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6453      	str	r3, [r2, #68]	; 0x44
}
 8002e5a:	b003      	add	sp, #12
 8002e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e60:	4770      	bx	lr
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_ADC_Start_IT+0x138>)
 8002e64:	4299      	cmp	r1, r3
 8002e66:	d1f8      	bne.n	8002e5a <HAL_ADC_Start_IT+0xda>
 8002e68:	688b      	ldr	r3, [r1, #8]
 8002e6a:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8002e6e:	d1f4      	bne.n	8002e5a <HAL_ADC_Start_IT+0xda>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e70:	688a      	ldr	r2, [r1, #8]
 8002e72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  return HAL_OK;
 8002e76:	4618      	mov	r0, r3
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e78:	608a      	str	r2, [r1, #8]
 8002e7a:	e7ee      	b.n	8002e5a <HAL_ADC_Start_IT+0xda>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e7c:	6852      	ldr	r2, [r2, #4]
 8002e7e:	06d2      	lsls	r2, r2, #27
 8002e80:	d1df      	bne.n	8002e42 <HAL_ADC_Start_IT+0xc2>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e82:	6888      	ldr	r0, [r1, #8]
 8002e84:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002e88:	d1db      	bne.n	8002e42 <HAL_ADC_Start_IT+0xc2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e8a:	688b      	ldr	r3, [r1, #8]
 8002e8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e90:	608b      	str	r3, [r1, #8]
 8002e92:	e7e2      	b.n	8002e5a <HAL_ADC_Start_IT+0xda>
  __HAL_LOCK(hadc);
 8002e94:	2002      	movs	r0, #2
}
 8002e96:	b003      	add	sp, #12
 8002e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e9c:	4770      	bx	lr
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e9e:	6852      	ldr	r2, [r2, #4]
 8002ea0:	06d3      	lsls	r3, r2, #27
 8002ea2:	d4ce      	bmi.n	8002e42 <HAL_ADC_Start_IT+0xc2>
 8002ea4:	e7ed      	b.n	8002e82 <HAL_ADC_Start_IT+0x102>
 8002ea6:	bf00      	nop
 8002ea8:	20000004 	.word	0x20000004
 8002eac:	431bde83 	.word	0x431bde83
 8002eb0:	40012300 	.word	0x40012300
 8002eb4:	40012200 	.word	0x40012200
 8002eb8:	40012000 	.word	0x40012000

08002ebc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002ebc:	6803      	ldr	r3, [r0, #0]
 8002ebe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop

08002ec4 <HAL_ADC_LevelOutOfWindowCallback>:
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop

08002ec8 <HAL_ADC_ErrorCallback>:
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop

08002ecc <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 8002ecc:	6803      	ldr	r3, [r0, #0]
{
 8002ece:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8002ed0:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ed2:	685e      	ldr	r6, [r3, #4]
  if(tmp1 && tmp2)
 8002ed4:	07aa      	lsls	r2, r5, #30
{
 8002ed6:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8002ed8:	d501      	bpl.n	8002ede <HAL_ADC_IRQHandler+0x12>
 8002eda:	06b0      	lsls	r0, r6, #26
 8002edc:	d44d      	bmi.n	8002f7a <HAL_ADC_IRQHandler+0xae>
  if(tmp1 && tmp2)
 8002ede:	0769      	lsls	r1, r5, #29
 8002ee0:	d501      	bpl.n	8002ee6 <HAL_ADC_IRQHandler+0x1a>
 8002ee2:	0632      	lsls	r2, r6, #24
 8002ee4:	d417      	bmi.n	8002f16 <HAL_ADC_IRQHandler+0x4a>
  if(tmp1 && tmp2)
 8002ee6:	07e9      	lsls	r1, r5, #31
 8002ee8:	d501      	bpl.n	8002eee <HAL_ADC_IRQHandler+0x22>
 8002eea:	0672      	lsls	r2, r6, #25
 8002eec:	d404      	bmi.n	8002ef8 <HAL_ADC_IRQHandler+0x2c>
  if(tmp1 && tmp2)
 8002eee:	06a9      	lsls	r1, r5, #26
 8002ef0:	d501      	bpl.n	8002ef6 <HAL_ADC_IRQHandler+0x2a>
 8002ef2:	0172      	lsls	r2, r6, #5
 8002ef4:	d469      	bmi.n	8002fca <HAL_ADC_IRQHandler+0xfe>
}
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	07d0      	lsls	r0, r2, #31
 8002efc:	d5f7      	bpl.n	8002eee <HAL_ADC_IRQHandler+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f06:	4620      	mov	r0, r4
 8002f08:	f7ff ffdc 	bl	8002ec4 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	f06f 0201 	mvn.w	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e7eb      	b.n	8002eee <HAL_ADC_IRQHandler+0x22>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f18:	06d0      	lsls	r0, r2, #27
 8002f1a:	d403      	bmi.n	8002f24 <HAL_ADC_IRQHandler+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f22:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002f2a:	d11e      	bne.n	8002f6a <HAL_ADC_IRQHandler+0x9e>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f2e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8002f32:	d002      	beq.n	8002f3a <HAL_ADC_IRQHandler+0x6e>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f34:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f36:	0551      	lsls	r1, r2, #21
 8002f38:	d417      	bmi.n	8002f6a <HAL_ADC_IRQHandler+0x9e>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f3a:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f3c:	0552      	lsls	r2, r2, #21
 8002f3e:	d414      	bmi.n	8002f6a <HAL_ADC_IRQHandler+0x9e>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f40:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f42:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002f46:	d110      	bne.n	8002f6a <HAL_ADC_IRQHandler+0x9e>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f48:	7e22      	ldrb	r2, [r4, #24]
 8002f4a:	b972      	cbnz	r2, 8002f6a <HAL_ADC_IRQHandler+0x9e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f52:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f5a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f5e:	05d8      	lsls	r0, r3, #23
 8002f60:	d403      	bmi.n	8002f6a <HAL_ADC_IRQHandler+0x9e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f000 f8fc 	bl	8003168 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	f06f 020c 	mvn.w	r2, #12
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e7b5      	b.n	8002ee6 <HAL_ADC_IRQHandler+0x1a>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f7c:	06d1      	lsls	r1, r2, #27
 8002f7e:	d403      	bmi.n	8002f88 <HAL_ADC_IRQHandler+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f86:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8002f8e:	d114      	bne.n	8002fba <HAL_ADC_IRQHandler+0xee>
 8002f90:	7e22      	ldrb	r2, [r4, #24]
 8002f92:	b992      	cbnz	r2, 8002fba <HAL_ADC_IRQHandler+0xee>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f96:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8002f9a:	d123      	bne.n	8002fe4 <HAL_ADC_IRQHandler+0x118>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	f022 0220 	bic.w	r2, r2, #32
 8002fa2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002faa:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fae:	04d8      	lsls	r0, r3, #19
 8002fb0:	d403      	bmi.n	8002fba <HAL_ADC_IRQHandler+0xee>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7fe f940 	bl	8001240 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	f06f 0212 	mvn.w	r2, #18
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e789      	b.n	8002ede <HAL_ADC_IRQHandler+0x12>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fca:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fcc:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fd0:	f042 0202 	orr.w	r2, r2, #2
 8002fd4:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8002fd6:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fd8:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002fda:	f7ff ff75 	bl	8002ec8 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	601d      	str	r5, [r3, #0]
}
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fe4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fe6:	0552      	lsls	r2, r2, #21
 8002fe8:	d4e7      	bmi.n	8002fba <HAL_ADC_IRQHandler+0xee>
 8002fea:	e7d7      	b.n	8002f9c <HAL_ADC_IRQHandler+0xd0>

08002fec <HAL_ADC_ConfigChannel>:
{
 8002fec:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8002fee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002ff2:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8002ff4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002ff6:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8002ff8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002ffa:	f000 809b 	beq.w	8003134 <HAL_ADC_ConfigChannel+0x148>
 8002ffe:	2301      	movs	r3, #1
 8003000:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003004:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003006:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003008:	2c09      	cmp	r4, #9
 800300a:	d82d      	bhi.n	8003068 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800300c:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800300e:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003010:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003014:	f04f 0c07 	mov.w	ip, #7
 8003018:	fa0c fc0e 	lsl.w	ip, ip, lr
 800301c:	ea25 050c 	bic.w	r5, r5, ip
 8003020:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003022:	691d      	ldr	r5, [r3, #16]
 8003024:	fa02 f20e 	lsl.w	r2, r2, lr
 8003028:	432a      	orrs	r2, r5
 800302a:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 800302c:	684a      	ldr	r2, [r1, #4]
 800302e:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003030:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8003032:	d82f      	bhi.n	8003094 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003034:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003038:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800303a:	3a05      	subs	r2, #5
 800303c:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003040:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003044:	fa0e f202 	lsl.w	r2, lr, r2
 8003048:	ea21 0202 	bic.w	r2, r1, r2
 800304c:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800304e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003050:	ea4c 0202 	orr.w	r2, ip, r2
 8003054:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003056:	4a3f      	ldr	r2, [pc, #252]	; (8003154 <HAL_ADC_ConfigChannel+0x168>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d030      	beq.n	80030be <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 800305c:	2300      	movs	r3, #0
 800305e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003062:	4618      	mov	r0, r3
}
 8003064:	b003      	add	sp, #12
 8003066:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003068:	fa1f fc84 	uxth.w	ip, r4
 800306c:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8003070:	68dd      	ldr	r5, [r3, #12]
 8003072:	f1a2 0e1e 	sub.w	lr, r2, #30
 8003076:	2207      	movs	r2, #7
 8003078:	fa02 f20e 	lsl.w	r2, r2, lr
 800307c:	ea25 0202 	bic.w	r2, r5, r2
 8003080:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003082:	688a      	ldr	r2, [r1, #8]
 8003084:	68dd      	ldr	r5, [r3, #12]
 8003086:	fa02 f20e 	lsl.w	r2, r2, lr
 800308a:	432a      	orrs	r2, r5
 800308c:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800308e:	684a      	ldr	r2, [r1, #4]
 8003090:	2a06      	cmp	r2, #6
 8003092:	d9cf      	bls.n	8003034 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8003094:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003096:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 800309a:	d832      	bhi.n	8003102 <HAL_ADC_ConfigChannel+0x116>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800309c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800309e:	3a23      	subs	r2, #35	; 0x23
 80030a0:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030a2:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030a6:	fa05 f202 	lsl.w	r2, r5, r2
 80030aa:	ea21 0202 	bic.w	r2, r1, r2
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b2:	ea4c 0202 	orr.w	r2, ip, r2
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030b8:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_ADC_ConfigChannel+0x168>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d1ce      	bne.n	800305c <HAL_ADC_ConfigChannel+0x70>
 80030be:	2c12      	cmp	r4, #18
 80030c0:	d02e      	beq.n	8003120 <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030c2:	4b25      	ldr	r3, [pc, #148]	; (8003158 <HAL_ADC_ConfigChannel+0x16c>)
 80030c4:	429c      	cmp	r4, r3
 80030c6:	d138      	bne.n	800313a <HAL_ADC_ConfigChannel+0x14e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030c8:	4a24      	ldr	r2, [pc, #144]	; (800315c <HAL_ADC_ConfigChannel+0x170>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ca:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_ADC_ConfigChannel+0x174>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030cc:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ce:	4c25      	ldr	r4, [pc, #148]	; (8003164 <HAL_ADC_ConfigChannel+0x178>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030d0:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80030d4:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030d6:	6851      	ldr	r1, [r2, #4]
 80030d8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80030dc:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	fba4 2303 	umull	r2, r3, r4, r3
 80030e4:	0c9b      	lsrs	r3, r3, #18
 80030e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80030ee:	9b01      	ldr	r3, [sp, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0b3      	beq.n	800305c <HAL_ADC_ConfigChannel+0x70>
        counter--;
 80030f4:	9b01      	ldr	r3, [sp, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80030fa:	9b01      	ldr	r3, [sp, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f9      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x108>
 8003100:	e7ac      	b.n	800305c <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003102:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003104:	3a41      	subs	r2, #65	; 0x41
 8003106:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003108:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800310c:	fa05 f202 	lsl.w	r2, r5, r2
 8003110:	ea21 0202 	bic.w	r2, r1, r2
 8003114:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003118:	ea4c 0202 	orr.w	r2, ip, r2
 800311c:	62da      	str	r2, [r3, #44]	; 0x2c
 800311e:	e79a      	b.n	8003056 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_ADC_ConfigChannel+0x170>)
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003128:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003130:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003132:	e793      	b.n	800305c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8003134:	2002      	movs	r0, #2
}
 8003136:	b003      	add	sp, #12
 8003138:	bd30      	pop	{r4, r5, pc}
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800313a:	2c11      	cmp	r4, #17
 800313c:	d18e      	bne.n	800305c <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_ADC_ConfigChannel+0x170>)
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003146:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800314e:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003150:	e784      	b.n	800305c <HAL_ADC_ConfigChannel+0x70>
 8003152:	bf00      	nop
 8003154:	40012000 	.word	0x40012000
 8003158:	10000012 	.word	0x10000012
 800315c:	40012300 	.word	0x40012300
 8003160:	20000004 	.word	0x20000004
 8003164:	431bde83 	.word	0x431bde83

08003168 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop

0800316c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800316e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003170:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003172:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800317c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800317e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003186:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003190:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <HAL_NVIC_SetPriority+0x74>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003198:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319a:	f1c3 0e07 	rsb	lr, r3, #7
 800319e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a6:	bf28      	it	cs
 80031a8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ac:	f1bc 0f06 	cmp.w	ip, #6
 80031b0:	d91b      	bls.n	80031ea <HAL_NVIC_SetPriority+0x5a>
 80031b2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b4:	f04f 3cff 	mov.w	ip, #4294967295
 80031b8:	fa0c fc03 	lsl.w	ip, ip, r3
 80031bc:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	f04f 3cff 	mov.w	ip, #4294967295
 80031c4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80031c8:	ea21 010c 	bic.w	r1, r1, ip
 80031cc:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80031ce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80031d4:	db0c      	blt.n	80031f0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80031da:	0109      	lsls	r1, r1, #4
 80031dc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80031e0:	b2c9      	uxtb	r1, r1
 80031e2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80031e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80031ea:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ec:	4613      	mov	r3, r2
 80031ee:	e7e7      	b.n	80031c0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_NVIC_SetPriority+0x78>)
 80031f2:	f000 000f 	and.w	r0, r0, #15
 80031f6:	0109      	lsls	r1, r1, #4
 80031f8:	4403      	add	r3, r0
 80031fa:	b2c9      	uxtb	r1, r1
 80031fc:	7619      	strb	r1, [r3, #24]
 80031fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003202:	bf00      	nop
 8003204:	e000ed00 	.word	0xe000ed00
 8003208:	e000ecfc 	.word	0xe000ecfc

0800320c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800320c:	2800      	cmp	r0, #0
 800320e:	db08      	blt.n	8003222 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003210:	0941      	lsrs	r1, r0, #5
 8003212:	4a04      	ldr	r2, [pc, #16]	; (8003224 <HAL_NVIC_EnableIRQ+0x18>)
 8003214:	f000 001f 	and.w	r0, r0, #31
 8003218:	2301      	movs	r3, #1
 800321a:	fa03 f000 	lsl.w	r0, r3, r0
 800321e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003222:	4770      	bx	lr
 8003224:	e000e100 	.word	0xe000e100

08003228 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003228:	3801      	subs	r0, #1
 800322a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800322e:	d210      	bcs.n	8003252 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003230:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003232:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003236:	4c08      	ldr	r4, [pc, #32]	; (8003258 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003238:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800323e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003242:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003244:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003246:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003248:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800324a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324e:	6119      	str	r1, [r3, #16]
 8003250:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003252:	2001      	movs	r0, #1
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800325c:	b538      	push	{r3, r4, r5, lr}
 800325e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003260:	f7ff fcc8 	bl	8002bf4 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003264:	2c00      	cmp	r4, #0
 8003266:	d052      	beq.n	800330e <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003268:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800326a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 800326c:	2102      	movs	r1, #2
 800326e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8003272:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	4605      	mov	r5, r0
 800327e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003280:	e005      	b.n	800328e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003282:	f7ff fcb7 	bl	8002bf4 <HAL_GetTick>
 8003286:	1b43      	subs	r3, r0, r5
 8003288:	2b05      	cmp	r3, #5
 800328a:	d839      	bhi.n	8003300 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328c:	6823      	ldr	r3, [r4, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	07d1      	lsls	r1, r2, #31
 8003292:	d4f6      	bmi.n	8003282 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003294:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003298:	68e1      	ldr	r1, [r4, #12]
 800329a:	4302      	orrs	r2, r0
 800329c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329e:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a2:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a4:	432a      	orrs	r2, r5
 80032a6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a8:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80032aa:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ac:	4302      	orrs	r2, r0
 80032ae:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b0:	4933      	ldr	r1, [pc, #204]	; (8003380 <HAL_DMA_Init+0x124>)
 80032b2:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b4:	6a25      	ldr	r5, [r4, #32]
 80032b6:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b8:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80032bc:	2904      	cmp	r1, #4
 80032be:	d028      	beq.n	8003312 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032c0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032c2:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032c4:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032c8:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032ca:	b2d8      	uxtb	r0, r3
 80032cc:	4a2d      	ldr	r2, [pc, #180]	; (8003384 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 80032ce:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032d0:	3810      	subs	r0, #16
 80032d2:	fba2 5200 	umull	r5, r2, r2, r0
 80032d6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032d8:	492b      	ldr	r1, [pc, #172]	; (8003388 <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032de:	5c89      	ldrb	r1, [r1, r2]
 80032e0:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032e2:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80032e6:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032e8:	bf88      	it	hi
 80032ea:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ec:	223f      	movs	r2, #63	; 0x3f
 80032ee:	408a      	lsls	r2, r1
 80032f0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f2:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f4:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80032f6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80032fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80032fe:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003300:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003302:	2220      	movs	r2, #32
 8003304:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003306:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800330a:	4618      	mov	r0, r3
}
 800330c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800330e:	2001      	movs	r0, #1
}
 8003310:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003312:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8003316:	4329      	orrs	r1, r5
 8003318:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800331a:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800331c:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800331e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003320:	f021 0107 	bic.w	r1, r1, #7
 8003324:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8003326:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800332a:	2d00      	cmp	r5, #0
 800332c:	d0cd      	beq.n	80032ca <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800332e:	b178      	cbz	r0, 8003350 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003330:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003334:	d016      	beq.n	8003364 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003336:	2a02      	cmp	r2, #2
 8003338:	d903      	bls.n	8003342 <HAL_DMA_Init+0xe6>
 800333a:	2a03      	cmp	r2, #3
 800333c:	d1c5      	bne.n	80032ca <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800333e:	01ea      	lsls	r2, r5, #7
 8003340:	d5c3      	bpl.n	80032ca <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8003342:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003344:	2240      	movs	r2, #64	; 0x40
 8003346:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003348:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800334c:	4618      	mov	r0, r3
}
 800334e:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8003350:	2a01      	cmp	r2, #1
 8003352:	d003      	beq.n	800335c <HAL_DMA_Init+0x100>
 8003354:	f032 0202 	bics.w	r2, r2, #2
 8003358:	d1b7      	bne.n	80032ca <HAL_DMA_Init+0x6e>
 800335a:	e7f0      	b.n	800333e <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800335c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003360:	d1b3      	bne.n	80032ca <HAL_DMA_Init+0x6e>
 8003362:	e7ee      	b.n	8003342 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8003364:	2a03      	cmp	r2, #3
 8003366:	d8b0      	bhi.n	80032ca <HAL_DMA_Init+0x6e>
 8003368:	a001      	add	r0, pc, #4	; (adr r0, 8003370 <HAL_DMA_Init+0x114>)
 800336a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003343 	.word	0x08003343
 8003374:	0800333f 	.word	0x0800333f
 8003378:	08003343 	.word	0x08003343
 800337c:	0800335d 	.word	0x0800335d
 8003380:	f010803f 	.word	0xf010803f
 8003384:	aaaaaaab 	.word	0xaaaaaaab
 8003388:	0800a630 	.word	0x0800a630

0800338c <HAL_DMA_DeInit>:
{
 800338c:	b430      	push	{r4, r5}
  if(hdma == NULL)
 800338e:	2800      	cmp	r0, #0
 8003390:	d035      	beq.n	80033fe <HAL_DMA_DeInit+0x72>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003392:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003396:	2b02      	cmp	r3, #2
 8003398:	b2dc      	uxtb	r4, r3
 800339a:	d02d      	beq.n	80033f8 <HAL_DMA_DeInit+0x6c>
  __HAL_DMA_DISABLE(hdma);
 800339c:	6803      	ldr	r3, [r0, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800339e:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <HAL_DMA_DeInit+0x7c>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033a0:	4d1a      	ldr	r5, [pc, #104]	; (800340c <HAL_DMA_DeInit+0x80>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033a2:	b2d9      	uxtb	r1, r3
 80033a4:	3910      	subs	r1, #16
 80033a6:	fba2 4201 	umull	r4, r2, r2, r1
 80033aa:	0912      	lsrs	r2, r2, #4
  __HAL_DMA_DISABLE(hdma);
 80033ac:	681c      	ldr	r4, [r3, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033ae:	5cad      	ldrb	r5, [r5, r2]
  __HAL_DMA_DISABLE(hdma);
 80033b0:	f024 0401 	bic.w	r4, r4, #1
  hdma->Instance->CR   = 0U;
 80033b4:	2200      	movs	r2, #0
  __HAL_DMA_DISABLE(hdma);
 80033b6:	601c      	str	r4, [r3, #0]
  hdma->Instance->CR   = 0U;
 80033b8:	601a      	str	r2, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80033ba:	605a      	str	r2, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80033bc:	609a      	str	r2, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80033be:	60da      	str	r2, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80033c0:	611a      	str	r2, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80033c2:	2221      	movs	r2, #33	; 0x21
 80033c4:	615a      	str	r2, [r3, #20]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033ca:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80033ce:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033d0:	bf88      	it	hi
 80033d2:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d4:	213f      	movs	r1, #63	; 0x3f
  hdma->XferCpltCallback = NULL;
 80033d6:	2200      	movs	r2, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033d8:	40a9      	lsls	r1, r5
  hdma->XferHalfCpltCallback = NULL;
 80033da:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80033de:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 80033e2:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033e6:	65c5      	str	r5, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033e8:	6583      	str	r3, [r0, #88]	; 0x58
  return HAL_OK;
 80033ea:	4614      	mov	r4, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ec:	6099      	str	r1, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ee:	6542      	str	r2, [r0, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80033f0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80033f4:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
}
 80033f8:	4620      	mov	r0, r4
 80033fa:	bc30      	pop	{r4, r5}
 80033fc:	4770      	bx	lr
    return HAL_ERROR;
 80033fe:	2401      	movs	r4, #1
}
 8003400:	4620      	mov	r0, r4
 8003402:	bc30      	pop	{r4, r5}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	aaaaaaab 	.word	0xaaaaaaab
 800340c:	0800a630 	.word	0x0800a630

08003410 <HAL_DMA_Start_IT>:
{
 8003410:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8003412:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003416:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003418:	2c01      	cmp	r4, #1
 800341a:	d035      	beq.n	8003488 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 800341c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8003420:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003424:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8003426:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800342a:	d005      	beq.n	8003438 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800342c:	2300      	movs	r3, #0
 800342e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8003432:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8003434:	2002      	movs	r0, #2
}
 8003436:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003438:	2602      	movs	r6, #2
 800343a:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800343e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003440:	2600      	movs	r6, #0
 8003442:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003444:	6826      	ldr	r6, [r4, #0]
 8003446:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800344a:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800344c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800344e:	6883      	ldr	r3, [r0, #8]
 8003450:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8003452:	bf0e      	itee	eq
 8003454:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8003456:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8003458:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800345a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800345c:	bf08      	it	eq
 800345e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003460:	233f      	movs	r3, #63	; 0x3f
 8003462:	4093      	lsls	r3, r2
 8003464:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003466:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003468:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800346a:	f043 0316 	orr.w	r3, r3, #22
 800346e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003470:	b11a      	cbz	r2, 800347a <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003480:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003482:	6023      	str	r3, [r4, #0]
}
 8003484:	bc70      	pop	{r4, r5, r6}
 8003486:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8003488:	2002      	movs	r0, #2
}
 800348a:	bc70      	pop	{r4, r5, r6}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop

08003490 <HAL_DMA_Abort>:
{
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003494:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8003496:	f7ff fbad 	bl	8002bf4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800349a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d006      	beq.n	80034b0 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 80034a2:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a4:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80034a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034aa:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80034ac:	2001      	movs	r0, #1
}
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	f022 0216 	bic.w	r2, r2, #22
 80034b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034c0:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034c4:	4605      	mov	r5, r0
 80034c6:	b332      	cbz	r2, 8003516 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f022 0208 	bic.w	r2, r2, #8
 80034ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d8:	e005      	b.n	80034e6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034da:	f7ff fb8b 	bl	8002bf4 <HAL_GetTick>
 80034de:	1b43      	subs	r3, r0, r5
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d80f      	bhi.n	8003504 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f013 0301 	ands.w	r3, r3, #1
 80034ec:	d1f5      	bne.n	80034da <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80034f0:	223f      	movs	r2, #63	; 0x3f
 80034f2:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80034f4:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f6:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80034f8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80034fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8003500:	4618      	mov	r0, r3
}
 8003502:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003504:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003506:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8003508:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800350a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800350c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003510:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8003514:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003516:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003518:	2a00      	cmp	r2, #0
 800351a:	d1d5      	bne.n	80034c8 <HAL_DMA_Abort+0x38>
 800351c:	e7d8      	b.n	80034d0 <HAL_DMA_Abort+0x40>
 800351e:	bf00      	nop

08003520 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003520:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003524:	2b02      	cmp	r3, #2
 8003526:	d003      	beq.n	8003530 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800352c:	2001      	movs	r0, #1
 800352e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8003530:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8003532:	2305      	movs	r3, #5
 8003534:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003538:	6813      	ldr	r3, [r2, #0]
 800353a:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 800353e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8003540:	6013      	str	r3, [r2, #0]
}
 8003542:	4770      	bx	lr

08003544 <HAL_DMA_IRQHandler>:
{
 8003544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003548:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 800354a:	4a74      	ldr	r2, [pc, #464]	; (800371c <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800354e:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003554:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8003556:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003558:	2208      	movs	r2, #8
 800355a:	409a      	lsls	r2, r3
 800355c:	4222      	tst	r2, r4
{
 800355e:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003560:	d004      	beq.n	800356c <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003562:	6801      	ldr	r1, [r0, #0]
 8003564:	680f      	ldr	r7, [r1, #0]
 8003566:	0778      	lsls	r0, r7, #29
 8003568:	f100 808a 	bmi.w	8003680 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800356c:	2201      	movs	r2, #1
 800356e:	409a      	lsls	r2, r3
 8003570:	4222      	tst	r2, r4
 8003572:	d004      	beq.n	800357e <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003574:	f8d8 1000 	ldr.w	r1, [r8]
 8003578:	6949      	ldr	r1, [r1, #20]
 800357a:	0609      	lsls	r1, r1, #24
 800357c:	d478      	bmi.n	8003670 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800357e:	2204      	movs	r2, #4
 8003580:	409a      	lsls	r2, r3
 8003582:	4222      	tst	r2, r4
 8003584:	d004      	beq.n	8003590 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003586:	f8d8 1000 	ldr.w	r1, [r8]
 800358a:	6809      	ldr	r1, [r1, #0]
 800358c:	078f      	lsls	r7, r1, #30
 800358e:	d467      	bmi.n	8003660 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003590:	2210      	movs	r2, #16
 8003592:	409a      	lsls	r2, r3
 8003594:	4222      	tst	r2, r4
 8003596:	d004      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003598:	f8d8 1000 	ldr.w	r1, [r8]
 800359c:	680f      	ldr	r7, [r1, #0]
 800359e:	0738      	lsls	r0, r7, #28
 80035a0:	d449      	bmi.n	8003636 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035a2:	2220      	movs	r2, #32
 80035a4:	409a      	lsls	r2, r3
 80035a6:	4222      	tst	r2, r4
 80035a8:	d017      	beq.n	80035da <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035aa:	f8d8 1000 	ldr.w	r1, [r8]
 80035ae:	680c      	ldr	r4, [r1, #0]
 80035b0:	06e0      	lsls	r0, r4, #27
 80035b2:	d512      	bpl.n	80035da <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035b4:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035b6:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80035ba:	2a05      	cmp	r2, #5
 80035bc:	d073      	beq.n	80036a6 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035be:	680b      	ldr	r3, [r1, #0]
 80035c0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035c6:	f000 8090 	beq.w	80036ea <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035ca:	0319      	lsls	r1, r3, #12
 80035cc:	f140 809b 	bpl.w	8003706 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80035d0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80035d4:	b10b      	cbz	r3, 80035da <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80035d6:	4640      	mov	r0, r8
 80035d8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035da:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80035de:	b33b      	cbz	r3, 8003630 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035e0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80035e4:	07da      	lsls	r2, r3, #31
 80035e6:	d51b      	bpl.n	8003620 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 80035e8:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035ec:	494c      	ldr	r1, [pc, #304]	; (8003720 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80035ee:	2305      	movs	r3, #5
 80035f0:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80035f4:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035f6:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80035fa:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80035fe:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e002      	b.n	800360a <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	07db      	lsls	r3, r3, #31
 8003608:	d504      	bpl.n	8003614 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800360a:	9b01      	ldr	r3, [sp, #4]
 800360c:	3301      	adds	r3, #1
 800360e:	42ab      	cmp	r3, r5
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	d9f7      	bls.n	8003604 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8003614:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8003616:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003618:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800361c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8003620:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8003624:	b123      	cbz	r3, 8003630 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8003626:	4640      	mov	r0, r8
}
 8003628:	b002      	add	sp, #8
 800362a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800362e:	4718      	bx	r3
}
 8003630:	b002      	add	sp, #8
 8003632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003636:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003638:	680a      	ldr	r2, [r1, #0]
 800363a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800363e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003640:	d12a      	bne.n	8003698 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003642:	05d7      	lsls	r7, r2, #23
 8003644:	d403      	bmi.n	800364e <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003646:	680a      	ldr	r2, [r1, #0]
 8003648:	f022 0208 	bic.w	r2, r2, #8
 800364c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800364e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8003652:	2a00      	cmp	r2, #0
 8003654:	d0a5      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8003656:	4640      	mov	r0, r8
 8003658:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800365a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800365e:	e7a0      	b.n	80035a2 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003660:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003662:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8003666:	f042 0204 	orr.w	r2, r2, #4
 800366a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800366e:	e78f      	b.n	8003590 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003670:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003672:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8003676:	f042 0202 	orr.w	r2, r2, #2
 800367a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800367e:	e77e      	b.n	800357e <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003680:	680f      	ldr	r7, [r1, #0]
 8003682:	f027 0704 	bic.w	r7, r7, #4
 8003686:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003688:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800368a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8003696:	e769      	b.n	800356c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003698:	0312      	lsls	r2, r2, #12
 800369a:	d5d8      	bpl.n	800364e <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800369c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	d1d8      	bne.n	8003656 <HAL_DMA_IRQHandler+0x112>
 80036a4:	e77d      	b.n	80035a2 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036a6:	680a      	ldr	r2, [r1, #0]
 80036a8:	f022 0216 	bic.w	r2, r2, #22
 80036ac:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036ae:	694a      	ldr	r2, [r1, #20]
 80036b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036b4:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036b6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80036ba:	b352      	cbz	r2, 8003712 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036bc:	680a      	ldr	r2, [r1, #0]
 80036be:	f022 0208 	bic.w	r2, r2, #8
 80036c2:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c4:	223f      	movs	r2, #63	; 0x3f
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80036ca:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ce:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80036d0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80036d2:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80036d4:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80036d8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80036dc:	2900      	cmp	r1, #0
 80036de:	d0a7      	beq.n	8003630 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80036e0:	4640      	mov	r0, r8
}
 80036e2:	b002      	add	sp, #8
 80036e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 80036e8:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ea:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80036ee:	f47f af6f 	bne.w	80035d0 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036f2:	680a      	ldr	r2, [r1, #0]
 80036f4:	f022 0210 	bic.w	r2, r2, #16
 80036f8:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80036fa:	2201      	movs	r2, #1
 80036fc:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003700:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8003704:	e764      	b.n	80035d0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8003706:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800370a:	2b00      	cmp	r3, #0
 800370c:	f47f af63 	bne.w	80035d6 <HAL_DMA_IRQHandler+0x92>
 8003710:	e763      	b.n	80035da <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003712:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8003716:	2a00      	cmp	r2, #0
 8003718:	d1d0      	bne.n	80036bc <HAL_DMA_IRQHandler+0x178>
 800371a:	e7d3      	b.n	80036c4 <HAL_DMA_IRQHandler+0x180>
 800371c:	20000004 	.word	0x20000004
 8003720:	1b4e81b5 	.word	0x1b4e81b5

08003724 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003724:	b348      	cbz	r0, 800377a <HAL_DMA2D_Init+0x56>
{
 8003726:	b510      	push	{r4, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003728:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800372c:	4604      	mov	r4, r0
 800372e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003732:	b1eb      	cbz	r3, 8003770 <HAL_DMA2D_Init+0x4c>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003744:	430b      	orrs	r3, r1
 8003746:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003748:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800374a:	68a1      	ldr	r1, [r4, #8]
 800374c:	f023 0307 	bic.w	r3, r3, #7
 8003750:	430b      	orrs	r3, r1
 8003752:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003754:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003756:	68e1      	ldr	r1, [r4, #12]
 8003758:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800375c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003760:	430b      	orrs	r3, r1
 8003762:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003764:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003766:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003768:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800376a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 800376e:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8003770:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8003774:	f7fd f884 	bl	8000880 <HAL_DMA2D_MspInit>
 8003778:	e7dc      	b.n	8003734 <HAL_DMA2D_Init+0x10>
    return HAL_ERROR;
 800377a:	2001      	movs	r0, #1
}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop

08003780 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003780:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003782:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8003786:	2c01      	cmp	r4, #1
 8003788:	d037      	beq.n	80037fa <HAL_DMA2D_Start+0x7a>
 800378a:	2401      	movs	r4, #1
 800378c:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003790:	2402      	movs	r4, #2
 8003792:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003796:	9d02      	ldr	r5, [sp, #8]
 8003798:	6804      	ldr	r4, [r0, #0]
 800379a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800379e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80037a0:	f005 4c40 	and.w	ip, r5, #3221225472	; 0xc0000000
 80037a4:	ea43 030c 	orr.w	r3, r3, ip
 80037a8:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80037aa:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80037ac:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80037ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037b2:	d007      	beq.n	80037c4 <HAL_DMA2D_Start+0x44>
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80037b4:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	f043 0301 	orr.w	r3, r3, #1
  return HAL_OK;
 80037bc:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80037be:	6023      	str	r3, [r4, #0]
}
 80037c0:	bc30      	pop	{r4, r5}
 80037c2:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80037c4:	6883      	ldr	r3, [r0, #8]
 80037c6:	b1b3      	cbz	r3, 80037f6 <HAL_DMA2D_Start+0x76>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d024      	beq.n	8003816 <HAL_DMA2D_Start+0x96>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80037cc:	2b02      	cmp	r3, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80037ce:	f401 027f 	and.w	r2, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80037d2:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80037d6:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80037d8:	d020      	beq.n	800381c <HAL_DMA2D_Start+0x9c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80037da:	2b03      	cmp	r3, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80037dc:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80037e0:	d00e      	beq.n	8003800 <HAL_DMA2D_Start+0x80>
      tmp2 = (tmp2 >> 20U);
 80037e2:	0d13      	lsrs	r3, r2, #20
      tmp3 = (tmp3 >> 12U);
 80037e4:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80037ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 80037f0:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80037f2:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80037f6:	63a1      	str	r1, [r4, #56]	; 0x38
 80037f8:	e7dd      	b.n	80037b6 <HAL_DMA2D_Start+0x36>
  __HAL_LOCK(hdma2d);
 80037fa:	2002      	movs	r0, #2
}
 80037fc:	bc30      	pop	{r4, r5}
 80037fe:	4770      	bx	lr
      tmp2 = (tmp2 >> 19U);
 8003800:	0cd2      	lsrs	r2, r2, #19
      tmp3 = (tmp3 >> 11U);
 8003802:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003804:	0293      	lsls	r3, r2, #10
 8003806:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800380a:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 800380e:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003810:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8003814:	e7ef      	b.n	80037f6 <HAL_DMA2D_Start+0x76>
      tmp = (tmp3 | tmp2 | tmp4);
 8003816:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800381a:	e7ec      	b.n	80037f6 <HAL_DMA2D_Start+0x76>
      tmp2 = (tmp2 >> 19U);
 800381c:	0cd1      	lsrs	r1, r2, #19
      tmp3 = (tmp3 >> 10U);
 800381e:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003820:	02c9      	lsls	r1, r1, #11
 8003822:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8003826:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800382a:	e7e4      	b.n	80037f6 <HAL_DMA2D_Start+0x76>

0800382c <HAL_DMA2D_PollForTransfer>:
{
 800382c:	b570      	push	{r4, r5, r6, lr}
 800382e:	b082      	sub	sp, #8
  __IO uint32_t isrflags = 0x0U;
 8003830:	2200      	movs	r2, #0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003832:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t isrflags = 0x0U;
 8003834:	9201      	str	r2, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	07d6      	lsls	r6, r2, #31
{
 800383a:	4604      	mov	r4, r0
 800383c:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800383e:	d40f      	bmi.n	8003860 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003840:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003842:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003844:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 8003846:	0691      	lsls	r1, r2, #26
 8003848:	d432      	bmi.n	80038b0 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_UNLOCK(hdma2d);
 800384a:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800384c:	2012      	movs	r0, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800384e:	2101      	movs	r1, #1
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003850:	6098      	str	r0, [r3, #8]
  return HAL_OK;
 8003852:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003854:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8003858:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 800385c:	b002      	add	sp, #8
 800385e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8003860:	f7ff f9c8 	bl	8002bf4 <HAL_GetTick>
 8003864:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003866:	1c6a      	adds	r2, r5, #1
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	d147      	bne.n	80038fc <HAL_DMA2D_PollForTransfer+0xd0>
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	0796      	lsls	r6, r2, #30
 8003870:	d4e6      	bmi.n	8003840 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003876:	9a01      	ldr	r2, [sp, #4]
 8003878:	f012 0f21 	tst.w	r2, #33	; 0x21
 800387c:	d0f6      	beq.n	800386c <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800387e:	9a01      	ldr	r2, [sp, #4]
 8003880:	0690      	lsls	r0, r2, #26
 8003882:	d503      	bpl.n	800388c <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003884:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003886:	f042 0202 	orr.w	r2, r2, #2
 800388a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800388c:	9a01      	ldr	r2, [sp, #4]
 800388e:	07d1      	lsls	r1, r2, #31
 8003890:	d503      	bpl.n	800389a <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003892:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003894:	f042 0201 	orr.w	r2, r2, #1
 8003898:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800389a:	2021      	movs	r0, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800389c:	6098      	str	r0, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800389e:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 80038a0:	2200      	movs	r2, #0
        return HAL_ERROR;
 80038a2:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038a4:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80038a8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
}
 80038ac:	b002      	add	sp, #8
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80038b0:	f7ff f9a0 	bl	8002bf4 <HAL_GetTick>
 80038b4:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80038b6:	1c68      	adds	r0, r5, #1
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	d13a      	bne.n	8003932 <HAL_DMA2D_PollForTransfer+0x106>
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	06d1      	lsls	r1, r2, #27
 80038c0:	d4c3      	bmi.n	800384a <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80038c6:	9a01      	ldr	r2, [sp, #4]
 80038c8:	f012 0f29 	tst.w	r2, #41	; 0x29
 80038cc:	d0f6      	beq.n	80038bc <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80038ce:	9a01      	ldr	r2, [sp, #4]
 80038d0:	0712      	lsls	r2, r2, #28
 80038d2:	d503      	bpl.n	80038dc <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80038d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80038d6:	f042 0204 	orr.w	r2, r2, #4
 80038da:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038dc:	9a01      	ldr	r2, [sp, #4]
 80038de:	0696      	lsls	r6, r2, #26
 80038e0:	d503      	bpl.n	80038ea <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80038e4:	f042 0202 	orr.w	r2, r2, #2
 80038e8:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038ea:	9a01      	ldr	r2, [sp, #4]
 80038ec:	07d5      	lsls	r5, r2, #31
 80038ee:	d503      	bpl.n	80038f8 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80038f8:	2029      	movs	r0, #41	; 0x29
 80038fa:	e7cf      	b.n	800389c <HAL_DMA2D_PollForTransfer+0x70>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	0790      	lsls	r0, r2, #30
 8003900:	d49e      	bmi.n	8003840 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003906:	9a01      	ldr	r2, [sp, #4]
 8003908:	f012 0f21 	tst.w	r2, #33	; 0x21
 800390c:	d1b7      	bne.n	800387e <HAL_DMA2D_PollForTransfer+0x52>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800390e:	f7ff f971 	bl	8002bf4 <HAL_GetTick>
 8003912:	1b80      	subs	r0, r0, r6
 8003914:	42a8      	cmp	r0, r5
 8003916:	d801      	bhi.n	800391c <HAL_DMA2D_PollForTransfer+0xf0>
 8003918:	2d00      	cmp	r5, #0
 800391a:	d1a4      	bne.n	8003866 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800391c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800391e:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003920:	f043 0320 	orr.w	r3, r3, #32
          __HAL_UNLOCK(hdma2d);
 8003924:	2200      	movs	r2, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003926:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 8003928:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800392c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 8003930:	e794      	b.n	800385c <HAL_DMA2D_PollForTransfer+0x30>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	06d2      	lsls	r2, r2, #27
 8003936:	d488      	bmi.n	800384a <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800393c:	9a01      	ldr	r2, [sp, #4]
 800393e:	f012 0f29 	tst.w	r2, #41	; 0x29
 8003942:	d1c4      	bne.n	80038ce <HAL_DMA2D_PollForTransfer+0xa2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7ff f956 	bl	8002bf4 <HAL_GetTick>
 8003948:	1b80      	subs	r0, r0, r6
 800394a:	42a8      	cmp	r0, r5
 800394c:	d8e6      	bhi.n	800391c <HAL_DMA2D_PollForTransfer+0xf0>
 800394e:	2d00      	cmp	r5, #0
 8003950:	d1b1      	bne.n	80038b6 <HAL_DMA2D_PollForTransfer+0x8a>
 8003952:	e7e3      	b.n	800391c <HAL_DMA2D_PollForTransfer+0xf0>

08003954 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8003954:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003958:	2b01      	cmp	r3, #1
 800395a:	d04d      	beq.n	80039f8 <HAL_DMA2D_ConfigLayer+0xa4>
 800395c:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800395e:	2302      	movs	r3, #2
{
 8003960:	b470      	push	{r4, r5, r6}
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003962:	eb00 1c01 	add.w	ip, r0, r1, lsl #4
  __HAL_LOCK(hdma2d);
 8003966:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800396a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800396e:	e9dc 2307 	ldrd	r2, r3, [ip, #28]
 8003972:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003976:	3a09      	subs	r2, #9
 8003978:	2a01      	cmp	r2, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800397a:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800397e:	d91d      	bls.n	80039bc <HAL_DMA2D_ConfigLayer+0x68>
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003980:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003984:	b189      	cbz	r1, 80039aa <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003986:	6801      	ldr	r1, [r0, #0]
 8003988:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_DMA2D_ConfigLayer+0xa8>)
 800398a:	69cd      	ldr	r5, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800398c:	f8dc 4018 	ldr.w	r4, [ip, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003990:	402a      	ands	r2, r5
 8003992:	4313      	orrs	r3, r2
 8003994:	61cb      	str	r3, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003996:	610c      	str	r4, [r1, #16]
  __HAL_UNLOCK(hdma2d);
 8003998:	2300      	movs	r3, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800399a:	2201      	movs	r2, #1
 800399c:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80039a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
}
 80039a4:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80039a6:	4618      	mov	r0, r3
}
 80039a8:	4770      	bx	lr
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039aa:	6801      	ldr	r1, [r0, #0]
 80039ac:	4a13      	ldr	r2, [pc, #76]	; (80039fc <HAL_DMA2D_ConfigLayer+0xa8>)
 80039ae:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80039b0:	4022      	ands	r2, r4
 80039b2:	4313      	orrs	r3, r2
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80039b4:	6984      	ldr	r4, [r0, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039b6:	624b      	str	r3, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80039b8:	618c      	str	r4, [r1, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039ba:	e7ed      	b.n	8003998 <HAL_DMA2D_ConfigLayer+0x44>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80039bc:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
 80039c0:	4323      	orrs	r3, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80039c2:	b961      	cbnz	r1, 80039de <HAL_DMA2D_ConfigLayer+0x8a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039c4:	6801      	ldr	r1, [r0, #0]
 80039c6:	4a0d      	ldr	r2, [pc, #52]	; (80039fc <HAL_DMA2D_ConfigLayer+0xa8>)
 80039c8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80039ca:	6985      	ldr	r5, [r0, #24]
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039cc:	4022      	ands	r2, r4
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80039ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039d0:	4313      	orrs	r3, r2
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80039d2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80039d6:	624b      	str	r3, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80039d8:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80039da:	628c      	str	r4, [r1, #40]	; 0x28
 80039dc:	e7dc      	b.n	8003998 <HAL_DMA2D_ConfigLayer+0x44>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80039de:	6804      	ldr	r4, [r0, #0]
 80039e0:	4906      	ldr	r1, [pc, #24]	; (80039fc <HAL_DMA2D_ConfigLayer+0xa8>)
 80039e2:	69e6      	ldr	r6, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80039e4:	f8dc 5018 	ldr.w	r5, [ip, #24]
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80039e8:	4031      	ands	r1, r6
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80039ea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80039ee:	430b      	orrs	r3, r1
 80039f0:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80039f2:	6125      	str	r5, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80039f4:	6222      	str	r2, [r4, #32]
 80039f6:	e7cf      	b.n	8003998 <HAL_DMA2D_ConfigLayer+0x44>
  __HAL_LOCK(hdma2d);
 80039f8:	2002      	movs	r0, #2
}
 80039fa:	4770      	bx	lr
 80039fc:	00fcfff0 	.word	0x00fcfff0

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a04:	2200      	movs	r2, #0
 8003a06:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a08:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8003c68 <HAL_GPIO_Init+0x268>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0c:	4e8f      	ldr	r6, [pc, #572]	; (8003c4c <HAL_GPIO_Init+0x24c>)
{
 8003a0e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a10:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a12:	4689      	mov	r9, r1
 8003a14:	e005      	b.n	8003a22 <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a16:	3301      	adds	r3, #1
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	f102 0202 	add.w	r2, r2, #2
 8003a1e:	f000 8094 	beq.w	8003b4a <HAL_GPIO_Init+0x14a>
    ioposition = 0x01U << position;
 8003a22:	2101      	movs	r1, #1
 8003a24:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a26:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8003a2a:	43a1      	bics	r1, r4
 8003a2c:	d1f3      	bne.n	8003a16 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8003a32:	f00c 0103 	and.w	r1, ip, #3
 8003a36:	1e4d      	subs	r5, r1, #1
 8003a38:	2d01      	cmp	r5, #1
 8003a3a:	f240 8089 	bls.w	8003b50 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a3e:	2903      	cmp	r1, #3
 8003a40:	f040 80c8 	bne.w	8003bd4 <HAL_GPIO_Init+0x1d4>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a44:	4091      	lsls	r1, r2
 8003a46:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8003a48:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a4a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a4c:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a4e:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003a52:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a54:	d0df      	beq.n	8003a16 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a56:	2100      	movs	r1, #0
 8003a58:	9103      	str	r1, [sp, #12]
 8003a5a:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8003a5e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003a62:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8003a66:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8003a6a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003a6e:	9103      	str	r1, [sp, #12]
 8003a70:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003a72:	f023 0103 	bic.w	r1, r3, #3
 8003a76:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003a7a:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a7e:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003a82:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a86:	00bf      	lsls	r7, r7, #2
 8003a88:	250f      	movs	r5, #15
 8003a8a:	40bd      	lsls	r5, r7
 8003a8c:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a90:	4d6f      	ldr	r5, [pc, #444]	; (8003c50 <HAL_GPIO_Init+0x250>)
 8003a92:	42a8      	cmp	r0, r5
 8003a94:	d02e      	beq.n	8003af4 <HAL_GPIO_Init+0xf4>
 8003a96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a9a:	42a8      	cmp	r0, r5
 8003a9c:	f000 809e 	beq.w	8003bdc <HAL_GPIO_Init+0x1dc>
 8003aa0:	4d6c      	ldr	r5, [pc, #432]	; (8003c54 <HAL_GPIO_Init+0x254>)
 8003aa2:	42a8      	cmp	r0, r5
 8003aa4:	f000 80a1 	beq.w	8003bea <HAL_GPIO_Init+0x1ea>
 8003aa8:	4d6b      	ldr	r5, [pc, #428]	; (8003c58 <HAL_GPIO_Init+0x258>)
 8003aaa:	42a8      	cmp	r0, r5
 8003aac:	f000 80a4 	beq.w	8003bf8 <HAL_GPIO_Init+0x1f8>
 8003ab0:	4d6a      	ldr	r5, [pc, #424]	; (8003c5c <HAL_GPIO_Init+0x25c>)
 8003ab2:	42a8      	cmp	r0, r5
 8003ab4:	f000 80a7 	beq.w	8003c06 <HAL_GPIO_Init+0x206>
 8003ab8:	4d69      	ldr	r5, [pc, #420]	; (8003c60 <HAL_GPIO_Init+0x260>)
 8003aba:	42a8      	cmp	r0, r5
 8003abc:	f000 80b1 	beq.w	8003c22 <HAL_GPIO_Init+0x222>
 8003ac0:	4d68      	ldr	r5, [pc, #416]	; (8003c64 <HAL_GPIO_Init+0x264>)
 8003ac2:	42a8      	cmp	r0, r5
 8003ac4:	f000 80b4 	beq.w	8003c30 <HAL_GPIO_Init+0x230>
 8003ac8:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8003c6c <HAL_GPIO_Init+0x26c>
 8003acc:	4570      	cmp	r0, lr
 8003ace:	f000 80a1 	beq.w	8003c14 <HAL_GPIO_Init+0x214>
 8003ad2:	f8df e19c 	ldr.w	lr, [pc, #412]	; 8003c70 <HAL_GPIO_Init+0x270>
 8003ad6:	4570      	cmp	r0, lr
 8003ad8:	f000 80b1 	beq.w	8003c3e <HAL_GPIO_Init+0x23e>
 8003adc:	f8df e194 	ldr.w	lr, [pc, #404]	; 8003c74 <HAL_GPIO_Init+0x274>
 8003ae0:	4570      	cmp	r0, lr
 8003ae2:	bf0c      	ite	eq
 8003ae4:	f04f 0e09 	moveq.w	lr, #9
 8003ae8:	f04f 0e0a 	movne.w	lr, #10
 8003aec:	fa0e f707 	lsl.w	r7, lr, r7
 8003af0:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af4:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8003af8:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8003afa:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003afe:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8003b02:	bf0c      	ite	eq
 8003b04:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8003b06:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8003b0a:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8003b0c:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b0e:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8003b12:	bf0c      	ite	eq
 8003b14:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003b16:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8003b1a:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8003b1c:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b1e:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003b22:	bf0c      	ite	eq
 8003b24:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003b26:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8003b2a:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b2c:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b2e:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b32:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8003b36:	bf0c      	ite	eq
 8003b38:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8003b3a:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3e:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8003b40:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b42:	f102 0202 	add.w	r2, r2, #2
 8003b46:	f47f af6c 	bne.w	8003a22 <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8003b4a:	b005      	add	sp, #20
 8003b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b50:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8003b54:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b56:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b5a:	2503      	movs	r5, #3
 8003b5c:	fa05 fe02 	lsl.w	lr, r5, r2
 8003b60:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b64:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8003b68:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003b6a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b6c:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b70:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b74:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8003b78:	409f      	lsls	r7, r3
 8003b7a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003b7e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003b80:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b82:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b86:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8003b8a:	4097      	lsls	r7, r2
 8003b8c:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b90:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8003b92:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b94:	fa01 f102 	lsl.w	r1, r1, r2
 8003b98:	f47f af56 	bne.w	8003a48 <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 8003b9c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003ba0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ba4:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003ba8:	f8de 7020 	ldr.w	r7, [lr, #32]
 8003bac:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bae:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bb2:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bb6:	fa07 f708 	lsl.w	r7, r7, r8
 8003bba:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bbc:	270f      	movs	r7, #15
 8003bbe:	fa07 f808 	lsl.w	r8, r7, r8
 8003bc2:	9f00      	ldr	r7, [sp, #0]
 8003bc4:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bc8:	9f01      	ldr	r7, [sp, #4]
 8003bca:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8003bce:	f8ce 7020 	str.w	r7, [lr, #32]
 8003bd2:	e739      	b.n	8003a48 <HAL_GPIO_Init+0x48>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bd4:	2503      	movs	r5, #3
 8003bd6:	4095      	lsls	r5, r2
 8003bd8:	43ed      	mvns	r5, r5
 8003bda:	e7d1      	b.n	8003b80 <HAL_GPIO_Init+0x180>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bdc:	f04f 0e01 	mov.w	lr, #1
 8003be0:	fa0e f707 	lsl.w	r7, lr, r7
 8003be4:	ea48 0807 	orr.w	r8, r8, r7
 8003be8:	e784      	b.n	8003af4 <HAL_GPIO_Init+0xf4>
 8003bea:	f04f 0e02 	mov.w	lr, #2
 8003bee:	fa0e f707 	lsl.w	r7, lr, r7
 8003bf2:	ea48 0807 	orr.w	r8, r8, r7
 8003bf6:	e77d      	b.n	8003af4 <HAL_GPIO_Init+0xf4>
 8003bf8:	f04f 0e03 	mov.w	lr, #3
 8003bfc:	fa0e f707 	lsl.w	r7, lr, r7
 8003c00:	ea48 0807 	orr.w	r8, r8, r7
 8003c04:	e776      	b.n	8003af4 <HAL_GPIO_Init+0xf4>
 8003c06:	f04f 0e04 	mov.w	lr, #4
 8003c0a:	fa0e f707 	lsl.w	r7, lr, r7
 8003c0e:	ea48 0807 	orr.w	r8, r8, r7
 8003c12:	e76f      	b.n	8003af4 <HAL_GPIO_Init+0xf4>
 8003c14:	f04f 0e07 	mov.w	lr, #7
 8003c18:	fa0e f707 	lsl.w	r7, lr, r7
 8003c1c:	ea48 0807 	orr.w	r8, r8, r7
 8003c20:	e768      	b.n	8003af4 <HAL_GPIO_Init+0xf4>
 8003c22:	f04f 0e05 	mov.w	lr, #5
 8003c26:	fa0e f707 	lsl.w	r7, lr, r7
 8003c2a:	ea48 0807 	orr.w	r8, r8, r7
 8003c2e:	e761      	b.n	8003af4 <HAL_GPIO_Init+0xf4>
 8003c30:	f04f 0e06 	mov.w	lr, #6
 8003c34:	fa0e f707 	lsl.w	r7, lr, r7
 8003c38:	ea48 0807 	orr.w	r8, r8, r7
 8003c3c:	e75a      	b.n	8003af4 <HAL_GPIO_Init+0xf4>
 8003c3e:	f04f 0e08 	mov.w	lr, #8
 8003c42:	fa0e f707 	lsl.w	r7, lr, r7
 8003c46:	ea48 0807 	orr.w	r8, r8, r7
 8003c4a:	e753      	b.n	8003af4 <HAL_GPIO_Init+0xf4>
 8003c4c:	40013c00 	.word	0x40013c00
 8003c50:	40020000 	.word	0x40020000
 8003c54:	40020800 	.word	0x40020800
 8003c58:	40020c00 	.word	0x40020c00
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40021400 	.word	0x40021400
 8003c64:	40021800 	.word	0x40021800
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40021c00 	.word	0x40021c00
 8003c70:	40022000 	.word	0x40022000
 8003c74:	40022400 	.word	0x40022400

08003c78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7c:	2300      	movs	r3, #0
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003c7e:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8003de8 <HAL_GPIO_DeInit+0x170>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c82:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8003dec <HAL_GPIO_DeInit+0x174>
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003c86:	f8df a168 	ldr.w	sl, [pc, #360]	; 8003df0 <HAL_GPIO_DeInit+0x178>
 8003c8a:	f8df b168 	ldr.w	fp, [pc, #360]	; 8003df4 <HAL_GPIO_DeInit+0x17c>
 8003c8e:	e002      	b.n	8003c96 <HAL_GPIO_DeInit+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c90:	3301      	adds	r3, #1
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d07b      	beq.n	8003d8e <HAL_GPIO_DeInit+0x116>
    ioposition = 0x01U << position;
 8003c96:	2601      	movs	r6, #1
 8003c98:	fa06 f203 	lsl.w	r2, r6, r3
    if(iocurrent == ioposition)
 8003c9c:	ea32 0401 	bics.w	r4, r2, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8003ca0:	ea02 0c01 	and.w	ip, r2, r1
    if(iocurrent == ioposition)
 8003ca4:	d1f4      	bne.n	8003c90 <HAL_GPIO_DeInit+0x18>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003ca6:	f023 0403 	bic.w	r4, r3, #3
 8003caa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003cae:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003cb2:	f003 0503 	and.w	r5, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003cb6:	f8d4 e008 	ldr.w	lr, [r4, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003cba:	00ad      	lsls	r5, r5, #2
 8003cbc:	270f      	movs	r7, #15
 8003cbe:	40af      	lsls	r7, r5
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003cc0:	4548      	cmp	r0, r9
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003cc2:	ea07 0e0e 	and.w	lr, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003cc6:	d01d      	beq.n	8003d04 <HAL_GPIO_DeInit+0x8c>
 8003cc8:	4550      	cmp	r0, sl
 8003cca:	d063      	beq.n	8003d94 <HAL_GPIO_DeInit+0x11c>
 8003ccc:	4558      	cmp	r0, fp
 8003cce:	d064      	beq.n	8003d9a <HAL_GPIO_DeInit+0x122>
 8003cd0:	4e3e      	ldr	r6, [pc, #248]	; (8003dcc <HAL_GPIO_DeInit+0x154>)
 8003cd2:	42b0      	cmp	r0, r6
 8003cd4:	d065      	beq.n	8003da2 <HAL_GPIO_DeInit+0x12a>
 8003cd6:	4e3e      	ldr	r6, [pc, #248]	; (8003dd0 <HAL_GPIO_DeInit+0x158>)
 8003cd8:	42b0      	cmp	r0, r6
 8003cda:	d066      	beq.n	8003daa <HAL_GPIO_DeInit+0x132>
 8003cdc:	4e3d      	ldr	r6, [pc, #244]	; (8003dd4 <HAL_GPIO_DeInit+0x15c>)
 8003cde:	42b0      	cmp	r0, r6
 8003ce0:	d067      	beq.n	8003db2 <HAL_GPIO_DeInit+0x13a>
 8003ce2:	4e3d      	ldr	r6, [pc, #244]	; (8003dd8 <HAL_GPIO_DeInit+0x160>)
 8003ce4:	42b0      	cmp	r0, r6
 8003ce6:	d054      	beq.n	8003d92 <HAL_GPIO_DeInit+0x11a>
 8003ce8:	4e3c      	ldr	r6, [pc, #240]	; (8003ddc <HAL_GPIO_DeInit+0x164>)
 8003cea:	42b0      	cmp	r0, r6
 8003cec:	d065      	beq.n	8003dba <HAL_GPIO_DeInit+0x142>
 8003cee:	4e3c      	ldr	r6, [pc, #240]	; (8003de0 <HAL_GPIO_DeInit+0x168>)
 8003cf0:	42b0      	cmp	r0, r6
 8003cf2:	d066      	beq.n	8003dc2 <HAL_GPIO_DeInit+0x14a>
 8003cf4:	4e3b      	ldr	r6, [pc, #236]	; (8003de4 <HAL_GPIO_DeInit+0x16c>)
 8003cf6:	42b0      	cmp	r0, r6
 8003cf8:	bf14      	ite	ne
 8003cfa:	260a      	movne	r6, #10
 8003cfc:	2609      	moveq	r6, #9
 8003cfe:	fa06 f505 	lsl.w	r5, r6, r5
 8003d02:	e000      	b.n	8003d06 <HAL_GPIO_DeInit+0x8e>
 8003d04:	2500      	movs	r5, #0
 8003d06:	45ae      	cmp	lr, r5
 8003d08:	d11b      	bne.n	8003d42 <HAL_GPIO_DeInit+0xca>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d0a:	f8d8 5000 	ldr.w	r5, [r8]
 8003d0e:	ea25 050c 	bic.w	r5, r5, ip
 8003d12:	f8c8 5000 	str.w	r5, [r8]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d16:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8003d1a:	ea25 050c 	bic.w	r5, r5, ip
 8003d1e:	f8c8 5004 	str.w	r5, [r8, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d22:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8003d26:	ea25 050c 	bic.w	r5, r5, ip
 8003d2a:	f8c8 500c 	str.w	r5, [r8, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d2e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8003d32:	ea25 050c 	bic.w	r5, r5, ip
 8003d36:	f8c8 5008 	str.w	r5, [r8, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003d3a:	68a5      	ldr	r5, [r4, #8]
 8003d3c:	ea25 0707 	bic.w	r7, r5, r7
 8003d40:	60a7      	str	r7, [r4, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d42:	6805      	ldr	r5, [r0, #0]
 8003d44:	2603      	movs	r6, #3
 8003d46:	005c      	lsls	r4, r3, #1
 8003d48:	fa06 f404 	lsl.w	r4, r6, r4
 8003d4c:	ea25 0504 	bic.w	r5, r5, r4
 8003d50:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d52:	fa23 f506 	lsr.w	r5, r3, r6
 8003d56:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003d5a:	f003 0707 	and.w	r7, r3, #7
 8003d5e:	6a2e      	ldr	r6, [r5, #32]
 8003d60:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8003d64:	270f      	movs	r7, #15
 8003d66:	fa07 f70c 	lsl.w	r7, r7, ip
 8003d6a:	ea26 0607 	bic.w	r6, r6, r7
 8003d6e:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d70:	68c5      	ldr	r5, [r0, #12]
 8003d72:	ea25 0504 	bic.w	r5, r5, r4
 8003d76:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d78:	6845      	ldr	r5, [r0, #4]
 8003d7a:	ea25 0202 	bic.w	r2, r5, r2
 8003d7e:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d80:	6882      	ldr	r2, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d82:	3301      	adds	r3, #1
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d84:	ea22 0404 	bic.w	r4, r2, r4
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d88:	2b10      	cmp	r3, #16
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d8a:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d8c:	d183      	bne.n	8003c96 <HAL_GPIO_DeInit+0x1e>
    }
  }
}
 8003d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003d92:	2606      	movs	r6, #6
 8003d94:	fa06 f505 	lsl.w	r5, r6, r5
 8003d98:	e7b5      	b.n	8003d06 <HAL_GPIO_DeInit+0x8e>
 8003d9a:	2602      	movs	r6, #2
 8003d9c:	fa06 f505 	lsl.w	r5, r6, r5
 8003da0:	e7b1      	b.n	8003d06 <HAL_GPIO_DeInit+0x8e>
 8003da2:	2603      	movs	r6, #3
 8003da4:	fa06 f505 	lsl.w	r5, r6, r5
 8003da8:	e7ad      	b.n	8003d06 <HAL_GPIO_DeInit+0x8e>
 8003daa:	2604      	movs	r6, #4
 8003dac:	fa06 f505 	lsl.w	r5, r6, r5
 8003db0:	e7a9      	b.n	8003d06 <HAL_GPIO_DeInit+0x8e>
 8003db2:	2605      	movs	r6, #5
 8003db4:	fa06 f505 	lsl.w	r5, r6, r5
 8003db8:	e7a5      	b.n	8003d06 <HAL_GPIO_DeInit+0x8e>
 8003dba:	2607      	movs	r6, #7
 8003dbc:	fa06 f505 	lsl.w	r5, r6, r5
 8003dc0:	e7a1      	b.n	8003d06 <HAL_GPIO_DeInit+0x8e>
 8003dc2:	2608      	movs	r6, #8
 8003dc4:	fa06 f505 	lsl.w	r5, r6, r5
 8003dc8:	e79d      	b.n	8003d06 <HAL_GPIO_DeInit+0x8e>
 8003dca:	bf00      	nop
 8003dcc:	40020c00 	.word	0x40020c00
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40021400 	.word	0x40021400
 8003dd8:	40021800 	.word	0x40021800
 8003ddc:	40021c00 	.word	0x40021c00
 8003de0:	40022000 	.word	0x40022000
 8003de4:	40022400 	.word	0x40022400
 8003de8:	40020000 	.word	0x40020000
 8003dec:	40013c00 	.word	0x40013c00
 8003df0:	40020400 	.word	0x40020400
 8003df4:	40020800 	.word	0x40020800

08003df8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003df8:	b902      	cbnz	r2, 8003dfc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dfa:	0409      	lsls	r1, r1, #16
 8003dfc:	6181      	str	r1, [r0, #24]
  }
}
 8003dfe:	4770      	bx	lr

08003e00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e04:	6804      	ldr	r4, [r0, #0]
{
 8003e06:	b083      	sub	sp, #12
 8003e08:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e0a:	6823      	ldr	r3, [r4, #0]
{
 8003e0c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8003e10:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003e18:	4606      	mov	r6, r0
 8003e1a:	468a      	mov	sl, r1
 8003e1c:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1e:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003e20:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003e24:	d135      	bne.n	8003e92 <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e26:	6965      	ldr	r5, [r4, #20]
 8003e28:	07e8      	lsls	r0, r5, #31
 8003e2a:	d5fc      	bpl.n	8003e26 <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e2c:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8003e30:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003e32:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003e36:	d003      	beq.n	8003e40 <I2C_RequestMemoryWrite+0x40>
 8003e38:	e04e      	b.n	8003ed8 <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e3a:	6961      	ldr	r1, [r4, #20]
 8003e3c:	054d      	lsls	r5, r1, #21
 8003e3e:	d45c      	bmi.n	8003efa <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e40:	6961      	ldr	r1, [r4, #20]
 8003e42:	078b      	lsls	r3, r1, #30
 8003e44:	d5f9      	bpl.n	8003e3a <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	2300      	movs	r3, #0
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	6963      	ldr	r3, [r4, #20]
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	69a3      	ldr	r3, [r4, #24]
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e54:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003e58:	f040 8087 	bne.w	8003f6a <I2C_RequestMemoryWrite+0x16a>
 8003e5c:	6963      	ldr	r3, [r4, #20]
 8003e5e:	061a      	lsls	r2, r3, #24
 8003e60:	d463      	bmi.n	8003f2a <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e62:	6963      	ldr	r3, [r4, #20]
 8003e64:	055b      	lsls	r3, r3, #21
 8003e66:	d5f9      	bpl.n	8003e5c <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e68:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e6a:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e6c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003e70:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e72:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e74:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e78:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e7c:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e88:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d066      	beq.n	8003f5c <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 8003e8e:	2001      	movs	r0, #1
 8003e90:	e01f      	b.n	8003ed2 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e92:	6963      	ldr	r3, [r4, #20]
 8003e94:	07d9      	lsls	r1, r3, #31
 8003e96:	d4c9      	bmi.n	8003e2c <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e98:	f7fe feac 	bl	8002bf4 <HAL_GetTick>
 8003e9c:	eba0 000b 	sub.w	r0, r0, fp
 8003ea0:	4581      	cmp	r9, r0
 8003ea2:	d304      	bcc.n	8003eae <I2C_RequestMemoryWrite+0xae>
 8003ea4:	f1b9 0f00 	cmp.w	r9, #0
 8003ea8:	d001      	beq.n	8003eae <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eaa:	6834      	ldr	r4, [r6, #0]
 8003eac:	e7b8      	b.n	8003e20 <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003eae:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eb0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003eb2:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eb4:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb8:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ebe:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8003ec0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ec4:	f042 0220 	orr.w	r2, r2, #32
 8003ec8:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eca:	680b      	ldr	r3, [r1, #0]
 8003ecc:	05dc      	lsls	r4, r3, #23
 8003ece:	d435      	bmi.n	8003f3c <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 8003ed0:	2003      	movs	r0, #3
}
 8003ed2:	b003      	add	sp, #12
 8003ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed8:	6963      	ldr	r3, [r4, #20]
 8003eda:	0798      	lsls	r0, r3, #30
 8003edc:	d4b3      	bmi.n	8003e46 <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ede:	6963      	ldr	r3, [r4, #20]
 8003ee0:	055a      	lsls	r2, r3, #21
 8003ee2:	d40a      	bmi.n	8003efa <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee4:	f7fe fe86 	bl	8002bf4 <HAL_GetTick>
 8003ee8:	eba0 000b 	sub.w	r0, r0, fp
 8003eec:	4581      	cmp	r9, r0
 8003eee:	d34e      	bcc.n	8003f8e <I2C_RequestMemoryWrite+0x18e>
 8003ef0:	f1b9 0f00 	cmp.w	r9, #0
 8003ef4:	d04b      	beq.n	8003f8e <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef6:	6834      	ldr	r4, [r6, #0]
 8003ef8:	e79b      	b.n	8003e32 <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f00:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f02:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f04:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f08:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f0a:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f0c:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f0e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f12:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f16:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003f18:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8003f20:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f22:	6433      	str	r3, [r6, #64]	; 0x40
}
 8003f24:	b003      	add	sp, #12
 8003f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f2a:	f1b8 0f01 	cmp.w	r8, #1
 8003f2e:	d109      	bne.n	8003f44 <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f30:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 8003f32:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f34:	6127      	str	r7, [r4, #16]
}
 8003f36:	b003      	add	sp, #12
 8003f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f40:	6433      	str	r3, [r6, #64]	; 0x40
 8003f42:	e7c5      	b.n	8003ed0 <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f44:	0a3b      	lsrs	r3, r7, #8
 8003f46:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f48:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003f4c:	d12e      	bne.n	8003fac <I2C_RequestMemoryWrite+0x1ac>
 8003f4e:	6963      	ldr	r3, [r4, #20]
 8003f50:	0619      	lsls	r1, r3, #24
 8003f52:	d4ed      	bmi.n	8003f30 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f54:	6963      	ldr	r3, [r4, #20]
 8003f56:	055a      	lsls	r2, r3, #21
 8003f58:	d5f9      	bpl.n	8003f4e <I2C_RequestMemoryWrite+0x14e>
 8003f5a:	e785      	b.n	8003e68 <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	6832      	ldr	r2, [r6, #0]
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8003f64:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	e7b3      	b.n	8003ed2 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f6a:	6963      	ldr	r3, [r4, #20]
 8003f6c:	061d      	lsls	r5, r3, #24
 8003f6e:	d4dc      	bmi.n	8003f2a <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f70:	6963      	ldr	r3, [r4, #20]
 8003f72:	0559      	lsls	r1, r3, #21
 8003f74:	f53f af78 	bmi.w	8003e68 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f78:	f7fe fe3c 	bl	8002bf4 <HAL_GetTick>
 8003f7c:	eba0 000b 	sub.w	r0, r0, fp
 8003f80:	4581      	cmp	r9, r0
 8003f82:	d325      	bcc.n	8003fd0 <I2C_RequestMemoryWrite+0x1d0>
 8003f84:	f1b9 0f00 	cmp.w	r9, #0
 8003f88:	d022      	beq.n	8003fd0 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f8a:	6834      	ldr	r4, [r6, #0]
 8003f8c:	e762      	b.n	8003e54 <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f90:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f92:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f94:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f98:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f9c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003f9e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa2:	f043 0320 	orr.w	r3, r3, #32
 8003fa6:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8003fa8:	2001      	movs	r0, #1
 8003faa:	e792      	b.n	8003ed2 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fac:	6963      	ldr	r3, [r4, #20]
 8003fae:	061b      	lsls	r3, r3, #24
 8003fb0:	d4be      	bmi.n	8003f30 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb2:	6963      	ldr	r3, [r4, #20]
 8003fb4:	0558      	lsls	r0, r3, #21
 8003fb6:	f53f af57 	bmi.w	8003e68 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fba:	f7fe fe1b 	bl	8002bf4 <HAL_GetTick>
 8003fbe:	eba0 000b 	sub.w	r0, r0, fp
 8003fc2:	4581      	cmp	r9, r0
 8003fc4:	d304      	bcc.n	8003fd0 <I2C_RequestMemoryWrite+0x1d0>
 8003fc6:	f1b9 0f00 	cmp.w	r9, #0
 8003fca:	d001      	beq.n	8003fd0 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fcc:	6834      	ldr	r4, [r6, #0]
 8003fce:	e7bb      	b.n	8003f48 <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fd2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd4:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fd6:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fda:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fde:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003fe0:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe4:	f043 0320 	orr.w	r3, r3, #32
 8003fe8:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003fea:	e74d      	b.n	8003e88 <I2C_RequestMemoryWrite+0x88>

08003fec <I2C_RequestMemoryRead>:
{
 8003fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff0:	6804      	ldr	r4, [r0, #0]
{
 8003ff2:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ffa:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ffc:	6823      	ldr	r3, [r4, #0]
{
 8003ffe:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8004004:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004008:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800400c:	6023      	str	r3, [r4, #0]
{
 800400e:	4606      	mov	r6, r0
 8004010:	468b      	mov	fp, r1
 8004012:	4617      	mov	r7, r2
 8004014:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004018:	d139      	bne.n	800408e <I2C_RequestMemoryRead+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800401a:	6965      	ldr	r5, [r4, #20]
 800401c:	07eb      	lsls	r3, r5, #31
 800401e:	d5fc      	bpl.n	800401a <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004020:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 8004024:	6123      	str	r3, [r4, #16]
 8004026:	fa5f fb8b 	uxtb.w	fp, fp
 800402a:	f1ba 3fff 	cmp.w	sl, #4294967295
 800402e:	d003      	beq.n	8004038 <I2C_RequestMemoryRead+0x4c>
 8004030:	e068      	b.n	8004104 <I2C_RequestMemoryRead+0x118>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004032:	6961      	ldr	r1, [r4, #20]
 8004034:	054a      	lsls	r2, r1, #21
 8004036:	d450      	bmi.n	80040da <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004038:	6961      	ldr	r1, [r4, #20]
 800403a:	0789      	lsls	r1, r1, #30
 800403c:	d5f9      	bpl.n	8004032 <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403e:	2300      	movs	r3, #0
 8004040:	9301      	str	r3, [sp, #4]
 8004042:	6963      	ldr	r3, [r4, #20]
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	69a3      	ldr	r3, [r4, #24]
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800404c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004050:	f040 80b8 	bne.w	80041c4 <I2C_RequestMemoryRead+0x1d8>
 8004054:	6963      	ldr	r3, [r4, #20]
 8004056:	0618      	lsls	r0, r3, #24
 8004058:	d467      	bmi.n	800412a <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800405a:	6963      	ldr	r3, [r4, #20]
 800405c:	0559      	lsls	r1, r3, #21
 800405e:	d5f9      	bpl.n	8004054 <I2C_RequestMemoryRead+0x68>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004060:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8004062:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004064:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004068:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800406a:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800406c:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004070:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004074:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004076:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004080:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8004082:	2b04      	cmp	r3, #4
 8004084:	d06c      	beq.n	8004160 <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 8004086:	2001      	movs	r0, #1
}
 8004088:	b003      	add	sp, #12
 800408a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800408e:	6963      	ldr	r3, [r4, #20]
 8004090:	07dd      	lsls	r5, r3, #31
 8004092:	d4c5      	bmi.n	8004020 <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004094:	f7fe fdae 	bl	8002bf4 <HAL_GetTick>
 8004098:	eba0 0009 	sub.w	r0, r0, r9
 800409c:	4582      	cmp	sl, r0
 800409e:	d304      	bcc.n	80040aa <I2C_RequestMemoryRead+0xbe>
 80040a0:	f1ba 0f00 	cmp.w	sl, #0
 80040a4:	d001      	beq.n	80040aa <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a6:	6834      	ldr	r4, [r6, #0]
 80040a8:	e7b4      	b.n	8004014 <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040aa:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80040ac:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040ae:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040b0:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040b4:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040b8:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ba:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 80040bc:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040c0:	f042 0220 	orr.w	r2, r2, #32
 80040c4:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040c6:	680b      	ldr	r3, [r1, #0]
 80040c8:	05dc      	lsls	r4, r3, #23
 80040ca:	d502      	bpl.n	80040d2 <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040d0:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 80040d2:	2003      	movs	r0, #3
}
 80040d4:	b003      	add	sp, #12
 80040d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e0:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040e2:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80040ea:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ec:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ee:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f2:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040f6:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80040f8:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040fc:	f043 0304 	orr.w	r3, r3, #4
 8004100:	6433      	str	r3, [r6, #64]	; 0x40
 8004102:	e7c0      	b.n	8004086 <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004104:	6963      	ldr	r3, [r4, #20]
 8004106:	079b      	lsls	r3, r3, #30
 8004108:	d499      	bmi.n	800403e <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800410a:	6963      	ldr	r3, [r4, #20]
 800410c:	0558      	lsls	r0, r3, #21
 800410e:	d4e4      	bmi.n	80040da <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004110:	f7fe fd70 	bl	8002bf4 <HAL_GetTick>
 8004114:	eba0 0009 	sub.w	r0, r0, r9
 8004118:	4582      	cmp	sl, r0
 800411a:	f0c0 808b 	bcc.w	8004234 <I2C_RequestMemoryRead+0x248>
 800411e:	f1ba 0f00 	cmp.w	sl, #0
 8004122:	f000 8087 	beq.w	8004234 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004126:	6834      	ldr	r4, [r6, #0]
 8004128:	e77f      	b.n	800402a <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800412a:	f1b8 0f01 	cmp.w	r8, #1
 800412e:	d10b      	bne.n	8004148 <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004130:	b2ff      	uxtb	r7, r7
 8004132:	6127      	str	r7, [r4, #16]
 8004134:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004138:	d16a      	bne.n	8004210 <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800413a:	6963      	ldr	r3, [r4, #20]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	d416      	bmi.n	800416e <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004140:	6963      	ldr	r3, [r4, #20]
 8004142:	055f      	lsls	r7, r3, #21
 8004144:	d5f9      	bpl.n	800413a <I2C_RequestMemoryRead+0x14e>
 8004146:	e78b      	b.n	8004060 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004148:	0a3b      	lsrs	r3, r7, #8
 800414a:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004150:	d17f      	bne.n	8004252 <I2C_RequestMemoryRead+0x266>
 8004152:	6963      	ldr	r3, [r4, #20]
 8004154:	061d      	lsls	r5, r3, #24
 8004156:	d4eb      	bmi.n	8004130 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004158:	6963      	ldr	r3, [r4, #20]
 800415a:	0558      	lsls	r0, r3, #21
 800415c:	d5f9      	bpl.n	8004152 <I2C_RequestMemoryRead+0x166>
 800415e:	e77f      	b.n	8004060 <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	6832      	ldr	r2, [r6, #0]
 8004162:	6813      	ldr	r3, [r2, #0]
 8004164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 8004168:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	e78c      	b.n	8004088 <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004176:	f1ba 3fff 	cmp.w	sl, #4294967295
 800417a:	d113      	bne.n	80041a4 <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800417c:	6963      	ldr	r3, [r4, #20]
 800417e:	07d8      	lsls	r0, r3, #31
 8004180:	d5fc      	bpl.n	800417c <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004182:	f04b 0301 	orr.w	r3, fp, #1
 8004186:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004188:	f1ba 3fff 	cmp.w	sl, #4294967295
 800418c:	d003      	beq.n	8004196 <I2C_RequestMemoryRead+0x1aa>
 800418e:	e02b      	b.n	80041e8 <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004190:	6963      	ldr	r3, [r4, #20]
 8004192:	055b      	lsls	r3, r3, #21
 8004194:	d4a1      	bmi.n	80040da <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004196:	6963      	ldr	r3, [r4, #20]
 8004198:	43db      	mvns	r3, r3
 800419a:	f013 0302 	ands.w	r3, r3, #2
 800419e:	d1f7      	bne.n	8004190 <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 80041a0:	4618      	mov	r0, r3
 80041a2:	e771      	b.n	8004088 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041a4:	6963      	ldr	r3, [r4, #20]
 80041a6:	07d9      	lsls	r1, r3, #31
 80041a8:	d4eb      	bmi.n	8004182 <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fe fd23 	bl	8002bf4 <HAL_GetTick>
 80041ae:	eba0 0009 	sub.w	r0, r0, r9
 80041b2:	4582      	cmp	sl, r0
 80041b4:	f4ff af79 	bcc.w	80040aa <I2C_RequestMemoryRead+0xbe>
 80041b8:	f1ba 0f00 	cmp.w	sl, #0
 80041bc:	f43f af75 	beq.w	80040aa <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041c0:	6834      	ldr	r4, [r6, #0]
 80041c2:	e7d8      	b.n	8004176 <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c4:	6963      	ldr	r3, [r4, #20]
 80041c6:	061a      	lsls	r2, r3, #24
 80041c8:	d4af      	bmi.n	800412a <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041ca:	6963      	ldr	r3, [r4, #20]
 80041cc:	055d      	lsls	r5, r3, #21
 80041ce:	f53f af47 	bmi.w	8004060 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fe fd0f 	bl	8002bf4 <HAL_GetTick>
 80041d6:	eba0 0009 	sub.w	r0, r0, r9
 80041da:	4582      	cmp	sl, r0
 80041dc:	d34c      	bcc.n	8004278 <I2C_RequestMemoryRead+0x28c>
 80041de:	f1ba 0f00 	cmp.w	sl, #0
 80041e2:	d049      	beq.n	8004278 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041e4:	6834      	ldr	r4, [r6, #0]
 80041e6:	e731      	b.n	800404c <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041e8:	6963      	ldr	r3, [r4, #20]
 80041ea:	43db      	mvns	r3, r3
 80041ec:	f013 0302 	ands.w	r3, r3, #2
 80041f0:	d0d6      	beq.n	80041a0 <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f2:	6963      	ldr	r3, [r4, #20]
 80041f4:	055a      	lsls	r2, r3, #21
 80041f6:	f53f af70 	bmi.w	80040da <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7fe fcfb 	bl	8002bf4 <HAL_GetTick>
 80041fe:	eba0 0009 	sub.w	r0, r0, r9
 8004202:	4582      	cmp	sl, r0
 8004204:	d316      	bcc.n	8004234 <I2C_RequestMemoryRead+0x248>
 8004206:	f1ba 0f00 	cmp.w	sl, #0
 800420a:	d013      	beq.n	8004234 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800420c:	6834      	ldr	r4, [r6, #0]
 800420e:	e7bb      	b.n	8004188 <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004210:	6963      	ldr	r3, [r4, #20]
 8004212:	061d      	lsls	r5, r3, #24
 8004214:	d4ab      	bmi.n	800416e <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004216:	6963      	ldr	r3, [r4, #20]
 8004218:	055a      	lsls	r2, r3, #21
 800421a:	f53f af21 	bmi.w	8004060 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421e:	f7fe fce9 	bl	8002bf4 <HAL_GetTick>
 8004222:	eba0 0009 	sub.w	r0, r0, r9
 8004226:	4582      	cmp	sl, r0
 8004228:	d326      	bcc.n	8004278 <I2C_RequestMemoryRead+0x28c>
 800422a:	f1ba 0f00 	cmp.w	sl, #0
 800422e:	d023      	beq.n	8004278 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004230:	6834      	ldr	r4, [r6, #0]
 8004232:	e77f      	b.n	8004134 <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004234:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004236:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004238:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800423a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800423e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004242:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004244:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004248:	f043 0320 	orr.w	r3, r3, #32
 800424c:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 800424e:	2001      	movs	r0, #1
 8004250:	e71a      	b.n	8004088 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004252:	6963      	ldr	r3, [r4, #20]
 8004254:	0619      	lsls	r1, r3, #24
 8004256:	f53f af6b 	bmi.w	8004130 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800425a:	6963      	ldr	r3, [r4, #20]
 800425c:	055b      	lsls	r3, r3, #21
 800425e:	f53f aeff 	bmi.w	8004060 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004262:	f7fe fcc7 	bl	8002bf4 <HAL_GetTick>
 8004266:	eba0 0009 	sub.w	r0, r0, r9
 800426a:	4582      	cmp	sl, r0
 800426c:	d304      	bcc.n	8004278 <I2C_RequestMemoryRead+0x28c>
 800426e:	f1ba 0f00 	cmp.w	sl, #0
 8004272:	d001      	beq.n	8004278 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004274:	6834      	ldr	r4, [r6, #0]
 8004276:	e769      	b.n	800414c <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004278:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800427a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800427c:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800427e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004282:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004286:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004288:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800428c:	f043 0320 	orr.w	r3, r3, #32
 8004290:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8004292:	e6f5      	b.n	8004080 <I2C_RequestMemoryRead+0x94>

08004294 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004294:	2800      	cmp	r0, #0
 8004296:	f000 80b9 	beq.w	800440c <HAL_I2C_Init+0x178>
{
 800429a:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800429c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042a0:	4604      	mov	r4, r0
 80042a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 8098 	beq.w	80043dc <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 80042ac:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ae:	2224      	movs	r2, #36	; 0x24
 80042b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ca:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042cc:	f001 fa48 	bl	8005760 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	494f      	ldr	r1, [pc, #316]	; (8004410 <HAL_I2C_Init+0x17c>)
 80042d4:	428b      	cmp	r3, r1
 80042d6:	d84f      	bhi.n	8004378 <HAL_I2C_Init+0xe4>
 80042d8:	4a4e      	ldr	r2, [pc, #312]	; (8004414 <HAL_I2C_Init+0x180>)
 80042da:	4290      	cmp	r0, r2
 80042dc:	d97c      	bls.n	80043d8 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80042de:	4d4e      	ldr	r5, [pc, #312]	; (8004418 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e0:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80042e2:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e6:	1e43      	subs	r3, r0, #1
 80042e8:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042ec:	6822      	ldr	r2, [r4, #0]
 80042ee:	6850      	ldr	r0, [r2, #4]
 80042f0:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80042f4:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 80042f8:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80042fa:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042fc:	f101 0c01 	add.w	ip, r1, #1
 8004300:	6a11      	ldr	r1, [r2, #32]
 8004302:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004306:	ea41 010c 	orr.w	r1, r1, ip
 800430a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800430c:	69d1      	ldr	r1, [r2, #28]
 800430e:	f640 7efc 	movw	lr, #4092	; 0xffc
 8004312:	3301      	adds	r3, #1
 8004314:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004318:	ea13 0f0e 	tst.w	r3, lr
 800431c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004320:	d161      	bne.n	80043e6 <HAL_I2C_Init+0x152>
 8004322:	2304      	movs	r3, #4
 8004324:	430b      	orrs	r3, r1
 8004326:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004328:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800432c:	6811      	ldr	r1, [r2, #0]
 800432e:	4303      	orrs	r3, r0
 8004330:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8004334:	430b      	orrs	r3, r1
 8004336:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004338:	6891      	ldr	r1, [r2, #8]
 800433a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800433e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8004342:	4303      	orrs	r3, r0
 8004344:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004348:	430b      	orrs	r3, r1
 800434a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800434c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8004350:	68d1      	ldr	r1, [r2, #12]
 8004352:	4303      	orrs	r3, r0
 8004354:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004358:	430b      	orrs	r3, r1
 800435a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800435c:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800435e:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8004360:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8004364:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8004366:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004368:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800436a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800436e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004370:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8004374:	4618      	mov	r0, r3
}
 8004376:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <HAL_I2C_Init+0x188>)
 800437a:	4290      	cmp	r0, r2
 800437c:	d92c      	bls.n	80043d8 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800437e:	4d26      	ldr	r5, [pc, #152]	; (8004418 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004380:	4e27      	ldr	r6, [pc, #156]	; (8004420 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8004382:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004386:	6822      	ldr	r2, [r4, #0]
 8004388:	6855      	ldr	r5, [r2, #4]
 800438a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800438e:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8004392:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004394:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004398:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800439c:	fb05 f101 	mul.w	r1, r5, r1
 80043a0:	fba6 5101 	umull	r5, r1, r6, r1
 80043a4:	6a15      	ldr	r5, [r2, #32]
 80043a6:	0989      	lsrs	r1, r1, #6
 80043a8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80043ac:	3101      	adds	r1, #1
 80043ae:	4329      	orrs	r1, r5
 80043b0:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043b2:	69d1      	ldr	r1, [r2, #28]
 80043b4:	68a5      	ldr	r5, [r4, #8]
 80043b6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80043ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80043be:	b9ad      	cbnz	r5, 80043ec <HAL_I2C_Init+0x158>
 80043c0:	3801      	subs	r0, #1
 80043c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80043c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ca:	3301      	adds	r3, #1
 80043cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d0:	b1d3      	cbz	r3, 8004408 <HAL_I2C_Init+0x174>
 80043d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d6:	e7a5      	b.n	8004324 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80043d8:	2001      	movs	r0, #1
}
 80043da:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80043dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80043e0:	f7fc fbfe 	bl	8000be0 <HAL_I2C_MspInit>
 80043e4:	e762      	b.n	80042ac <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ea:	e79b      	b.n	8004324 <HAL_I2C_Init+0x90>
 80043ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043f0:	3801      	subs	r0, #1
 80043f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	b113      	cbz	r3, 8004408 <HAL_I2C_Init+0x174>
 8004402:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004406:	e78d      	b.n	8004324 <HAL_I2C_Init+0x90>
 8004408:	2301      	movs	r3, #1
 800440a:	e78b      	b.n	8004324 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 800440c:	2001      	movs	r0, #1
}
 800440e:	4770      	bx	lr
 8004410:	000186a0 	.word	0x000186a0
 8004414:	001e847f 	.word	0x001e847f
 8004418:	431bde83 	.word	0x431bde83
 800441c:	003d08ff 	.word	0x003d08ff
 8004420:	10624dd3 	.word	0x10624dd3

08004424 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8004424:	b1b0      	cbz	r0, 8004454 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8004426:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004428:	2324      	movs	r3, #36	; 0x24
{
 800442a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800442c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004430:	6813      	ldr	r3, [r2, #0]
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	4604      	mov	r4, r0
 8004438:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800443a:	f7fc fc4d 	bl	8000cd8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800443e:	2300      	movs	r3, #0
 8004440:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8004442:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004446:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800444a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800444c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8004450:	4618      	mov	r0, r3
}
 8004452:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004454:	2001      	movs	r0, #1
}
 8004456:	4770      	bx	lr

08004458 <HAL_I2C_Master_Receive>:
{
 8004458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445c:	4605      	mov	r5, r0
 800445e:	b087      	sub	sp, #28
 8004460:	4699      	mov	r9, r3
 8004462:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8004464:	4688      	mov	r8, r1
 8004466:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8004468:	f7fe fbc4 	bl	8002bf4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800446c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8004470:	2b20      	cmp	r3, #32
 8004472:	d003      	beq.n	800447c <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 8004474:	2002      	movs	r0, #2
}
 8004476:	b007      	add	sp, #28
 8004478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447c:	4607      	mov	r7, r0
 800447e:	e005      	b.n	800448c <HAL_I2C_Master_Receive+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004480:	f7fe fbb8 	bl	8002bf4 <HAL_GetTick>
 8004484:	1bc0      	subs	r0, r0, r7
 8004486:	2819      	cmp	r0, #25
 8004488:	f200 80a7 	bhi.w	80045da <HAL_I2C_Master_Receive+0x182>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448c:	682c      	ldr	r4, [r5, #0]
 800448e:	69a0      	ldr	r0, [r4, #24]
 8004490:	43c0      	mvns	r0, r0
 8004492:	f010 0b02 	ands.w	fp, r0, #2
 8004496:	d0f3      	beq.n	8004480 <HAL_I2C_Master_Receive+0x28>
    __HAL_LOCK(hi2c);
 8004498:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d0e9      	beq.n	8004474 <HAL_I2C_Master_Receive+0x1c>
 80044a0:	2301      	movs	r3, #1
 80044a2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	07db      	lsls	r3, r3, #31
 80044aa:	d560      	bpl.n	800456e <HAL_I2C_Master_Receive+0x116>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ac:	6823      	ldr	r3, [r4, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ae:	4a8d      	ldr	r2, [pc, #564]	; (80046e4 <HAL_I2C_Master_Receive+0x28c>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b4:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044b6:	2322      	movs	r3, #34	; 0x22
 80044b8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044bc:	2310      	movs	r3, #16
 80044be:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 80044c6:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ca:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044cc:	62ea      	str	r2, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80044d0:	852b      	strh	r3, [r5, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr    = pData;
 80044d4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044dc:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044de:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044e0:	d007      	beq.n	80044f2 <HAL_I2C_Master_Receive+0x9a>
 80044e2:	2a01      	cmp	r2, #1
 80044e4:	d005      	beq.n	80044f2 <HAL_I2C_Master_Receive+0x9a>
 80044e6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80044ea:	d002      	beq.n	80044f2 <HAL_I2C_Master_Receive+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80044ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80044ee:	2b11      	cmp	r3, #17
 80044f0:	d103      	bne.n	80044fa <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	1c70      	adds	r0, r6, #1
 80044fc:	d129      	bne.n	8004552 <HAL_I2C_Master_Receive+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044fe:	6963      	ldr	r3, [r4, #20]
 8004500:	07d9      	lsls	r1, r3, #31
 8004502:	d5fc      	bpl.n	80044fe <HAL_I2C_Master_Receive+0xa6>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004504:	692b      	ldr	r3, [r5, #16]
 8004506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800450a:	d135      	bne.n	8004578 <HAL_I2C_Master_Receive+0x120>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800450c:	f048 0301 	orr.w	r3, r8, #1
 8004510:	b2db      	uxtb	r3, r3
 8004512:	6123      	str	r3, [r4, #16]
 8004514:	1c72      	adds	r2, r6, #1
 8004516:	d003      	beq.n	8004520 <HAL_I2C_Master_Receive+0xc8>
 8004518:	e107      	b.n	800472a <HAL_I2C_Master_Receive+0x2d2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800451a:	6963      	ldr	r3, [r4, #20]
 800451c:	0558      	lsls	r0, r3, #21
 800451e:	d46a      	bmi.n	80045f6 <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004520:	6963      	ldr	r3, [r4, #20]
 8004522:	079b      	lsls	r3, r3, #30
 8004524:	d5f9      	bpl.n	800451a <HAL_I2C_Master_Receive+0xc2>
    if (hi2c->XferSize == 0U)
 8004526:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d17c      	bne.n	8004626 <HAL_I2C_Master_Receive+0x1ce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	6963      	ldr	r3, [r4, #20]
 8004530:	9301      	str	r3, [sp, #4]
 8004532:	69a3      	ldr	r3, [r4, #24]
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800453e:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004540:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004542:	2320      	movs	r3, #32
 8004544:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004548:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800454c:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8004550:	e791      	b.n	8004476 <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004552:	6963      	ldr	r3, [r4, #20]
 8004554:	07da      	lsls	r2, r3, #31
 8004556:	d4d5      	bmi.n	8004504 <HAL_I2C_Master_Receive+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004558:	f7fe fb4c 	bl	8002bf4 <HAL_GetTick>
 800455c:	1bc0      	subs	r0, r0, r7
 800455e:	4286      	cmp	r6, r0
 8004560:	f0c0 810c 	bcc.w	800477c <HAL_I2C_Master_Receive+0x324>
 8004564:	2e00      	cmp	r6, #0
 8004566:	f000 8109 	beq.w	800477c <HAL_I2C_Master_Receive+0x324>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800456a:	682c      	ldr	r4, [r5, #0]
 800456c:	e7c5      	b.n	80044fa <HAL_I2C_Master_Receive+0xa2>
      __HAL_I2C_ENABLE(hi2c);
 800456e:	6823      	ldr	r3, [r4, #0]
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	e799      	b.n	80044ac <HAL_I2C_Master_Receive+0x54>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004578:	ea4f 19e8 	mov.w	r9, r8, asr #7
 800457c:	f009 0906 	and.w	r9, r9, #6
 8004580:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 8004584:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8004586:	1c70      	adds	r0, r6, #1
 8004588:	d003      	beq.n	8004592 <HAL_I2C_Master_Receive+0x13a>
 800458a:	e11d      	b.n	80047c8 <HAL_I2C_Master_Receive+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800458c:	6963      	ldr	r3, [r4, #20]
 800458e:	055a      	lsls	r2, r3, #21
 8004590:	d431      	bmi.n	80045f6 <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004592:	6963      	ldr	r3, [r4, #20]
 8004594:	0719      	lsls	r1, r3, #28
 8004596:	d5f9      	bpl.n	800458c <HAL_I2C_Master_Receive+0x134>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004598:	fa5f f388 	uxtb.w	r3, r8
 800459c:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800459e:	1c71      	adds	r1, r6, #1
 80045a0:	d003      	beq.n	80045aa <HAL_I2C_Master_Receive+0x152>
 80045a2:	e1a6      	b.n	80048f2 <HAL_I2C_Master_Receive+0x49a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a4:	6963      	ldr	r3, [r4, #20]
 80045a6:	055b      	lsls	r3, r3, #21
 80045a8:	d425      	bmi.n	80045f6 <HAL_I2C_Master_Receive+0x19e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045aa:	6963      	ldr	r3, [r4, #20]
 80045ac:	079a      	lsls	r2, r3, #30
 80045ae:	d5f9      	bpl.n	80045a4 <HAL_I2C_Master_Receive+0x14c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b0:	2300      	movs	r3, #0
 80045b2:	9305      	str	r3, [sp, #20]
 80045b4:	6963      	ldr	r3, [r4, #20]
 80045b6:	9305      	str	r3, [sp, #20]
 80045b8:	69a3      	ldr	r3, [r4, #24]
 80045ba:	9305      	str	r3, [sp, #20]
 80045bc:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c4:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80045c6:	1c72      	adds	r2, r6, #1
 80045c8:	f040 81a6 	bne.w	8004918 <HAL_I2C_Master_Receive+0x4c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045cc:	6963      	ldr	r3, [r4, #20]
 80045ce:	07db      	lsls	r3, r3, #31
 80045d0:	d5fc      	bpl.n	80045cc <HAL_I2C_Master_Receive+0x174>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80045d2:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 80045d6:	6123      	str	r3, [r4, #16]
 80045d8:	e79c      	b.n	8004514 <HAL_I2C_Master_Receive+0xbc>
        hi2c->State             = HAL_I2C_STATE_READY;
 80045da:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045dc:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045e0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045e4:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045e8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80045ea:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045ee:	f043 0320 	orr.w	r3, r3, #32
 80045f2:	642b      	str	r3, [r5, #64]	; 0x40
 80045f4:	e73e      	b.n	8004474 <HAL_I2C_Master_Receive+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045fc:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045fe:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004600:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8004604:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004606:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004608:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800460a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004612:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004614:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004618:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 800461c:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800461e:	642b      	str	r3, [r5, #64]	; 0x40
}
 8004620:	b007      	add	sp, #28
 8004622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 8004626:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004628:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 800462a:	f000 8153 	beq.w	80048d4 <HAL_I2C_Master_Receive+0x47c>
    else if (hi2c->XferSize == 2U)
 800462e:	2b02      	cmp	r3, #2
 8004630:	f000 810b 	beq.w	800484a <HAL_I2C_Master_Receive+0x3f2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004638:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463a:	2200      	movs	r2, #0
 800463c:	9204      	str	r2, [sp, #16]
 800463e:	6962      	ldr	r2, [r4, #20]
 8004640:	9204      	str	r2, [sp, #16]
 8004642:	69a2      	ldr	r2, [r4, #24]
 8004644:	9204      	str	r2, [sp, #16]
 8004646:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 8004648:	2b03      	cmp	r3, #3
 800464a:	d848      	bhi.n	80046de <HAL_I2C_Master_Receive+0x286>
        if (hi2c->XferSize == 1U)
 800464c:	2b01      	cmp	r3, #1
 800464e:	f000 8128 	beq.w	80048a2 <HAL_I2C_Master_Receive+0x44a>
        else if (hi2c->XferSize == 2U)
 8004652:	2b02      	cmp	r3, #2
 8004654:	f000 80d4 	beq.w	8004800 <HAL_I2C_Master_Receive+0x3a8>
 8004658:	1c72      	adds	r2, r6, #1
 800465a:	f040 8105 	bne.w	8004868 <HAL_I2C_Master_Receive+0x410>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800465e:	6963      	ldr	r3, [r4, #20]
 8004660:	075b      	lsls	r3, r3, #29
 8004662:	d5fc      	bpl.n	800465e <HAL_I2C_Master_Receive+0x206>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004664:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004666:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800466c:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466e:	6923      	ldr	r3, [r4, #16]
 8004670:	7013      	strb	r3, [r2, #0]
          hi2c->XferCount--;
 8004672:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004674:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8004676:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8004678:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800467a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800467c:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800467e:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004680:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8004682:	852a      	strh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8004684:	856b      	strh	r3, [r5, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004686:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004688:	682a      	ldr	r2, [r5, #0]
 800468a:	f040 80fc 	bne.w	8004886 <HAL_I2C_Master_Receive+0x42e>
 800468e:	6953      	ldr	r3, [r2, #20]
 8004690:	075b      	lsls	r3, r3, #29
 8004692:	d5fc      	bpl.n	800468e <HAL_I2C_Master_Receive+0x236>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004694:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004696:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800469c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469e:	6913      	ldr	r3, [r2, #16]
 80046a0:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80046a2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80046a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80046a6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	6828      	ldr	r0, [r5, #0]
          hi2c->XferCount--;
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b0:	6900      	ldr	r0, [r0, #16]
          hi2c->XferSize--;
 80046b2:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 80046b4:	1c4c      	adds	r4, r1, #1
 80046b6:	626c      	str	r4, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80046b8:	852b      	strh	r3, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	7048      	strb	r0, [r1, #1]
          hi2c->XferSize--;
 80046bc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80046be:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80046c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80046c2:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 80046c4:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 80046c6:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80046c8:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 80046ca:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 80046cc:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80046ce:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 80046d0:	856a      	strh	r2, [r5, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f43f af34 	beq.w	8004540 <HAL_I2C_Master_Receive+0xe8>
      if (hi2c->XferSize <= 3U)
 80046d8:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046da:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 80046dc:	d9b6      	bls.n	800464c <HAL_I2C_Master_Receive+0x1f4>
 80046de:	b966      	cbnz	r6, 80046fa <HAL_I2C_Master_Receive+0x2a2>
 80046e0:	e033      	b.n	800474a <HAL_I2C_Master_Receive+0x2f2>
 80046e2:	bf00      	nop
 80046e4:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046e8:	6963      	ldr	r3, [r4, #20]
 80046ea:	06db      	lsls	r3, r3, #27
 80046ec:	d45c      	bmi.n	80047a8 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ee:	f7fe fa81 	bl	8002bf4 <HAL_GetTick>
 80046f2:	1bc0      	subs	r0, r0, r7
 80046f4:	4286      	cmp	r6, r0
 80046f6:	d330      	bcc.n	800475a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f8:	682c      	ldr	r4, [r5, #0]
 80046fa:	6963      	ldr	r3, [r4, #20]
 80046fc:	065a      	lsls	r2, r3, #25
 80046fe:	d5f3      	bpl.n	80046e8 <HAL_I2C_Master_Receive+0x290>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004700:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004702:	6922      	ldr	r2, [r4, #16]
 8004704:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8004706:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004708:	6828      	ldr	r0, [r5, #0]
        hi2c->XferSize--;
 800470a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800470c:	6a69      	ldr	r1, [r5, #36]	; 0x24
        hi2c->XferCount--;
 800470e:	3a01      	subs	r2, #1
 8004710:	b292      	uxth	r2, r2
 8004712:	856a      	strh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004714:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 8004716:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8004718:	1c4c      	adds	r4, r1, #1
        hi2c->XferSize--;
 800471a:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800471c:	0752      	lsls	r2, r2, #29
        hi2c->pBuffPtr++;
 800471e:	626c      	str	r4, [r5, #36]	; 0x24
        hi2c->XferSize--;
 8004720:	852b      	strh	r3, [r5, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004722:	d5d6      	bpl.n	80046d2 <HAL_I2C_Master_Receive+0x27a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004724:	6903      	ldr	r3, [r0, #16]
 8004726:	704b      	strb	r3, [r1, #1]
 8004728:	e083      	b.n	8004832 <HAL_I2C_Master_Receive+0x3da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800472a:	6963      	ldr	r3, [r4, #20]
 800472c:	0799      	lsls	r1, r3, #30
 800472e:	f53f aefa 	bmi.w	8004526 <HAL_I2C_Master_Receive+0xce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004732:	6963      	ldr	r3, [r4, #20]
 8004734:	0559      	lsls	r1, r3, #21
 8004736:	f53f af5e 	bmi.w	80045f6 <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473a:	f7fe fa5b 	bl	8002bf4 <HAL_GetTick>
 800473e:	1bc0      	subs	r0, r0, r7
 8004740:	4286      	cmp	r6, r0
 8004742:	d30a      	bcc.n	800475a <HAL_I2C_Master_Receive+0x302>
 8004744:	b14e      	cbz	r6, 800475a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004746:	682c      	ldr	r4, [r5, #0]
 8004748:	e6e4      	b.n	8004514 <HAL_I2C_Master_Receive+0xbc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800474a:	6963      	ldr	r3, [r4, #20]
 800474c:	0659      	lsls	r1, r3, #25
 800474e:	d4d7      	bmi.n	8004700 <HAL_I2C_Master_Receive+0x2a8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004750:	6963      	ldr	r3, [r4, #20]
 8004752:	06d8      	lsls	r0, r3, #27
 8004754:	d428      	bmi.n	80047a8 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fe fa4d 	bl	8002bf4 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800475a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800475c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800475e:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004760:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004764:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004768:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800476a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800476e:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 8004772:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004774:	642b      	str	r3, [r5, #64]	; 0x40
}
 8004776:	b007      	add	sp, #28
 8004778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 800477c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800477e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004780:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004782:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004786:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800478a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800478c:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 800478e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004792:	f042 0220 	orr.w	r2, r2, #32
 8004796:	642a      	str	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004798:	680b      	ldr	r3, [r1, #0]
 800479a:	05d9      	lsls	r1, r3, #23
 800479c:	d512      	bpl.n	80047c4 <HAL_I2C_Master_Receive+0x36c>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800479e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047a2:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80047a4:	2001      	movs	r0, #1
 80047a6:	e666      	b.n	8004476 <HAL_I2C_Master_Receive+0x1e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047a8:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80047aa:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ac:	f06f 0110 	mvn.w	r1, #16
 80047b0:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047b2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047b4:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047bc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80047be:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80047c0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 80047c4:	2001      	movs	r0, #1
 80047c6:	e656      	b.n	8004476 <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047c8:	6963      	ldr	r3, [r4, #20]
 80047ca:	071b      	lsls	r3, r3, #28
 80047cc:	f53f aee4 	bmi.w	8004598 <HAL_I2C_Master_Receive+0x140>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047d0:	6963      	ldr	r3, [r4, #20]
 80047d2:	055b      	lsls	r3, r3, #21
 80047d4:	f53f af0f 	bmi.w	80045f6 <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d8:	f7fe fa0c 	bl	8002bf4 <HAL_GetTick>
 80047dc:	1bc0      	subs	r0, r0, r7
 80047de:	4286      	cmp	r6, r0
 80047e0:	d3bb      	bcc.n	800475a <HAL_I2C_Master_Receive+0x302>
 80047e2:	2e00      	cmp	r6, #0
 80047e4:	d0b9      	beq.n	800475a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047e6:	682c      	ldr	r4, [r5, #0]
 80047e8:	e6cd      	b.n	8004586 <HAL_I2C_Master_Receive+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ea:	6963      	ldr	r3, [r4, #20]
 80047ec:	0759      	lsls	r1, r3, #29
 80047ee:	d40c      	bmi.n	800480a <HAL_I2C_Master_Receive+0x3b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f0:	f7fe fa00 	bl	8002bf4 <HAL_GetTick>
 80047f4:	1bc0      	subs	r0, r0, r7
 80047f6:	4286      	cmp	r6, r0
 80047f8:	d3af      	bcc.n	800475a <HAL_I2C_Master_Receive+0x302>
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	d0ad      	beq.n	800475a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047fe:	682c      	ldr	r4, [r5, #0]
 8004800:	1c73      	adds	r3, r6, #1
 8004802:	d1f2      	bne.n	80047ea <HAL_I2C_Master_Receive+0x392>
 8004804:	6963      	ldr	r3, [r4, #20]
 8004806:	0758      	lsls	r0, r3, #29
 8004808:	d5fc      	bpl.n	8004804 <HAL_I2C_Master_Receive+0x3ac>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004810:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004812:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004814:	6922      	ldr	r2, [r4, #16]
 8004816:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004818:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800481a:	1c53      	adds	r3, r2, #1
 800481c:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 800481e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8004820:	3b01      	subs	r3, #1
 8004822:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8004824:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8004826:	3b01      	subs	r3, #1
 8004828:	b29b      	uxth	r3, r3
 800482a:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8004832:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8004834:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004836:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8004838:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 800483a:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 800483c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800483e:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8004840:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8004842:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferCount--;
 8004844:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 8004846:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8004848:	e743      	b.n	80046d2 <HAL_I2C_Master_Receive+0x27a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484e:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004856:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004858:	2200      	movs	r2, #0
 800485a:	9203      	str	r2, [sp, #12]
 800485c:	6962      	ldr	r2, [r4, #20]
 800485e:	9203      	str	r2, [sp, #12]
 8004860:	69a2      	ldr	r2, [r4, #24]
 8004862:	9203      	str	r2, [sp, #12]
 8004864:	9a03      	ldr	r2, [sp, #12]
 8004866:	e6ef      	b.n	8004648 <HAL_I2C_Master_Receive+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004868:	6963      	ldr	r3, [r4, #20]
 800486a:	0758      	lsls	r0, r3, #29
 800486c:	f53f aefa 	bmi.w	8004664 <HAL_I2C_Master_Receive+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004870:	f7fe f9c0 	bl	8002bf4 <HAL_GetTick>
 8004874:	1bc0      	subs	r0, r0, r7
 8004876:	4286      	cmp	r6, r0
 8004878:	f4ff af6f 	bcc.w	800475a <HAL_I2C_Master_Receive+0x302>
 800487c:	2e00      	cmp	r6, #0
 800487e:	f43f af6c 	beq.w	800475a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004882:	682c      	ldr	r4, [r5, #0]
 8004884:	e6e8      	b.n	8004658 <HAL_I2C_Master_Receive+0x200>
 8004886:	6953      	ldr	r3, [r2, #20]
 8004888:	075c      	lsls	r4, r3, #29
 800488a:	f53f af03 	bmi.w	8004694 <HAL_I2C_Master_Receive+0x23c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	f7fe f9b1 	bl	8002bf4 <HAL_GetTick>
 8004892:	1bc0      	subs	r0, r0, r7
 8004894:	4286      	cmp	r6, r0
 8004896:	f4ff af60 	bcc.w	800475a <HAL_I2C_Master_Receive+0x302>
 800489a:	2e00      	cmp	r6, #0
 800489c:	f47f aef3 	bne.w	8004686 <HAL_I2C_Master_Receive+0x22e>
 80048a0:	e75b      	b.n	800475a <HAL_I2C_Master_Receive+0x302>
 80048a2:	b95e      	cbnz	r6, 80048bc <HAL_I2C_Master_Receive+0x464>
 80048a4:	e011      	b.n	80048ca <HAL_I2C_Master_Receive+0x472>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048a6:	6963      	ldr	r3, [r4, #20]
 80048a8:	06d9      	lsls	r1, r3, #27
 80048aa:	f53f af7d 	bmi.w	80047a8 <HAL_I2C_Master_Receive+0x350>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ae:	f7fe f9a1 	bl	8002bf4 <HAL_GetTick>
 80048b2:	1bc0      	subs	r0, r0, r7
 80048b4:	4286      	cmp	r6, r0
 80048b6:	f4ff af50 	bcc.w	800475a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048ba:	682c      	ldr	r4, [r5, #0]
 80048bc:	6963      	ldr	r3, [r4, #20]
 80048be:	0658      	lsls	r0, r3, #25
 80048c0:	d5f1      	bpl.n	80048a6 <HAL_I2C_Master_Receive+0x44e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80048c4:	6922      	ldr	r2, [r4, #16]
 80048c6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80048c8:	e7b3      	b.n	8004832 <HAL_I2C_Master_Receive+0x3da>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048ca:	6963      	ldr	r3, [r4, #20]
 80048cc:	065a      	lsls	r2, r3, #25
 80048ce:	f57f af3f 	bpl.w	8004750 <HAL_I2C_Master_Receive+0x2f8>
 80048d2:	e7f6      	b.n	80048c2 <HAL_I2C_Master_Receive+0x46a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d8:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048da:	2200      	movs	r2, #0
 80048dc:	9202      	str	r2, [sp, #8]
 80048de:	6962      	ldr	r2, [r4, #20]
 80048e0:	9202      	str	r2, [sp, #8]
 80048e2:	69a2      	ldr	r2, [r4, #24]
 80048e4:	9202      	str	r2, [sp, #8]
 80048e6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	6822      	ldr	r2, [r4, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	6022      	str	r2, [r4, #0]
 80048f0:	e6aa      	b.n	8004648 <HAL_I2C_Master_Receive+0x1f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048f2:	6963      	ldr	r3, [r4, #20]
 80048f4:	0798      	lsls	r0, r3, #30
 80048f6:	f53f ae5b 	bmi.w	80045b0 <HAL_I2C_Master_Receive+0x158>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048fa:	6963      	ldr	r3, [r4, #20]
 80048fc:	0558      	lsls	r0, r3, #21
 80048fe:	f53f ae7a 	bmi.w	80045f6 <HAL_I2C_Master_Receive+0x19e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fe f977 	bl	8002bf4 <HAL_GetTick>
 8004906:	1bc0      	subs	r0, r0, r7
 8004908:	4286      	cmp	r6, r0
 800490a:	f4ff af26 	bcc.w	800475a <HAL_I2C_Master_Receive+0x302>
 800490e:	2e00      	cmp	r6, #0
 8004910:	f43f af23 	beq.w	800475a <HAL_I2C_Master_Receive+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004914:	682c      	ldr	r4, [r5, #0]
 8004916:	e642      	b.n	800459e <HAL_I2C_Master_Receive+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004918:	6963      	ldr	r3, [r4, #20]
 800491a:	07d8      	lsls	r0, r3, #31
 800491c:	f53f ae59 	bmi.w	80045d2 <HAL_I2C_Master_Receive+0x17a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004920:	f7fe f968 	bl	8002bf4 <HAL_GetTick>
 8004924:	1bc0      	subs	r0, r0, r7
 8004926:	4286      	cmp	r6, r0
 8004928:	f4ff af28 	bcc.w	800477c <HAL_I2C_Master_Receive+0x324>
 800492c:	2e00      	cmp	r6, #0
 800492e:	f43f af25 	beq.w	800477c <HAL_I2C_Master_Receive+0x324>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004932:	682c      	ldr	r4, [r5, #0]
 8004934:	e647      	b.n	80045c6 <HAL_I2C_Master_Receive+0x16e>
 8004936:	bf00      	nop

08004938 <HAL_I2C_Mem_Write>:
{
 8004938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	4604      	mov	r4, r0
 800493e:	b083      	sub	sp, #12
 8004940:	4699      	mov	r9, r3
 8004942:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8004946:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004948:	460f      	mov	r7, r1
 800494a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800494c:	f7fe f952 	bl	8002bf4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004950:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004954:	2b20      	cmp	r3, #32
 8004956:	d004      	beq.n	8004962 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8004958:	2702      	movs	r7, #2
}
 800495a:	4638      	mov	r0, r7
 800495c:	b003      	add	sp, #12
 800495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004962:	4605      	mov	r5, r0
 8004964:	e005      	b.n	8004972 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7fe f945 	bl	8002bf4 <HAL_GetTick>
 800496a:	1b40      	subs	r0, r0, r5
 800496c:	2819      	cmp	r0, #25
 800496e:	f200 80aa 	bhi.w	8004ac6 <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004972:	6820      	ldr	r0, [r4, #0]
 8004974:	6983      	ldr	r3, [r0, #24]
 8004976:	ea6f 0c03 	mvn.w	ip, r3
 800497a:	f01c 0b02 	ands.w	fp, ip, #2
 800497e:	d0f2      	beq.n	8004966 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8004980:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d0e7      	beq.n	8004958 <HAL_I2C_Mem_Write+0x20>
 8004988:	2301      	movs	r3, #1
 800498a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800498e:	6803      	ldr	r3, [r0, #0]
 8004990:	07db      	lsls	r3, r3, #31
 8004992:	d571      	bpl.n	8004a78 <HAL_I2C_Mem_Write+0x140>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004994:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004996:	6807      	ldr	r7, [r0, #0]
 8004998:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 800499c:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 800499e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80049a0:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049a2:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049a4:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049a8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049ac:	2040      	movs	r0, #64	; 0x40
 80049ae:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b2:	2000      	movs	r0, #0
 80049b4:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80049b6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049ba:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80049bc:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049be:	4857      	ldr	r0, [pc, #348]	; (8004b1c <HAL_I2C_Mem_Write+0x1e4>)
 80049c0:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049c2:	464b      	mov	r3, r9
 80049c4:	4642      	mov	r2, r8
 80049c6:	4620      	mov	r0, r4
 80049c8:	f7ff fa1a 	bl	8003e00 <I2C_RequestMemoryWrite>
 80049cc:	4607      	mov	r7, r0
 80049ce:	b9f8      	cbnz	r0, 8004a10 <HAL_I2C_Mem_Write+0xd8>
    while (hi2c->XferSize > 0U)
 80049d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80a0 	beq.w	8004b18 <HAL_I2C_Mem_Write+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	1c72      	adds	r2, r6, #1
 80049dc:	d158      	bne.n	8004a90 <HAL_I2C_Mem_Write+0x158>
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	0610      	lsls	r0, r2, #24
 80049e2:	d41a      	bmi.n	8004a1a <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	0551      	lsls	r1, r2, #21
 80049e8:	d5f9      	bpl.n	80049de <HAL_I2C_Mem_Write+0xa6>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80049ea:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ec:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80049f0:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f2:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80049f4:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049f6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049fa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004a00:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a04:	f043 0304 	orr.w	r3, r3, #4
 8004a08:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d038      	beq.n	8004a82 <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 8004a10:	2701      	movs	r7, #1
}
 8004a12:	4638      	mov	r0, r7
 8004a14:	b003      	add	sp, #12
 8004a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004a1e:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a22:	4661      	mov	r1, ip
      hi2c->XferSize--;
 8004a24:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a2c:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8004a2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004a30:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004a32:	3a01      	subs	r2, #1
 8004a34:	b292      	uxth	r2, r2
 8004a36:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004a38:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a3a:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8004a3c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a3e:	0740      	lsls	r0, r0, #29
 8004a40:	d517      	bpl.n	8004a72 <HAL_I2C_Mem_Write+0x13a>
 8004a42:	b942      	cbnz	r2, 8004a56 <HAL_I2C_Mem_Write+0x11e>
 8004a44:	1c72      	adds	r2, r6, #1
 8004a46:	d159      	bne.n	8004afc <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	0750      	lsls	r0, r2, #29
 8004a4c:	d449      	bmi.n	8004ae2 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	0551      	lsls	r1, r2, #21
 8004a52:	d5f9      	bpl.n	8004a48 <HAL_I2C_Mem_Write+0x110>
 8004a54:	e7c9      	b.n	80049ea <HAL_I2C_Mem_Write+0xb2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a56:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8004a5a:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 8004a5c:	f10c 0102 	add.w	r1, ip, #2
 8004a60:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004a62:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004a64:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 8004a68:	3901      	subs	r1, #1
        hi2c->XferSize--;
 8004a6a:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8004a6c:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8004a6e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004a70:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	d1b1      	bne.n	80049da <HAL_I2C_Mem_Write+0xa2>
 8004a76:	e7e5      	b.n	8004a44 <HAL_I2C_Mem_Write+0x10c>
      __HAL_I2C_ENABLE(hi2c);
 8004a78:	6803      	ldr	r3, [r0, #0]
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	6003      	str	r3, [r0, #0]
 8004a80:	e788      	b.n	8004994 <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a82:	6822      	ldr	r2, [r4, #0]
 8004a84:	6813      	ldr	r3, [r2, #0]
 8004a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8004a8a:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e764      	b.n	800495a <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	0612      	lsls	r2, r2, #24
 8004a94:	d4c1      	bmi.n	8004a1a <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	0551      	lsls	r1, r2, #21
 8004a9a:	d4a6      	bmi.n	80049ea <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9c:	f7fe f8aa 	bl	8002bf4 <HAL_GetTick>
 8004aa0:	1b40      	subs	r0, r0, r5
 8004aa2:	4286      	cmp	r6, r0
 8004aa4:	d301      	bcc.n	8004aaa <HAL_I2C_Mem_Write+0x172>
 8004aa6:	2e00      	cmp	r6, #0
 8004aa8:	d196      	bne.n	80049d8 <HAL_I2C_Mem_Write+0xa0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aaa:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004aac:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aae:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ab0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ab4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004aba:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004abe:	f043 0320 	orr.w	r3, r3, #32
 8004ac2:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004ac4:	e7a1      	b.n	8004a0a <HAL_I2C_Mem_Write+0xd2>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ac6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ac8:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004acc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ad0:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004ad6:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ada:	f043 0320 	orr.w	r3, r3, #32
 8004ade:	6423      	str	r3, [r4, #64]	; 0x40
 8004ae0:	e73a      	b.n	8004958 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae4:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8004aea:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aec:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004af2:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8004afa:	e72e      	b.n	800495a <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	0752      	lsls	r2, r2, #29
 8004b00:	d4ef      	bmi.n	8004ae2 <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	0551      	lsls	r1, r2, #21
 8004b06:	f53f af70 	bmi.w	80049ea <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0a:	f7fe f873 	bl	8002bf4 <HAL_GetTick>
 8004b0e:	1b40      	subs	r0, r0, r5
 8004b10:	4286      	cmp	r6, r0
 8004b12:	d3ca      	bcc.n	8004aaa <HAL_I2C_Mem_Write+0x172>
 8004b14:	2e00      	cmp	r6, #0
 8004b16:	d0c8      	beq.n	8004aaa <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	e793      	b.n	8004a44 <HAL_I2C_Mem_Write+0x10c>
 8004b1c:	ffff0000 	.word	0xffff0000

08004b20 <HAL_I2C_Mem_Read>:
{
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	4604      	mov	r4, r0
 8004b26:	b087      	sub	sp, #28
 8004b28:	4699      	mov	r9, r3
 8004b2a:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8004b2e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004b30:	460f      	mov	r7, r1
 8004b32:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8004b34:	f7fe f85e 	bl	8002bf4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b38:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d004      	beq.n	8004b4a <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8004b40:	2702      	movs	r7, #2
}
 8004b42:	4638      	mov	r0, r7
 8004b44:	b007      	add	sp, #28
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	e005      	b.n	8004b5a <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fe f851 	bl	8002bf4 <HAL_GetTick>
 8004b52:	1b80      	subs	r0, r0, r6
 8004b54:	2819      	cmp	r0, #25
 8004b56:	f200 80d2 	bhi.w	8004cfe <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b5a:	f8d4 c000 	ldr.w	ip, [r4]
 8004b5e:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8004b62:	43c0      	mvns	r0, r0
 8004b64:	f010 0b02 	ands.w	fp, r0, #2
 8004b68:	d0f1      	beq.n	8004b4e <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8004b6a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d0e6      	beq.n	8004b40 <HAL_I2C_Mem_Read+0x20>
 8004b72:	2301      	movs	r3, #1
 8004b74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b78:	f8dc 3000 	ldr.w	r3, [ip]
 8004b7c:	07d9      	lsls	r1, r3, #31
 8004b7e:	d537      	bpl.n	8004bf0 <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b80:	f8dc 0000 	ldr.w	r0, [ip]
 8004b84:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8004b88:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 8004b8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004b8e:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b90:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b92:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b96:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b9a:	2040      	movs	r0, #64	; 0x40
 8004b9c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004ba4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ba8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004baa:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bac:	4893      	ldr	r0, [pc, #588]	; (8004dfc <HAL_I2C_Mem_Read+0x2dc>)
 8004bae:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7ff fa18 	bl	8003fec <I2C_RequestMemoryRead>
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f040 80ab 	bne.w	8004d1a <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 8004bc4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004bc6:	b9d2      	cbnz	r2, 8004bfe <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	9002      	str	r0, [sp, #8]
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	9202      	str	r2, [sp, #8]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	9202      	str	r2, [sp, #8]
 8004bd4:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bdc:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bde:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	2220      	movs	r2, #32
 8004be2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004be6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8004bee:	e7a8      	b.n	8004b42 <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 8004bf0:	f8dc 3000 	ldr.w	r3, [ip]
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	f8cc 3000 	str.w	r3, [ip]
 8004bfc:	e7c0      	b.n	8004b80 <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8004bfe:	2a01      	cmp	r2, #1
 8004c00:	f000 812c 	beq.w	8004e5c <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 8004c04:	2a02      	cmp	r2, #2
 8004c06:	f000 80bd 	beq.w	8004d84 <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	9005      	str	r0, [sp, #20]
 8004c0e:	6959      	ldr	r1, [r3, #20]
 8004c10:	9105      	str	r1, [sp, #20]
 8004c12:	6999      	ldr	r1, [r3, #24]
 8004c14:	9105      	str	r1, [sp, #20]
 8004c16:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8004c18:	2a03      	cmp	r2, #3
 8004c1a:	d849      	bhi.n	8004cb0 <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 8004c1c:	2a01      	cmp	r2, #1
 8004c1e:	f000 80eb 	beq.w	8004df8 <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 8004c22:	2a02      	cmp	r2, #2
 8004c24:	f000 8089 	beq.w	8004d3a <HAL_I2C_Mem_Read+0x21a>
 8004c28:	1c69      	adds	r1, r5, #1
 8004c2a:	f040 80bb 	bne.w	8004da4 <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	0752      	lsls	r2, r2, #29
 8004c32:	d5fc      	bpl.n	8004c2e <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c34:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c36:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004c42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004c44:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004c46:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004c48:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8004c4a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8004c4c:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8004c4e:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004c50:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004c52:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004c54:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8004c56:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c58:	6822      	ldr	r2, [r4, #0]
 8004c5a:	f040 80af 	bne.w	8004dbc <HAL_I2C_Mem_Read+0x29c>
 8004c5e:	6953      	ldr	r3, [r2, #20]
 8004c60:	075b      	lsls	r3, r3, #29
 8004c62:	d5fc      	bpl.n	8004c5e <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c64:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c66:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c6c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6e:	6913      	ldr	r3, [r2, #16]
 8004c70:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8004c72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8004c74:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004c76:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c78:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c80:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8004c82:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8004c84:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8004c88:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004c8a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8e:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8004c90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004c92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004c94:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004c96:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8004c98:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8004c9a:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8004c9c:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8004c9e:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8004ca0:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004ca2:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004ca4:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ca6:	2a00      	cmp	r2, #0
 8004ca8:	d099      	beq.n	8004bde <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8004caa:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cac:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8004cae:	d9b5      	bls.n	8004c1c <HAL_I2C_Mem_Read+0xfc>
 8004cb0:	b95d      	cbnz	r5, 8004cca <HAL_I2C_Mem_Read+0x1aa>
 8004cb2:	e0c5      	b.n	8004e40 <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	06d0      	lsls	r0, r2, #27
 8004cb8:	f100 80b2 	bmi.w	8004e20 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbc:	f7fd ff9a 	bl	8002bf4 <HAL_GetTick>
 8004cc0:	1b80      	subs	r0, r0, r6
 8004cc2:	4285      	cmp	r5, r0
 8004cc4:	f0c0 8086 	bcc.w	8004dd4 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	695a      	ldr	r2, [r3, #20]
 8004ccc:	0652      	lsls	r2, r2, #25
 8004cce:	d5f1      	bpl.n	8004cb4 <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8004cd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cd8:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8004cda:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004cdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ce4:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004cea:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cee:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8004cf0:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004cf2:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cf6:	d5d6      	bpl.n	8004ca6 <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf8:	6903      	ldr	r3, [r0, #16]
 8004cfa:	704b      	strb	r3, [r1, #1]
 8004cfc:	e036      	b.n	8004d6c <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cfe:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d00:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d08:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004d0e:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d12:	f043 0320 	orr.w	r3, r3, #32
 8004d16:	6423      	str	r3, [r4, #64]	; 0x40
 8004d18:	e712      	b.n	8004b40 <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 8004d1a:	2701      	movs	r7, #1
}
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	b007      	add	sp, #28
 8004d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	0750      	lsls	r0, r2, #29
 8004d28:	d40c      	bmi.n	8004d44 <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2a:	f7fd ff63 	bl	8002bf4 <HAL_GetTick>
 8004d2e:	1b80      	subs	r0, r0, r6
 8004d30:	4285      	cmp	r5, r0
 8004d32:	d34f      	bcc.n	8004dd4 <HAL_I2C_Mem_Read+0x2b4>
 8004d34:	2d00      	cmp	r5, #0
 8004d36:	d04d      	beq.n	8004dd4 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	1c69      	adds	r1, r5, #1
 8004d3c:	d1f2      	bne.n	8004d24 <HAL_I2C_Mem_Read+0x204>
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	0752      	lsls	r2, r2, #29
 8004d42:	d5fc      	bpl.n	8004d3e <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d50:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8004d52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004d54:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8004d5c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d62:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8004d64:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d66:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8004d68:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004d6e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8004d70:	3301      	adds	r3, #1
 8004d72:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8004d74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8004d76:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8004d78:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8004d7a:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8004d7c:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8004d7e:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004d80:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004d82:	e790      	b.n	8004ca6 <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	6819      	ldr	r1, [r3, #0]
 8004d88:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004d8c:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d8e:	6819      	ldr	r1, [r3, #0]
 8004d90:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004d94:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d96:	9004      	str	r0, [sp, #16]
 8004d98:	6959      	ldr	r1, [r3, #20]
 8004d9a:	9104      	str	r1, [sp, #16]
 8004d9c:	6999      	ldr	r1, [r3, #24]
 8004d9e:	9104      	str	r1, [sp, #16]
 8004da0:	9904      	ldr	r1, [sp, #16]
 8004da2:	e739      	b.n	8004c18 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	0750      	lsls	r0, r2, #29
 8004da8:	f53f af44 	bmi.w	8004c34 <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dac:	f7fd ff22 	bl	8002bf4 <HAL_GetTick>
 8004db0:	1b80      	subs	r0, r0, r6
 8004db2:	4285      	cmp	r5, r0
 8004db4:	d30e      	bcc.n	8004dd4 <HAL_I2C_Mem_Read+0x2b4>
 8004db6:	b16d      	cbz	r5, 8004dd4 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	e735      	b.n	8004c28 <HAL_I2C_Mem_Read+0x108>
 8004dbc:	6953      	ldr	r3, [r2, #20]
 8004dbe:	0758      	lsls	r0, r3, #29
 8004dc0:	f53f af50 	bmi.w	8004c64 <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc4:	f7fd ff16 	bl	8002bf4 <HAL_GetTick>
 8004dc8:	1b80      	subs	r0, r0, r6
 8004dca:	4285      	cmp	r5, r0
 8004dcc:	d302      	bcc.n	8004dd4 <HAL_I2C_Mem_Read+0x2b4>
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	f47f af41 	bne.w	8004c56 <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004dd4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dd6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004dd8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004dda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dde:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004de2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004de4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8004de8:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dea:	f043 0320 	orr.w	r3, r3, #32
}
 8004dee:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004df0:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004df2:	b007      	add	sp, #28
 8004df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df8:	b95d      	cbnz	r5, 8004e12 <HAL_I2C_Mem_Read+0x2f2>
 8004dfa:	e02b      	b.n	8004e54 <HAL_I2C_Mem_Read+0x334>
 8004dfc:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	06d2      	lsls	r2, r2, #27
 8004e04:	d40c      	bmi.n	8004e20 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e06:	f7fd fef5 	bl	8002bf4 <HAL_GetTick>
 8004e0a:	1b80      	subs	r0, r0, r6
 8004e0c:	4285      	cmp	r5, r0
 8004e0e:	d3e1      	bcc.n	8004dd4 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	695a      	ldr	r2, [r3, #20]
 8004e14:	0651      	lsls	r1, r2, #25
 8004e16:	d5f3      	bpl.n	8004e00 <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e1c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004e1e:	e7a5      	b.n	8004d6c <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e20:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e22:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e26:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e28:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2a:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e2c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e30:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e36:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004e38:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8004e3c:	2701      	movs	r7, #1
 8004e3e:	e680      	b.n	8004b42 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	0652      	lsls	r2, r2, #25
 8004e44:	f53f af44 	bmi.w	8004cd0 <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	06d1      	lsls	r1, r2, #27
 8004e4c:	d4e8      	bmi.n	8004e20 <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4e:	f7fd fed1 	bl	8002bf4 <HAL_GetTick>
 8004e52:	e7bf      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	0650      	lsls	r0, r2, #25
 8004e58:	d5f6      	bpl.n	8004e48 <HAL_I2C_Mem_Read+0x328>
 8004e5a:	e7dd      	b.n	8004e18 <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004e64:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e66:	9003      	str	r0, [sp, #12]
 8004e68:	6959      	ldr	r1, [r3, #20]
 8004e6a:	9103      	str	r1, [sp, #12]
 8004e6c:	6999      	ldr	r1, [r3, #24]
 8004e6e:	9103      	str	r1, [sp, #12]
 8004e70:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e72:	6819      	ldr	r1, [r3, #0]
 8004e74:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004e78:	6019      	str	r1, [r3, #0]
 8004e7a:	e6cd      	b.n	8004c18 <HAL_I2C_Mem_Read+0xf8>

08004e7c <HAL_I2C_GetState>:
  return hi2c->State;
 8004e7c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop

08004e84 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8004e84:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8004e86:	4770      	bx	lr

08004e88 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e88:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004e8c:	2a20      	cmp	r2, #32
{
 8004e8e:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e90:	fa5f fc82 	uxtb.w	ip, r2
 8004e94:	d001      	beq.n	8004e9a <HAL_I2CEx_ConfigAnalogFilter+0x12>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004e96:	2002      	movs	r0, #2
  }
}
 8004e98:	4770      	bx	lr
    __HAL_I2C_DISABLE(hi2c);
 8004e9a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e9c:	2024      	movs	r0, #36	; 0x24
 8004e9e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8004ea2:	6810      	ldr	r0, [r2, #0]
 8004ea4:	f020 0001 	bic.w	r0, r0, #1
 8004ea8:	6010      	str	r0, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004eaa:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004eac:	f020 0010 	bic.w	r0, r0, #16
 8004eb0:	6250      	str	r0, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 8004eb2:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004eb4:	4301      	orrs	r1, r0
 8004eb6:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	f041 0101 	orr.w	r1, r1, #1
 8004ebe:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8004ec0:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    return HAL_OK;
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004ecc:	2a20      	cmp	r2, #32
 8004ece:	d001      	beq.n	8004ed4 <HAL_I2CEx_ConfigDigitalFilter+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2002      	movs	r0, #2
  }
}
 8004ed2:	4770      	bx	lr
{
 8004ed4:	b410      	push	{r4}
 8004ed6:	fa5f fc82 	uxtb.w	ip, r2
    __HAL_I2C_DISABLE(hi2c);
 8004eda:	6804      	ldr	r4, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004edc:	2224      	movs	r2, #36	; 0x24
 8004ede:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8004ee2:	6822      	ldr	r2, [r4, #0]
 8004ee4:	f022 0201 	bic.w	r2, r2, #1
 8004ee8:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->FLTR;
 8004eea:	4603      	mov	r3, r0
 8004eec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    tmpreg &= ~(I2C_FLTR_DNF);
 8004eee:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004ef2:	4002      	ands	r2, r0
    tmpreg |= DigitalFilter;
 8004ef4:	430a      	orrs	r2, r1
    hi2c->Instance->FLTR = tmpreg;
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8004efa:	6822      	ldr	r2, [r4, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f02:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    return HAL_OK;
 8004f06:	2000      	movs	r0, #0
}
 8004f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d069      	beq.n	8004fe8 <HAL_LTDC_Init+0xd8>
{
 8004f14:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004f16:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d05c      	beq.n	8004fde <HAL_LTDC_Init+0xce>
    HAL_LTDC_MspInit(hltdc);
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f24:	2202      	movs	r2, #2

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f26:	6823      	ldr	r3, [r4, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f28:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f2c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f30:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f32:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f34:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f38:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
 8004f3c:	6199      	str	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f3e:	6999      	ldr	r1, [r3, #24]
 8004f40:	432a      	orrs	r2, r5
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004f42:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f44:	430a      	orrs	r2, r1
 8004f46:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f48:	6898      	ldr	r0, [r3, #8]
 8004f4a:	4928      	ldr	r1, [pc, #160]	; (8004fec <HAL_LTDC_Init+0xdc>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004f4c:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f4e:	4008      	ands	r0, r1
 8004f50:	6098      	str	r0, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	69a0      	ldr	r0, [r4, #24]
 8004f56:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8004f5a:	4302      	orrs	r2, r0
 8004f5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f5e:	68d8      	ldr	r0, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004f60:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f62:	4008      	ands	r0, r1
 8004f64:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	6a20      	ldr	r0, [r4, #32]
 8004f6a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8004f6e:	4302      	orrs	r2, r0
 8004f70:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f72:	6918      	ldr	r0, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004f74:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f76:	4008      	ands	r0, r1
 8004f78:	6118      	str	r0, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004f7e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8004f82:	4302      	orrs	r2, r0
 8004f84:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004f86:	6958      	ldr	r0, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004f88:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004f8a:	4001      	ands	r1, r0
 8004f8c:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f92:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8004f96:	430a      	orrs	r2, r1
 8004f98:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004f9c:	f894 c035 	ldrb.w	ip, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004fa0:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004fa4:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8004fa8:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004faa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fac:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8004fb6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbe:	f042 0206 	orr.w	r2, r2, #6
 8004fc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004fc4:	699a      	ldr	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004fc6:	f04f 0c01 	mov.w	ip, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004fca:	2100      	movs	r1, #0
  __HAL_LTDC_ENABLE(hltdc);
 8004fcc:	ea42 020c 	orr.w	r2, r2, ip
 8004fd0:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004fd2:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004fd6:	f884 c0a1 	strb.w	ip, [r4, #161]	; 0xa1

  return HAL_OK;
 8004fda:	4608      	mov	r0, r1
}
 8004fdc:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8004fde:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004fe2:	f7fb ff21 	bl	8000e28 <HAL_LTDC_MspInit>
 8004fe6:	e79d      	b.n	8004f24 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 8004fe8:	2001      	movs	r0, #1
}
 8004fea:	4770      	bx	lr
 8004fec:	f000f800 	.word	0xf000f800

08004ff0 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ff0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	f000 80c8 	beq.w	800518a <HAL_LTDC_ConfigLayer+0x19a>
{
 8004ffa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004ffe:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005002:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005006:	fb0e 0e02 	mla	lr, lr, r2, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800500a:	f04f 0302 	mov.w	r3, #2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800500e:	01d2      	lsls	r2, r2, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005010:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005014:	f102 0684 	add.w	r6, r2, #132	; 0x84
 8005018:	eb09 0c06 	add.w	ip, r9, r6
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800501c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005020:	f3c3 4a0b 	ubfx	sl, r3, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005024:	f8dc 3004 	ldr.w	r3, [ip, #4]
{
 8005028:	b083      	sub	sp, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800502a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800502e:	460c      	mov	r4, r1
 8005030:	460d      	mov	r5, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	4680      	mov	r8, r0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005038:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
 800503c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005042:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005044:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8005048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800504a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005054:	9b01      	ldr	r3, [sp, #4]
 8005056:	f8cc 3004 	str.w	r3, [ip, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800505a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800505e:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005060:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005064:	1c51      	adds	r1, r2, #1
 8005066:	f3c3 430b 	ubfx	r3, r3, #16, #12
 800506a:	440b      	add	r3, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800506c:	44ba      	add	sl, r7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800506e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005072:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005076:	f8d9 300c 	ldr.w	r3, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800507a:	f8dc 0008 	ldr.w	r0, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800507e:	68e9      	ldr	r1, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005080:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8005084:	f8cc 0008 	str.w	r0, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005088:	f3c3 030a 	ubfx	r3, r3, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800508c:	f8d9 000c 	ldr.w	r0, [r9, #12]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005090:	4419      	add	r1, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005092:	68ab      	ldr	r3, [r5, #8]
 8005094:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005098:	3301      	adds	r3, #1
 800509a:	4403      	add	r3, r0
 800509c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80050a0:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80050a4:	f8dc 3010 	ldr.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80050a8:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80050aa:	f023 0307 	bic.w	r3, r3, #7
 80050ae:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80050b2:	f04f 0b00 	mov.w	fp, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80050b6:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80050ba:	f8dc 3018 	ldr.w	r3, [ip, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80050be:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80050c2:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80050c6:	f8cc b018 	str.w	fp, [ip, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80050ca:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80050ce:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80050d2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80050d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80050da:	f8cc 3018 	str.w	r3, [ip, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80050de:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80050e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050e6:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80050ea:	696b      	ldr	r3, [r5, #20]
 80050ec:	f8cc 3014 	str.w	r3, [ip, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80050f0:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80050f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80050f8:	f023 0307 	bic.w	r3, r3, #7
 80050fc:	f8cc 301c 	str.w	r3, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005100:	e9d5 3007 	ldrd	r3, r0, [r5, #28]
 8005104:	4303      	orrs	r3, r0
 8005106:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800510a:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800510e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005110:	f8cc b028 	str.w	fp, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005114:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005118:	bb69      	cbnz	r1, 8005176 <HAL_LTDC_ConfigLayer+0x186>
  {
    tmp = 4U;
 800511a:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800511c:	1abf      	subs	r7, r7, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800511e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005120:	fb03 f707 	mul.w	r7, r3, r7
 8005124:	3703      	adds	r7, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800512e:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005132:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005134:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005138:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800513c:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005140:	f8dc 3030 	ldr.w	r3, [ip, #48]	; 0x30
 8005144:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005148:	f023 0307 	bic.w	r3, r3, #7
 800514c:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005150:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005154:	f859 3006 	ldr.w	r3, [r9, r6]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005158:	2201      	movs	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800515a:	4313      	orrs	r3, r2
 800515c:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
 8005160:	2300      	movs	r3, #0
  return HAL_OK;
 8005162:	4618      	mov	r0, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005164:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005168:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800516c:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
 8005170:	b003      	add	sp, #12
 8005172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005176:	2901      	cmp	r1, #1
 8005178:	d00b      	beq.n	8005192 <HAL_LTDC_ConfigLayer+0x1a2>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800517a:	1e8b      	subs	r3, r1, #2
 800517c:	2b02      	cmp	r3, #2
 800517e:	d906      	bls.n	800518e <HAL_LTDC_ConfigLayer+0x19e>
    tmp = 1U;
 8005180:	2907      	cmp	r1, #7
 8005182:	bf0c      	ite	eq
 8005184:	2302      	moveq	r3, #2
 8005186:	2301      	movne	r3, #1
 8005188:	e7c8      	b.n	800511c <HAL_LTDC_ConfigLayer+0x12c>
  __HAL_LOCK(hltdc);
 800518a:	2002      	movs	r0, #2
}
 800518c:	4770      	bx	lr
    tmp = 2U;
 800518e:	2302      	movs	r3, #2
 8005190:	e7c4      	b.n	800511c <HAL_LTDC_ConfigLayer+0x12c>
    tmp = 3U;
 8005192:	2303      	movs	r3, #3
 8005194:	e7c2      	b.n	800511c <HAL_LTDC_ConfigLayer+0x12c>
 8005196:	bf00      	nop

08005198 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005198:	b530      	push	{r4, r5, lr}
 800519a:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_PWREx_EnableOverDrive+0x6c>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800519e:	491a      	ldr	r1, [pc, #104]	; (8005208 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051a0:	4d1a      	ldr	r5, [pc, #104]	; (800520c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	2200      	movs	r2, #0
 80051a4:	9201      	str	r2, [sp, #4]
 80051a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b4:	9301      	str	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051b6:	2201      	movs	r2, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80051b8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051ba:	640a      	str	r2, [r1, #64]	; 0x40
  tickstart = HAL_GetTick();
 80051bc:	f7fd fd1a 	bl	8002bf4 <HAL_GetTick>
 80051c0:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051c2:	e005      	b.n	80051d0 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051c4:	f7fd fd16 	bl	8002bf4 <HAL_GetTick>
 80051c8:	1b00      	subs	r0, r0, r4
 80051ca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80051ce:	d816      	bhi.n	80051fe <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051d0:	686b      	ldr	r3, [r5, #4]
 80051d2:	03da      	lsls	r2, r3, #15
 80051d4:	d5f6      	bpl.n	80051c4 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80051d6:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051d8:	4d0c      	ldr	r5, [pc, #48]	; (800520c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80051da:	2201      	movs	r2, #1
 80051dc:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 80051de:	f7fd fd09 	bl	8002bf4 <HAL_GetTick>
 80051e2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051e4:	e005      	b.n	80051f2 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051e6:	f7fd fd05 	bl	8002bf4 <HAL_GetTick>
 80051ea:	1b00      	subs	r0, r0, r4
 80051ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80051f0:	d805      	bhi.n	80051fe <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051f2:	686b      	ldr	r3, [r5, #4]
 80051f4:	039b      	lsls	r3, r3, #14
 80051f6:	d5f6      	bpl.n	80051e6 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80051f8:	2000      	movs	r0, #0
}
 80051fa:	b003      	add	sp, #12
 80051fc:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80051fe:	2003      	movs	r0, #3
}
 8005200:	b003      	add	sp, #12
 8005202:	bd30      	pop	{r4, r5, pc}
 8005204:	40023800 	.word	0x40023800
 8005208:	420e0000 	.word	0x420e0000
 800520c:	40007000 	.word	0x40007000

08005210 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005210:	2800      	cmp	r0, #0
 8005212:	f000 81a2 	beq.w	800555a <HAL_RCC_OscConfig+0x34a>
{
 8005216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521a:	6803      	ldr	r3, [r0, #0]
 800521c:	07dd      	lsls	r5, r3, #31
{
 800521e:	b082      	sub	sp, #8
 8005220:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005222:	d52f      	bpl.n	8005284 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005224:	499e      	ldr	r1, [pc, #632]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 8005226:	688a      	ldr	r2, [r1, #8]
 8005228:	f002 020c 	and.w	r2, r2, #12
 800522c:	2a04      	cmp	r2, #4
 800522e:	f000 80ed 	beq.w	800540c <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005232:	688a      	ldr	r2, [r1, #8]
 8005234:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005238:	2a08      	cmp	r2, #8
 800523a:	f000 80e3 	beq.w	8005404 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800523e:	6863      	ldr	r3, [r4, #4]
 8005240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005244:	f000 80ec 	beq.w	8005420 <HAL_RCC_OscConfig+0x210>
 8005248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800524c:	f000 8175 	beq.w	800553a <HAL_RCC_OscConfig+0x32a>
 8005250:	4d93      	ldr	r5, [pc, #588]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 8005252:	682a      	ldr	r2, [r5, #0]
 8005254:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005258:	602a      	str	r2, [r5, #0]
 800525a:	682a      	ldr	r2, [r5, #0]
 800525c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005260:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 80e1 	bne.w	800542a <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fd fcc4 	bl	8002bf4 <HAL_GetTick>
 800526c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800526e:	e005      	b.n	800527c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005270:	f7fd fcc0 	bl	8002bf4 <HAL_GetTick>
 8005274:	1b80      	subs	r0, r0, r6
 8005276:	2864      	cmp	r0, #100	; 0x64
 8005278:	f200 8101 	bhi.w	800547e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527c:	682b      	ldr	r3, [r5, #0]
 800527e:	039b      	lsls	r3, r3, #14
 8005280:	d4f6      	bmi.n	8005270 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	079f      	lsls	r7, r3, #30
 8005286:	d528      	bpl.n	80052da <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005288:	4a85      	ldr	r2, [pc, #532]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 800528a:	6891      	ldr	r1, [r2, #8]
 800528c:	f011 0f0c 	tst.w	r1, #12
 8005290:	f000 8090 	beq.w	80053b4 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005294:	6891      	ldr	r1, [r2, #8]
 8005296:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800529a:	2908      	cmp	r1, #8
 800529c:	f000 8086 	beq.w	80053ac <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052a0:	68e3      	ldr	r3, [r4, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 810e 	beq.w	80054c4 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052a8:	4b7e      	ldr	r3, [pc, #504]	; (80054a4 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052aa:	4e7d      	ldr	r6, [pc, #500]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80052b0:	f7fd fca0 	bl	8002bf4 <HAL_GetTick>
 80052b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b6:	e005      	b.n	80052c4 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b8:	f7fd fc9c 	bl	8002bf4 <HAL_GetTick>
 80052bc:	1b40      	subs	r0, r0, r5
 80052be:	2802      	cmp	r0, #2
 80052c0:	f200 80dd 	bhi.w	800547e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c4:	6833      	ldr	r3, [r6, #0]
 80052c6:	0798      	lsls	r0, r3, #30
 80052c8:	d5f6      	bpl.n	80052b8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ca:	6833      	ldr	r3, [r6, #0]
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80052d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80052d6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	071a      	lsls	r2, r3, #28
 80052dc:	d451      	bmi.n	8005382 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052de:	0758      	lsls	r0, r3, #29
 80052e0:	d52f      	bpl.n	8005342 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e2:	4a6f      	ldr	r2, [pc, #444]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 80052e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80052e6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80052ea:	d07f      	beq.n	80053ec <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 80052ec:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ee:	4e6e      	ldr	r6, [pc, #440]	; (80054a8 <HAL_RCC_OscConfig+0x298>)
 80052f0:	6833      	ldr	r3, [r6, #0]
 80052f2:	05d9      	lsls	r1, r3, #23
 80052f4:	f140 80b3 	bpl.w	800545e <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f8:	68a3      	ldr	r3, [r4, #8]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	f000 80c3 	beq.w	8005486 <HAL_RCC_OscConfig+0x276>
 8005300:	2b05      	cmp	r3, #5
 8005302:	f000 812c 	beq.w	800555e <HAL_RCC_OscConfig+0x34e>
 8005306:	4e66      	ldr	r6, [pc, #408]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 8005308:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800530a:	f022 0201 	bic.w	r2, r2, #1
 800530e:	6732      	str	r2, [r6, #112]	; 0x70
 8005310:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005312:	f022 0204 	bic.w	r2, r2, #4
 8005316:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005318:	2b00      	cmp	r3, #0
 800531a:	f040 80b9 	bne.w	8005490 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531e:	f7fd fc69 	bl	8002bf4 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005322:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005326:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005328:	e005      	b.n	8005336 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800532a:	f7fd fc63 	bl	8002bf4 <HAL_GetTick>
 800532e:	1bc0      	subs	r0, r0, r7
 8005330:	4540      	cmp	r0, r8
 8005332:	f200 80a4 	bhi.w	800547e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005336:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005338:	0798      	lsls	r0, r3, #30
 800533a:	d4f6      	bmi.n	800532a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800533c:	2d00      	cmp	r5, #0
 800533e:	f040 8106 	bne.w	800554e <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005342:	69a0      	ldr	r0, [r4, #24]
 8005344:	b1c8      	cbz	r0, 800537a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005346:	4d56      	ldr	r5, [pc, #344]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 8005348:	68ab      	ldr	r3, [r5, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b08      	cmp	r3, #8
 8005350:	f000 80c9 	beq.w	80054e6 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005354:	4b53      	ldr	r3, [pc, #332]	; (80054a4 <HAL_RCC_OscConfig+0x294>)
 8005356:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005358:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800535a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535c:	f000 8109 	beq.w	8005572 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fd fc48 	bl	8002bf4 <HAL_GetTick>
 8005364:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005366:	e005      	b.n	8005374 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005368:	f7fd fc44 	bl	8002bf4 <HAL_GetTick>
 800536c:	1b00      	subs	r0, r0, r4
 800536e:	2802      	cmp	r0, #2
 8005370:	f200 8085 	bhi.w	800547e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	019b      	lsls	r3, r3, #6
 8005378:	d4f6      	bmi.n	8005368 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800537a:	2000      	movs	r0, #0
}
 800537c:	b002      	add	sp, #8
 800537e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005382:	6963      	ldr	r3, [r4, #20]
 8005384:	b30b      	cbz	r3, 80053ca <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8005386:	4b47      	ldr	r3, [pc, #284]	; (80054a4 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005388:	4e45      	ldr	r6, [pc, #276]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 800538a:	2201      	movs	r2, #1
 800538c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8005390:	f7fd fc30 	bl	8002bf4 <HAL_GetTick>
 8005394:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005396:	e004      	b.n	80053a2 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005398:	f7fd fc2c 	bl	8002bf4 <HAL_GetTick>
 800539c:	1b40      	subs	r0, r0, r5
 800539e:	2802      	cmp	r0, #2
 80053a0:	d86d      	bhi.n	800547e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053a2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80053a4:	079b      	lsls	r3, r3, #30
 80053a6:	d5f7      	bpl.n	8005398 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	e798      	b.n	80052de <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ac:	6852      	ldr	r2, [r2, #4]
 80053ae:	0256      	lsls	r6, r2, #9
 80053b0:	f53f af76 	bmi.w	80052a0 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b4:	4a3a      	ldr	r2, [pc, #232]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	0795      	lsls	r5, r2, #30
 80053ba:	d544      	bpl.n	8005446 <HAL_RCC_OscConfig+0x236>
 80053bc:	68e2      	ldr	r2, [r4, #12]
 80053be:	2a01      	cmp	r2, #1
 80053c0:	d041      	beq.n	8005446 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80053c2:	2001      	movs	r0, #1
}
 80053c4:	b002      	add	sp, #8
 80053c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80053ca:	4a36      	ldr	r2, [pc, #216]	; (80054a4 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053cc:	4e34      	ldr	r6, [pc, #208]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 80053ce:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80053d2:	f7fd fc0f 	bl	8002bf4 <HAL_GetTick>
 80053d6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d8:	e004      	b.n	80053e4 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053da:	f7fd fc0b 	bl	8002bf4 <HAL_GetTick>
 80053de:	1b40      	subs	r0, r0, r5
 80053e0:	2802      	cmp	r0, #2
 80053e2:	d84c      	bhi.n	800547e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80053e6:	079f      	lsls	r7, r3, #30
 80053e8:	d4f7      	bmi.n	80053da <HAL_RCC_OscConfig+0x1ca>
 80053ea:	e7dd      	b.n	80053a8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80053f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f4:	6413      	str	r3, [r2, #64]	; 0x40
 80053f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80053f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005400:	2501      	movs	r5, #1
 8005402:	e774      	b.n	80052ee <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005404:	684a      	ldr	r2, [r1, #4]
 8005406:	0250      	lsls	r0, r2, #9
 8005408:	f57f af19 	bpl.w	800523e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800540c:	4a24      	ldr	r2, [pc, #144]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	0391      	lsls	r1, r2, #14
 8005412:	f57f af37 	bpl.w	8005284 <HAL_RCC_OscConfig+0x74>
 8005416:	6862      	ldr	r2, [r4, #4]
 8005418:	2a00      	cmp	r2, #0
 800541a:	f47f af33 	bne.w	8005284 <HAL_RCC_OscConfig+0x74>
 800541e:	e7d0      	b.n	80053c2 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005420:	4a1f      	ldr	r2, [pc, #124]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005428:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800542a:	f7fd fbe3 	bl	8002bf4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542e:	4e1c      	ldr	r6, [pc, #112]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8005430:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	e004      	b.n	800543e <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005434:	f7fd fbde 	bl	8002bf4 <HAL_GetTick>
 8005438:	1b40      	subs	r0, r0, r5
 800543a:	2864      	cmp	r0, #100	; 0x64
 800543c:	d81f      	bhi.n	800547e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543e:	6833      	ldr	r3, [r6, #0]
 8005440:	039a      	lsls	r2, r3, #14
 8005442:	d5f7      	bpl.n	8005434 <HAL_RCC_OscConfig+0x224>
 8005444:	e71d      	b.n	8005282 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005446:	4916      	ldr	r1, [pc, #88]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 8005448:	6920      	ldr	r0, [r4, #16]
 800544a:	680a      	ldr	r2, [r1, #0]
 800544c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005450:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005454:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005456:	071a      	lsls	r2, r3, #28
 8005458:	f57f af41 	bpl.w	80052de <HAL_RCC_OscConfig+0xce>
 800545c:	e791      	b.n	8005382 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800545e:	6833      	ldr	r3, [r6, #0]
 8005460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005464:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005466:	f7fd fbc5 	bl	8002bf4 <HAL_GetTick>
 800546a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800546c:	6833      	ldr	r3, [r6, #0]
 800546e:	05da      	lsls	r2, r3, #23
 8005470:	f53f af42 	bmi.w	80052f8 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005474:	f7fd fbbe 	bl	8002bf4 <HAL_GetTick>
 8005478:	1bc0      	subs	r0, r0, r7
 800547a:	2802      	cmp	r0, #2
 800547c:	d9f6      	bls.n	800546c <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800547e:	2003      	movs	r0, #3
}
 8005480:	b002      	add	sp, #8
 8005482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005486:	4a06      	ldr	r2, [pc, #24]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
 8005488:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005490:	f7fd fbb0 	bl	8002bf4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005494:	4f02      	ldr	r7, [pc, #8]	; (80054a0 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8005496:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005498:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549c:	e00b      	b.n	80054b6 <HAL_RCC_OscConfig+0x2a6>
 800549e:	bf00      	nop
 80054a0:	40023800 	.word	0x40023800
 80054a4:	42470000 	.word	0x42470000
 80054a8:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ac:	f7fd fba2 	bl	8002bf4 <HAL_GetTick>
 80054b0:	1b80      	subs	r0, r0, r6
 80054b2:	4540      	cmp	r0, r8
 80054b4:	d8e3      	bhi.n	800547e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054b8:	079b      	lsls	r3, r3, #30
 80054ba:	d5f7      	bpl.n	80054ac <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80054bc:	2d00      	cmp	r5, #0
 80054be:	f43f af40 	beq.w	8005342 <HAL_RCC_OscConfig+0x132>
 80054c2:	e044      	b.n	800554e <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80054c4:	4a42      	ldr	r2, [pc, #264]	; (80055d0 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c6:	4e43      	ldr	r6, [pc, #268]	; (80055d4 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 80054c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80054ca:	f7fd fb93 	bl	8002bf4 <HAL_GetTick>
 80054ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054d0:	e004      	b.n	80054dc <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054d2:	f7fd fb8f 	bl	8002bf4 <HAL_GetTick>
 80054d6:	1b40      	subs	r0, r0, r5
 80054d8:	2802      	cmp	r0, #2
 80054da:	d8d0      	bhi.n	800547e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054dc:	6833      	ldr	r3, [r6, #0]
 80054de:	0799      	lsls	r1, r3, #30
 80054e0:	d4f7      	bmi.n	80054d2 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	e6f9      	b.n	80052da <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e6:	2801      	cmp	r0, #1
 80054e8:	f43f af48 	beq.w	800537c <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 80054ec:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ee:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f4:	4291      	cmp	r1, r2
 80054f6:	f47f af64 	bne.w	80053c2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054fa:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054fc:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005500:	4291      	cmp	r1, r2
 8005502:	f47f af5e 	bne.w	80053c2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005506:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005508:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800550c:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800550e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005512:	f47f af56 	bne.w	80053c2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005516:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005518:	0852      	lsrs	r2, r2, #1
 800551a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800551e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005520:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005524:	f47f af4d 	bne.w	80053c2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005528:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800552a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800552e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8005532:	bf14      	ite	ne
 8005534:	2001      	movne	r0, #1
 8005536:	2000      	moveq	r0, #0
 8005538:	e720      	b.n	800537c <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800553a:	4b26      	ldr	r3, [pc, #152]	; (80055d4 <HAL_RCC_OscConfig+0x3c4>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800554a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800554c:	e76d      	b.n	800542a <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800554e:	4a21      	ldr	r2, [pc, #132]	; (80055d4 <HAL_RCC_OscConfig+0x3c4>)
 8005550:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005556:	6413      	str	r3, [r2, #64]	; 0x40
 8005558:	e6f3      	b.n	8005342 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 800555a:	2001      	movs	r0, #1
}
 800555c:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800555e:	4b1d      	ldr	r3, [pc, #116]	; (80055d4 <HAL_RCC_OscConfig+0x3c4>)
 8005560:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005562:	f042 0204 	orr.w	r2, r2, #4
 8005566:	671a      	str	r2, [r3, #112]	; 0x70
 8005568:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005570:	e78e      	b.n	8005490 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8005572:	f7fd fb3f 	bl	8002bf4 <HAL_GetTick>
 8005576:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005578:	e005      	b.n	8005586 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557a:	f7fd fb3b 	bl	8002bf4 <HAL_GetTick>
 800557e:	1b80      	subs	r0, r0, r6
 8005580:	2802      	cmp	r0, #2
 8005582:	f63f af7c 	bhi.w	800547e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005586:	682b      	ldr	r3, [r5, #0]
 8005588:	0199      	lsls	r1, r3, #6
 800558a:	d4f6      	bmi.n	800557a <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800558c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8005590:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005592:	430b      	orrs	r3, r1
 8005594:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005598:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 800559c:	0852      	lsrs	r2, r2, #1
 800559e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80055a2:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80055a4:	490a      	ldr	r1, [pc, #40]	; (80055d0 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80055aa:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80055ae:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80055b0:	f7fd fb20 	bl	8002bf4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b4:	4d07      	ldr	r5, [pc, #28]	; (80055d4 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 80055b6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b8:	e005      	b.n	80055c6 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ba:	f7fd fb1b 	bl	8002bf4 <HAL_GetTick>
 80055be:	1b00      	subs	r0, r0, r4
 80055c0:	2802      	cmp	r0, #2
 80055c2:	f63f af5c 	bhi.w	800547e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055c6:	682b      	ldr	r3, [r5, #0]
 80055c8:	019a      	lsls	r2, r3, #6
 80055ca:	d5f6      	bpl.n	80055ba <HAL_RCC_OscConfig+0x3aa>
 80055cc:	e6d5      	b.n	800537a <HAL_RCC_OscConfig+0x16a>
 80055ce:	bf00      	nop
 80055d0:	42470000 	.word	0x42470000
 80055d4:	40023800 	.word	0x40023800

080055d8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055d8:	4910      	ldr	r1, [pc, #64]	; (800561c <HAL_RCC_GetSysClockFreq+0x44>)
{
 80055da:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055dc:	688b      	ldr	r3, [r1, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d001      	beq.n	80055ea <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055e6:	480e      	ldr	r0, [pc, #56]	; (8005620 <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80055e8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055ea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055ec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ee:	6849      	ldr	r1, [r1, #4]
 80055f0:	480b      	ldr	r0, [pc, #44]	; (8005620 <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055f2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055f6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80055fa:	bf18      	it	ne
 80055fc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005602:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005606:	f7fa fe53 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800560a:	4b04      	ldr	r3, [pc, #16]	; (800561c <HAL_RCC_GetSysClockFreq+0x44>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005612:	3301      	adds	r3, #1
 8005614:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8005616:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800561a:	bd08      	pop	{r3, pc}
 800561c:	40023800 	.word	0x40023800
 8005620:	00f42400 	.word	0x00f42400

08005624 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005624:	2800      	cmp	r0, #0
 8005626:	f000 8087 	beq.w	8005738 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800562a:	4a48      	ldr	r2, [pc, #288]	; (800574c <HAL_RCC_ClockConfig+0x128>)
 800562c:	6813      	ldr	r3, [r2, #0]
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	428b      	cmp	r3, r1
{
 8005634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005638:	460d      	mov	r5, r1
 800563a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800563c:	d209      	bcs.n	8005652 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	b2cb      	uxtb	r3, r1
 8005640:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	6813      	ldr	r3, [r2, #0]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	428b      	cmp	r3, r1
 800564a:	d002      	beq.n	8005652 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800564c:	2001      	movs	r0, #1
}
 800564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	0798      	lsls	r0, r3, #30
 8005656:	d514      	bpl.n	8005682 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005658:	0759      	lsls	r1, r3, #29
 800565a:	d504      	bpl.n	8005666 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800565c:	493c      	ldr	r1, [pc, #240]	; (8005750 <HAL_RCC_ClockConfig+0x12c>)
 800565e:	688a      	ldr	r2, [r1, #8]
 8005660:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8005664:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005666:	071a      	lsls	r2, r3, #28
 8005668:	d504      	bpl.n	8005674 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800566a:	4939      	ldr	r1, [pc, #228]	; (8005750 <HAL_RCC_ClockConfig+0x12c>)
 800566c:	688a      	ldr	r2, [r1, #8]
 800566e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8005672:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005674:	4936      	ldr	r1, [pc, #216]	; (8005750 <HAL_RCC_ClockConfig+0x12c>)
 8005676:	68a0      	ldr	r0, [r4, #8]
 8005678:	688a      	ldr	r2, [r1, #8]
 800567a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800567e:	4302      	orrs	r2, r0
 8005680:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005682:	07df      	lsls	r7, r3, #31
 8005684:	d521      	bpl.n	80056ca <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005686:	6862      	ldr	r2, [r4, #4]
 8005688:	2a01      	cmp	r2, #1
 800568a:	d057      	beq.n	800573c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800568c:	1e93      	subs	r3, r2, #2
 800568e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005690:	4b2f      	ldr	r3, [pc, #188]	; (8005750 <HAL_RCC_ClockConfig+0x12c>)
 8005692:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005694:	d94d      	bls.n	8005732 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005696:	0799      	lsls	r1, r3, #30
 8005698:	d5d8      	bpl.n	800564c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800569a:	4e2d      	ldr	r6, [pc, #180]	; (8005750 <HAL_RCC_ClockConfig+0x12c>)
 800569c:	68b3      	ldr	r3, [r6, #8]
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80056a6:	f7fd faa5 	bl	8002bf4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056aa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80056ae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b0:	e004      	b.n	80056bc <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b2:	f7fd fa9f 	bl	8002bf4 <HAL_GetTick>
 80056b6:	1bc0      	subs	r0, r0, r7
 80056b8:	4540      	cmp	r0, r8
 80056ba:	d844      	bhi.n	8005746 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056bc:	68b3      	ldr	r3, [r6, #8]
 80056be:	6862      	ldr	r2, [r4, #4]
 80056c0:	f003 030c 	and.w	r3, r3, #12
 80056c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80056c8:	d1f3      	bne.n	80056b2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056ca:	4a20      	ldr	r2, [pc, #128]	; (800574c <HAL_RCC_ClockConfig+0x128>)
 80056cc:	6813      	ldr	r3, [r2, #0]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	42ab      	cmp	r3, r5
 80056d4:	d906      	bls.n	80056e4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d6:	b2eb      	uxtb	r3, r5
 80056d8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056da:	6813      	ldr	r3, [r2, #0]
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	d1b3      	bne.n	800564c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	075a      	lsls	r2, r3, #29
 80056e8:	d506      	bpl.n	80056f8 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056ea:	4919      	ldr	r1, [pc, #100]	; (8005750 <HAL_RCC_ClockConfig+0x12c>)
 80056ec:	68e0      	ldr	r0, [r4, #12]
 80056ee:	688a      	ldr	r2, [r1, #8]
 80056f0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80056f4:	4302      	orrs	r2, r0
 80056f6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	071b      	lsls	r3, r3, #28
 80056fa:	d507      	bpl.n	800570c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056fc:	4a14      	ldr	r2, [pc, #80]	; (8005750 <HAL_RCC_ClockConfig+0x12c>)
 80056fe:	6921      	ldr	r1, [r4, #16]
 8005700:	6893      	ldr	r3, [r2, #8]
 8005702:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005706:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800570a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800570c:	f7ff ff64 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8005710:	4a0f      	ldr	r2, [pc, #60]	; (8005750 <HAL_RCC_ClockConfig+0x12c>)
 8005712:	4c10      	ldr	r4, [pc, #64]	; (8005754 <HAL_RCC_ClockConfig+0x130>)
 8005714:	6892      	ldr	r2, [r2, #8]
 8005716:	4910      	ldr	r1, [pc, #64]	; (8005758 <HAL_RCC_ClockConfig+0x134>)
 8005718:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800571c:	4603      	mov	r3, r0
 800571e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8005720:	480e      	ldr	r0, [pc, #56]	; (800575c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005722:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8005724:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005726:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8005728:	f7fd fa1a 	bl	8002b60 <HAL_InitTick>
  return HAL_OK;
 800572c:	2000      	movs	r0, #0
}
 800572e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005732:	0198      	lsls	r0, r3, #6
 8005734:	d4b1      	bmi.n	800569a <HAL_RCC_ClockConfig+0x76>
 8005736:	e789      	b.n	800564c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005738:	2001      	movs	r0, #1
}
 800573a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573c:	4b04      	ldr	r3, [pc, #16]	; (8005750 <HAL_RCC_ClockConfig+0x12c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	039e      	lsls	r6, r3, #14
 8005742:	d4aa      	bmi.n	800569a <HAL_RCC_ClockConfig+0x76>
 8005744:	e782      	b.n	800564c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8005746:	2003      	movs	r0, #3
 8005748:	e781      	b.n	800564e <HAL_RCC_ClockConfig+0x2a>
 800574a:	bf00      	nop
 800574c:	40023c00 	.word	0x40023c00
 8005750:	40023800 	.word	0x40023800
 8005754:	08007b0c 	.word	0x08007b0c
 8005758:	20000004 	.word	0x20000004
 800575c:	2000009c 	.word	0x2000009c

08005760 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005760:	4b04      	ldr	r3, [pc, #16]	; (8005774 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8005762:	4905      	ldr	r1, [pc, #20]	; (8005778 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	4a05      	ldr	r2, [pc, #20]	; (800577c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005768:	6808      	ldr	r0, [r1, #0]
 800576a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800576e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005770:	40d8      	lsrs	r0, r3
 8005772:	4770      	bx	lr
 8005774:	40023800 	.word	0x40023800
 8005778:	20000004 	.word	0x20000004
 800577c:	08007b1c 	.word	0x08007b1c

08005780 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8005782:	4905      	ldr	r1, [pc, #20]	; (8005798 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	4a05      	ldr	r2, [pc, #20]	; (800579c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005788:	6808      	ldr	r0, [r1, #0]
 800578a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800578e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005790:	40d8      	lsrs	r0, r3
 8005792:	4770      	bx	lr
 8005794:	40023800 	.word	0x40023800
 8005798:	20000004 	.word	0x20000004
 800579c:	08007b1c 	.word	0x08007b1c

080057a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057a2:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057a4:	f013 0f43 	tst.w	r3, #67	; 0x43
{
 80057a8:	b083      	sub	sp, #12
 80057aa:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057ac:	d111      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x32>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057ae:	f013 0f0c 	tst.w	r3, #12
 80057b2:	d16f      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057b4:	0698      	lsls	r0, r3, #26
 80057b6:	f100 80c2 	bmi.w	800593e <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057ba:	f013 0310 	ands.w	r3, r3, #16
 80057be:	f000 80bb 	beq.w	8005938 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057c2:	4b89      	ldr	r3, [pc, #548]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057c4:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80057c8:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  }
  return HAL_OK;
 80057cc:	2000      	movs	r0, #0
}
 80057ce:	b003      	add	sp, #12
 80057d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80057d2:	4b86      	ldr	r3, [pc, #536]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057d4:	4e86      	ldr	r6, [pc, #536]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PLLI2S_DISABLE();
 80057d6:	2200      	movs	r2, #0
 80057d8:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 80057da:	f7fd fa0b 	bl	8002bf4 <HAL_GetTick>
 80057de:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057e0:	e004      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057e2:	f7fd fa07 	bl	8002bf4 <HAL_GetTick>
 80057e6:	1b43      	subs	r3, r0, r5
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d850      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xee>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057ec:	6833      	ldr	r3, [r6, #0]
 80057ee:	0118      	lsls	r0, r3, #4
 80057f0:	d4f7      	bmi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	07d9      	lsls	r1, r3, #31
 80057f6:	d506      	bpl.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80057f8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80057fc:	0712      	lsls	r2, r2, #28
 80057fe:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8005802:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005806:	079a      	lsls	r2, r3, #30
 8005808:	d515      	bpl.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x96>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800580a:	4979      	ldr	r1, [pc, #484]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800580c:	68e2      	ldr	r2, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800580e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005812:	6865      	ldr	r5, [r4, #4]
 8005814:	0612      	lsls	r2, r2, #24
 8005816:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800581a:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800581e:	4302      	orrs	r2, r0
 8005820:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005824:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8005828:	69e2      	ldr	r2, [r4, #28]
 800582a:	f020 001f 	bic.w	r0, r0, #31
 800582e:	3a01      	subs	r2, #1
 8005830:	4302      	orrs	r2, r0
 8005832:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005836:	065b      	lsls	r3, r3, #25
 8005838:	d509      	bpl.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xae>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800583a:	1d20      	adds	r0, r4, #4
 800583c:	c80b      	ldmia	r0, {r0, r1, r3}
 800583e:	061b      	lsls	r3, r3, #24
 8005840:	4a6b      	ldr	r2, [pc, #428]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005842:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005846:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800584a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800584e:	4b67      	ldr	r3, [pc, #412]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005850:	4e67      	ldr	r6, [pc, #412]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PLLI2S_ENABLE();
 8005852:	2201      	movs	r2, #1
 8005854:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8005856:	f7fd f9cd 	bl	8002bf4 <HAL_GetTick>
 800585a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800585c:	e004      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800585e:	f7fd f9c9 	bl	8002bf4 <HAL_GetTick>
 8005862:	1b40      	subs	r0, r0, r5
 8005864:	2802      	cmp	r0, #2
 8005866:	d812      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xee>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005868:	6833      	ldr	r3, [r6, #0]
 800586a:	011f      	lsls	r7, r3, #4
 800586c:	d5f7      	bpl.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xbe>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	e79d      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8005872:	f7fd f9bf 	bl	8002bf4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800587a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800587e:	079b      	lsls	r3, r3, #30
 8005880:	f100 80a5 	bmi.w	80059ce <HAL_RCCEx_PeriphCLKConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005884:	f7fd f9b6 	bl	8002bf4 <HAL_GetTick>
 8005888:	1b80      	subs	r0, r0, r6
 800588a:	42b8      	cmp	r0, r7
 800588c:	d9f6      	bls.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        return HAL_TIMEOUT;
 800588e:	2003      	movs	r0, #3
}
 8005890:	b003      	add	sp, #12
 8005892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8005894:	4b55      	ldr	r3, [pc, #340]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005896:	4e56      	ldr	r6, [pc, #344]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PLLSAI_DISABLE();
 8005898:	2200      	movs	r2, #0
 800589a:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 800589c:	f7fd f9aa 	bl	8002bf4 <HAL_GetTick>
 80058a0:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058a2:	e004      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058a4:	f7fd f9a6 	bl	8002bf4 <HAL_GetTick>
 80058a8:	1b43      	subs	r3, r0, r5
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d8ef      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xee>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058ae:	6833      	ldr	r3, [r6, #0]
 80058b0:	0098      	lsls	r0, r3, #2
 80058b2:	d4f7      	bmi.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80058b4:	6822      	ldr	r2, [r4, #0]
 80058b6:	0751      	lsls	r1, r2, #29
 80058b8:	d515      	bpl.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058ba:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058bc:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058c0:	6920      	ldr	r0, [r4, #16]
 80058c2:	061b      	lsls	r3, r3, #24
 80058c4:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80058c8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80058cc:	430b      	orrs	r3, r1
 80058ce:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058d2:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80058d6:	6a21      	ldr	r1, [r4, #32]
 80058d8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80058dc:	3901      	subs	r1, #1
 80058de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80058e2:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058e6:	0713      	lsls	r3, r2, #28
 80058e8:	d514      	bpl.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058ea:	4a41      	ldr	r2, [pc, #260]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80058ec:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058ee:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80058f2:	6920      	ldr	r0, [r4, #16]
 80058f4:	071b      	lsls	r3, r3, #28
 80058f6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80058fa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80058fe:	430b      	orrs	r3, r1
 8005900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005904:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005908:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800590a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800590e:	430b      	orrs	r3, r1
 8005910:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8005914:	4b35      	ldr	r3, [pc, #212]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005916:	4e36      	ldr	r6, [pc, #216]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PLLSAI_ENABLE();
 8005918:	2201      	movs	r2, #1
 800591a:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 800591c:	f7fd f96a 	bl	8002bf4 <HAL_GetTick>
 8005920:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005922:	e004      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005924:	f7fd f966 	bl	8002bf4 <HAL_GetTick>
 8005928:	1b40      	subs	r0, r0, r5
 800592a:	2802      	cmp	r0, #2
 800592c:	d8af      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xee>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800592e:	6833      	ldr	r3, [r6, #0]
 8005930:	009f      	lsls	r7, r3, #2
 8005932:	d5f7      	bpl.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x184>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	e73d      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x14>
  return HAL_OK;
 8005938:	4618      	mov	r0, r3
}
 800593a:	b003      	add	sp, #12
 800593c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    PWR->CR |= PWR_CR_DBP;
 8005940:	4d2c      	ldr	r5, [pc, #176]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005942:	2200      	movs	r2, #0
 8005944:	9201      	str	r2, [sp, #4]
 8005946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005948:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005960:	f7fd f948 	bl	8002bf4 <HAL_GetTick>
 8005964:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005966:	e004      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005968:	f7fd f944 	bl	8002bf4 <HAL_GetTick>
 800596c:	1b83      	subs	r3, r0, r6
 800596e:	2b02      	cmp	r3, #2
 8005970:	d88d      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xee>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005972:	682b      	ldr	r3, [r5, #0]
 8005974:	05d9      	lsls	r1, r3, #23
 8005976:	d5f7      	bpl.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005978:	4d1d      	ldr	r5, [pc, #116]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800597a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800597c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800597e:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8005982:	d111      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005984:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005988:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800598c:	d021      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 800598e:	4918      	ldr	r1, [pc, #96]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005990:	688a      	ldr	r2, [r1, #8]
 8005992:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005996:	608a      	str	r2, [r1, #8]
 8005998:	4a15      	ldr	r2, [pc, #84]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800599a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	e708      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x1a>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059a8:	f403 7140 	and.w	r1, r3, #768	; 0x300
 80059ac:	4291      	cmp	r1, r2
 80059ae:	d0eb      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80059b2:	4a0e      	ldr	r2, [pc, #56]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80059b4:	2101      	movs	r1, #1
 80059b6:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059be:	2100      	movs	r1, #0
 80059c0:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80059c4:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80059c8:	07da      	lsls	r2, r3, #31
 80059ca:	f53f af52 	bmi.w	8005872 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059d0:	e7d8      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80059d2:	4807      	ldr	r0, [pc, #28]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80059d4:	6882      	ldr	r2, [r0, #8]
 80059d6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80059da:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80059de:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80059e2:	430a      	orrs	r2, r1
 80059e4:	6082      	str	r2, [r0, #8]
 80059e6:	e7d7      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80059e8:	42471000 	.word	0x42471000
 80059ec:	42470000 	.word	0x42470000
 80059f0:	40023800 	.word	0x40023800
 80059f4:	40007000 	.word	0x40007000

080059f8 <HAL_SAI_Init>:
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
  uint32_t syncen_bits = 0U;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f000 80bf 	beq.w	8005b7c <HAL_SAI_Init+0x184>
{
 80059fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005a00:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8005a04:	4604      	mov	r4, r0
 8005a06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8095 	beq.w	8005b3a <HAL_SAI_Init+0x142>
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005a10:	4b5b      	ldr	r3, [pc, #364]	; (8005b80 <HAL_SAI_Init+0x188>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005a12:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	485b      	ldr	r0, [pc, #364]	; (8005b84 <HAL_SAI_Init+0x18c>)
  hsai->State = HAL_SAI_STATE_BUSY;
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SAI_DISABLE(hsai);
 8005a1e:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005a20:	fba0 0303 	umull	r0, r3, r0, r3
 8005a24:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8005a26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005a2a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8005a2c:	600a      	str	r2, [r1, #0]
 8005a2e:	e002      	b.n	8005a36 <HAL_SAI_Init+0x3e>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005a30:	680a      	ldr	r2, [r1, #0]
 8005a32:	03d2      	lsls	r2, r2, #15
 8005a34:	d507      	bpl.n	8005a46 <HAL_SAI_Init+0x4e>
    if (count-- == 0U)
 8005a36:	3b01      	subs	r3, #1
 8005a38:	d2fa      	bcs.n	8005a30 <HAL_SAI_Init+0x38>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005a3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a42:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SAI_BlockSynchroConfig(hsai);
 8005a46:	4620      	mov	r0, r4
 8005a48:	f000 fb84 	bl	8006154 <SAI_BlockSynchroConfig>
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005a4c:	6a23      	ldr	r3, [r4, #32]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d178      	bne.n	8005b44 <HAL_SAI_Init+0x14c>
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005a52:	6b66      	ldr	r6, [r4, #52]	; 0x34
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8005a54:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005a56:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005a58:	6c22      	ldr	r2, [r4, #64]	; 0x40
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005a5a:	f033 0102 	bics.w	r1, r3, #2
 8005a5e:	d161      	bne.n	8005b24 <HAL_SAI_Init+0x12c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005a60:	2a01      	cmp	r2, #1
  switch (hsai->Init.Synchro)
 8005a62:	68a2      	ldr	r2, [r4, #8]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005a64:	bf18      	it	ne
 8005a66:	f44f 7100 	movne.w	r1, #512	; 0x200
  switch (hsai->Init.Synchro)
 8005a6a:	2a01      	cmp	r2, #1
 8005a6c:	d062      	beq.n	8005b34 <HAL_SAI_Init+0x13c>
 8005a6e:	3a02      	subs	r2, #2
  uint32_t syncen_bits = 0U;
 8005a70:	2a02      	cmp	r2, #2
 8005a72:	bf34      	ite	cc
 8005a74:	f44f 6000 	movcc.w	r0, #2048	; 0x800
 8005a78:	2000      	movcs	r0, #0
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005a7a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005a7c:	6822      	ldr	r2, [r4, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005a7e:	433b      	orrs	r3, r7
 8005a80:	6be7      	ldr	r7, [r4, #60]	; 0x3c
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005a82:	f8d2 c000 	ldr.w	ip, [r2]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005a86:	433b      	orrs	r3, r7
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005a88:	4f3f      	ldr	r7, [pc, #252]	; (8005b88 <HAL_SAI_Init+0x190>)
 8005a8a:	ea0c 0707 	and.w	r7, ip, r7
 8005a8e:	6017      	str	r7, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005a90:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005a92:	433b      	orrs	r3, r7
 8005a94:	6927      	ldr	r7, [r4, #16]
 8005a96:	433b      	orrs	r3, r7
 8005a98:	6967      	ldr	r7, [r4, #20]
 8005a9a:	433b      	orrs	r3, r7
 8005a9c:	6817      	ldr	r7, [r2, #0]
 8005a9e:	433b      	orrs	r3, r7
 8005aa0:	4333      	orrs	r3, r6
 8005aa2:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	4303      	orrs	r3, r0
 8005aaa:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005aac:	6851      	ldr	r1, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005aae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005ab0:	69a3      	ldr	r3, [r4, #24]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005ab2:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005ab6:	f021 010f 	bic.w	r1, r1, #15
 8005aba:	6051      	str	r1, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005abc:	4303      	orrs	r3, r0
 8005abe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005ac0:	6851      	ldr	r1, [r2, #4]
 8005ac2:	4303      	orrs	r3, r0
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005ac8:	6890      	ldr	r0, [r2, #8]
 8005aca:	4930      	ldr	r1, [pc, #192]	; (8005b8c <HAL_SAI_Init+0x194>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005acc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005ace:	4001      	ands	r1, r0
 8005ad0:	6091      	str	r1, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005ad2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005ad4:	6890      	ldr	r0, [r2, #8]
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005ada:	430b      	orrs	r3, r1
 8005adc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005ade:	4303      	orrs	r3, r0
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8005ae0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005ae2:	3901      	subs	r1, #1
 8005ae4:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8005ae6:	3801      	subs	r0, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005ae8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005aec:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8005aee:	68d1      	ldr	r1, [r2, #12]
 8005af0:	f24f 0520 	movw	r5, #61472	; 0xf020
 8005af4:	4029      	ands	r1, r5
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8005af6:	e9d4 3516 	ldrd	r3, r5, [r4, #88]	; 0x58
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8005afa:	60d1      	str	r1, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8005afc:	68d0      	ldr	r0, [r2, #12]
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8005afe:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8005b00:	432b      	orrs	r3, r5
 8005b02:	4303      	orrs	r3, r0
 8005b04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8005b08:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005b0a:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8005b0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b10:	60d3      	str	r3, [r2, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005b12:	2000      	movs	r0, #0
  hsai->State = HAL_SAI_STATE_READY;
 8005b14:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005b16:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hsai);
 8005b1a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hsai->State = HAL_SAI_STATE_READY;
 8005b1e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8005b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005b24:	2a01      	cmp	r2, #1
  switch (hsai->Init.Synchro)
 8005b26:	68a2      	ldr	r2, [r4, #8]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005b28:	bf14      	ite	ne
 8005b2a:	2100      	movne	r1, #0
 8005b2c:	f44f 7100 	moveq.w	r1, #512	; 0x200
  switch (hsai->Init.Synchro)
 8005b30:	2a01      	cmp	r2, #1
 8005b32:	d19c      	bne.n	8005a6e <HAL_SAI_Init+0x76>
 8005b34:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005b38:	e79f      	b.n	8005a7a <HAL_SAI_Init+0x82>
    hsai->Lock = HAL_UNLOCKED;
 8005b3a:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_SAI_MspInit(hsai);
 8005b3e:	f7fb fd9f 	bl	8001680 <HAL_SAI_MspInit>
 8005b42:	e765      	b.n	8005a10 <HAL_SAI_Init+0x18>
    freq = SAI_GetInputClock(hsai);
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 fb17 	bl	8006178 <SAI_GetInputClock>
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8005b4a:	6a21      	ldr	r1, [r4, #32]
    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8005b4c:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <HAL_SAI_Init+0x198>)
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005b4e:	6b66      	ldr	r6, [r4, #52]	; 0x34
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8005b50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b54:	0249      	lsls	r1, r1, #9
 8005b56:	0042      	lsls	r2, r0, #1
 8005b58:	fbb2 f2f1 	udiv	r2, r2, r1
    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8005b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b60:	08dd      	lsrs	r5, r3, #3
    if ((tmpregisterGCR % 10U) > 8U)
 8005b62:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8005b66:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
 8005b6a:	2a09      	cmp	r2, #9
      hsai->Init.Mckdiv += 1U;
 8005b6c:	bf08      	it	eq
 8005b6e:	3501      	addeq	r5, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005b70:	2e04      	cmp	r6, #4
      hsai->Init.Mckdiv += 1U;
 8005b72:	6265      	str	r5, [r4, #36]	; 0x24
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005b74:	bf04      	itt	eq
 8005b76:	086d      	lsreq	r5, r5, #1
 8005b78:	6265      	streq	r5, [r4, #36]	; 0x24
 8005b7a:	e76c      	b.n	8005a56 <HAL_SAI_Init+0x5e>
    return HAL_ERROR;
 8005b7c:	2001      	movs	r0, #1
}
 8005b7e:	4770      	bx	lr
 8005b80:	20000004 	.word	0x20000004
 8005b84:	95cbec1b 	.word	0x95cbec1b
 8005b88:	ff05c010 	.word	0xff05c010
 8005b8c:	fff88000 	.word	0xfff88000
 8005b90:	cccccccd 	.word	0xcccccccd

08005b94 <HAL_SAI_Abort>:
{
 8005b94:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hsai);
 8005b96:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d042      	beq.n	8005c24 <HAL_SAI_Abort+0x90>
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b9e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 8005ba0:	2601      	movs	r6, #1
 8005ba2:	f880 6080 	strb.w	r6, [r0, #128]	; 0x80
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005ba6:	6815      	ldr	r5, [r2, #0]
 8005ba8:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
 8005bac:	4604      	mov	r4, r0
 8005bae:	d011      	beq.n	8005bd4 <HAL_SAI_Abort+0x40>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005bb0:	6813      	ldr	r3, [r2, #0]
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8005bb2:	6f00      	ldr	r0, [r0, #112]	; 0x70
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005bb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bb8:	6013      	str	r3, [r2, #0]
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8005bba:	b118      	cbz	r0, 8005bc4 <HAL_SAI_Abort+0x30>
 8005bbc:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8005bc0:	2b12      	cmp	r3, #18
 8005bc2:	d043      	beq.n	8005c4c <HAL_SAI_Abort+0xb8>
  HAL_StatusTypeDef status = HAL_OK;
 8005bc4:	2500      	movs	r5, #0
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8005bc6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005bc8:	b118      	cbz	r0, 8005bd2 <HAL_SAI_Abort+0x3e>
 8005bca:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8005bce:	2b22      	cmp	r3, #34	; 0x22
 8005bd0:	d02b      	beq.n	8005c2a <HAL_SAI_Abort+0x96>
  hsai->Instance->IMR = 0U;
 8005bd2:	6822      	ldr	r2, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005bd4:	4b25      	ldr	r3, [pc, #148]	; (8005c6c <HAL_SAI_Abort+0xd8>)
  hsai->Instance->IMR = 0U;
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	6111      	str	r1, [r2, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005bda:	f04f 31ff 	mov.w	r1, #4294967295
 8005bde:	6191      	str	r1, [r2, #24]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4923      	ldr	r1, [pc, #140]	; (8005c70 <HAL_SAI_Abort+0xdc>)
 8005be4:	fba1 1303 	umull	r1, r3, r1, r3
  __HAL_SAI_DISABLE(hsai);
 8005be8:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005bea:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8005bec:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005bf0:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8005bf2:	6011      	str	r1, [r2, #0]
 8005bf4:	e002      	b.n	8005bfc <HAL_SAI_Abort+0x68>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005bf6:	6811      	ldr	r1, [r2, #0]
 8005bf8:	03c9      	lsls	r1, r1, #15
 8005bfa:	d507      	bpl.n	8005c0c <HAL_SAI_Abort+0x78>
    if (count-- == 0U)
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	d2fa      	bcs.n	8005bf6 <HAL_SAI_Abort+0x62>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005c00:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c08:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005c0c:	6853      	ldr	r3, [r2, #4]
 8005c0e:	f043 0308 	orr.w	r3, r3, #8
 8005c12:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8005c14:	2101      	movs	r1, #1
  __HAL_UNLOCK(hsai);
 8005c16:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8005c18:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  __HAL_UNLOCK(hsai);
 8005c1c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005c20:	4628      	mov	r0, r5
 8005c22:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hsai);
 8005c24:	2502      	movs	r5, #2
}
 8005c26:	4628      	mov	r0, r5
 8005c28:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8005c2a:	f7fd fc31 	bl	8003490 <HAL_DMA_Abort>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d0cf      	beq.n	8005bd2 <HAL_SAI_Abort+0x3e>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005c32:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c36:	2b80      	cmp	r3, #128	; 0x80
 8005c38:	d0cb      	beq.n	8005bd2 <HAL_SAI_Abort+0x3e>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005c3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  hsai->Instance->IMR = 0U;
 8005c3e:	6822      	ldr	r2, [r4, #0]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c44:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          status = HAL_ERROR;
 8005c48:	2501      	movs	r5, #1
 8005c4a:	e7c3      	b.n	8005bd4 <HAL_SAI_Abort+0x40>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8005c4c:	f7fd fc20 	bl	8003490 <HAL_DMA_Abort>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d0b7      	beq.n	8005bc4 <HAL_SAI_Abort+0x30>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8005c54:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c58:	2b80      	cmp	r3, #128	; 0x80
 8005c5a:	d0b3      	beq.n	8005bc4 <HAL_SAI_Abort+0x30>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005c5c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8005c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
          status = HAL_ERROR;
 8005c64:	4635      	mov	r5, r6
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005c66:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8005c6a:	e7ac      	b.n	8005bc6 <HAL_SAI_Abort+0x32>
 8005c6c:	20000004 	.word	0x20000004
 8005c70:	95cbec1b 	.word	0x95cbec1b

08005c74 <HAL_SAI_Transmit_DMA>:
{
 8005c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c78:	460f      	mov	r7, r1
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8005c7e:	f7fc ffb9 	bl	8002bf4 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0))
 8005c82:	2f00      	cmp	r7, #0
 8005c84:	d05d      	beq.n	8005d42 <HAL_SAI_Transmit_DMA+0xce>
 8005c86:	2d00      	cmp	r5, #0
 8005c88:	d05b      	beq.n	8005d42 <HAL_SAI_Transmit_DMA+0xce>
  if (hsai->State == HAL_SAI_STATE_READY)
 8005c8a:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	fa5f f883 	uxtb.w	r8, r3
 8005c94:	d150      	bne.n	8005d38 <HAL_SAI_Transmit_DMA+0xc4>
    __HAL_LOCK(hsai);
 8005c96:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d04c      	beq.n	8005d38 <HAL_SAI_Transmit_DMA+0xc4>
    hsai->XferSize = Size;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f365 030f 	bfi	r3, r5, #0, #16
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005ca4:	6822      	ldr	r2, [r4, #0]
    hsai->pBuffPtr = pData;
 8005ca6:	66a7      	str	r7, [r4, #104]	; 0x68
    hsai->XferSize = Size;
 8005ca8:	f365 431f 	bfi	r3, r5, #16, #16
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005cac:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8005d80 <HAL_SAI_Transmit_DMA+0x10c>
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005cb0:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 8005d84 <HAL_SAI_Transmit_DMA+0x110>
    hsai->XferSize = Size;
 8005cb4:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005cb6:	4606      	mov	r6, r0
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005cb8:	4639      	mov	r1, r7
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8005cba:	6f20      	ldr	r0, [r4, #112]	; 0x70
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8005cbc:	4f2f      	ldr	r7, [pc, #188]	; (8005d7c <HAL_SAI_Transmit_DMA+0x108>)
    __HAL_LOCK(hsai);
 8005cbe:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005cc2:	462b      	mov	r3, r5
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005cc4:	f04f 0912 	mov.w	r9, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005cc8:	2500      	movs	r5, #0
 8005cca:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005cce:	321c      	adds	r2, #28
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005cd0:	f884 9081 	strb.w	r9, [r4, #129]	; 0x81
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005cd4:	e9c0 ce0f 	strd	ip, lr, [r0, #60]	; 0x3c
    hsai->hdmatx->XferAbortCallback = NULL;
 8005cd8:	e9c0 7513 	strd	r7, r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8005cdc:	f7fd fb98 	bl	8003410 <HAL_DMA_Start_IT>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d133      	bne.n	8005d4c <HAL_SAI_Transmit_DMA+0xd8>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005ce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ce6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005ce8:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005cea:	d03d      	beq.n	8005d68 <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005cec:	2105      	movs	r1, #5
 8005cee:	2261      	movs	r2, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005cf0:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	bf98      	it	ls
 8005cf6:	4611      	movls	r1, r2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005cf8:	6822      	ldr	r2, [r4, #0]
 8005cfa:	6913      	ldr	r3, [r2, #16]
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005d00:	6813      	ldr	r3, [r2, #0]
 8005d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d06:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005d08:	e006      	b.n	8005d18 <HAL_SAI_Transmit_DMA+0xa4>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005d0a:	f7fc ff73 	bl	8002bf4 <HAL_GetTick>
 8005d0e:	1b83      	subs	r3, r0, r6
 8005d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d14:	d81d      	bhi.n	8005d52 <HAL_SAI_Transmit_DMA+0xde>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	6955      	ldr	r5, [r2, #20]
 8005d1a:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8005d1e:	d0f4      	beq.n	8005d0a <HAL_SAI_Transmit_DMA+0x96>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005d20:	6813      	ldr	r3, [r2, #0]
 8005d22:	03db      	lsls	r3, r3, #15
 8005d24:	d403      	bmi.n	8005d2e <HAL_SAI_Transmit_DMA+0xba>
      __HAL_SAI_ENABLE(hsai);
 8005d26:	6813      	ldr	r3, [r2, #0]
 8005d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d2c:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8005d2e:	f04f 0800 	mov.w	r8, #0
 8005d32:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    return HAL_OK;
 8005d36:	e001      	b.n	8005d3c <HAL_SAI_Transmit_DMA+0xc8>
    return HAL_BUSY;
 8005d38:	f04f 0802 	mov.w	r8, #2
}
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8005d42:	f04f 0801 	mov.w	r8, #1
}
 8005d46:	4640      	mov	r0, r8
 8005d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hsai);
 8005d4c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
      return  HAL_ERROR;
 8005d50:	e7f4      	b.n	8005d3c <HAL_SAI_Transmit_DMA+0xc8>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005d52:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(hsai);
 8005d56:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d5e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_TIMEOUT;
 8005d62:	f04f 0803 	mov.w	r8, #3
 8005d66:	e7e9      	b.n	8005d3c <HAL_SAI_Transmit_DMA+0xc8>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005d68:	f023 0202 	bic.w	r2, r3, #2
 8005d6c:	2a01      	cmp	r2, #1
 8005d6e:	bf0b      	itete	eq
 8005d70:	2115      	moveq	r1, #21
 8005d72:	2105      	movne	r1, #5
 8005d74:	2271      	moveq	r2, #113	; 0x71
 8005d76:	2261      	movne	r2, #97	; 0x61
 8005d78:	e7ba      	b.n	8005cf0 <HAL_SAI_Transmit_DMA+0x7c>
 8005d7a:	bf00      	nop
 8005d7c:	08005f4d 	.word	0x08005f4d
 8005d80:	08005ecd 	.word	0x08005ecd
 8005d84:	08005e65 	.word	0x08005e65

08005d88 <HAL_SAI_Receive_DMA>:
{
 8005d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((pData == NULL) || (Size == 0))
 8005d8c:	2900      	cmp	r1, #0
 8005d8e:	d04f      	beq.n	8005e30 <HAL_SAI_Receive_DMA+0xa8>
 8005d90:	2a00      	cmp	r2, #0
 8005d92:	d04d      	beq.n	8005e30 <HAL_SAI_Receive_DMA+0xa8>
  if (hsai->State == HAL_SAI_STATE_READY)
 8005d94:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	b2dd      	uxtb	r5, r3
 8005d9e:	d143      	bne.n	8005e28 <HAL_SAI_Receive_DMA+0xa0>
    __HAL_LOCK(hsai);
 8005da0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d03f      	beq.n	8005e28 <HAL_SAI_Receive_DMA+0xa0>
    hsai->XferSize = Size;
 8005da8:	2300      	movs	r3, #0
 8005daa:	f362 030f 	bfi	r3, r2, #0, #16
 8005dae:	f362 431f 	bfi	r3, r2, #16, #16
    __HAL_LOCK(hsai);
 8005db2:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005db6:	2600      	movs	r6, #0
    hsai->XferSize = Size;
 8005db8:	e9c0 131a 	strd	r1, r3, [r0, #104]	; 0x68
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005dbc:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005dc0:	f8df e094 	ldr.w	lr, [pc, #148]	; 8005e58 <HAL_SAI_Receive_DMA+0xd0>
 8005dc4:	6f40      	ldr	r0, [r0, #116]	; 0x74
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005dc6:	f8df c094 	ldr.w	ip, [pc, #148]	; 8005e5c <HAL_SAI_Receive_DMA+0xd4>
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005dca:	4f22      	ldr	r7, [pc, #136]	; (8005e54 <HAL_SAI_Receive_DMA+0xcc>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005dcc:	4613      	mov	r3, r2
 8005dce:	460a      	mov	r2, r1
 8005dd0:	6821      	ldr	r1, [r4, #0]
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8005dd2:	f04f 0822 	mov.w	r8, #34	; 0x22
 8005dd6:	f884 8081 	strb.w	r8, [r4, #129]	; 0x81
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005dda:	311c      	adds	r1, #28
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8005ddc:	e9c0 ce0f 	strd	ip, lr, [r0, #60]	; 0x3c
    hsai->hdmarx->XferAbortCallback = NULL;
 8005de0:	e9c0 7613 	strd	r7, r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005de4:	f7fd fb14 	bl	8003410 <HAL_DMA_Start_IT>
 8005de8:	bb30      	cbnz	r0, 8005e38 <HAL_SAI_Receive_DMA+0xb0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005dea:	6b63      	ldr	r3, [r4, #52]	; 0x34
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005dec:	6862      	ldr	r2, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005dee:	2b08      	cmp	r3, #8
 8005df0:	d027      	beq.n	8005e42 <HAL_SAI_Receive_DMA+0xba>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005df2:	2105      	movs	r1, #5
 8005df4:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005df6:	6823      	ldr	r3, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005df8:	3a02      	subs	r2, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005dfa:	2a01      	cmp	r2, #1
 8005dfc:	bf98      	it	ls
 8005dfe:	4601      	movls	r1, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005e0c:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	03d2      	lsls	r2, r2, #15
 8005e12:	d403      	bmi.n	8005e1c <HAL_SAI_Receive_DMA+0x94>
      __HAL_SAI_ENABLE(hsai);
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005e1a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8005e1c:	2500      	movs	r5, #0
 8005e1e:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
}
 8005e22:	4628      	mov	r0, r5
 8005e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005e28:	2502      	movs	r5, #2
}
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return  HAL_ERROR;
 8005e30:	2501      	movs	r5, #1
}
 8005e32:	4628      	mov	r0, r5
 8005e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hsai);
 8005e38:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80
}
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005e42:	f022 0302 	bic.w	r3, r2, #2
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	bf0b      	itete	eq
 8005e4a:	2115      	moveq	r1, #21
 8005e4c:	2105      	movne	r1, #5
 8005e4e:	2071      	moveq	r0, #113	; 0x71
 8005e50:	2061      	movne	r0, #97	; 0x61
 8005e52:	e7d0      	b.n	8005df6 <HAL_SAI_Receive_DMA+0x6e>
 8005e54:	08005f4d 	.word	0x08005f4d
 8005e58:	08005f3d 	.word	0x08005f3d
 8005e5c:	08005ed9 	.word	0x08005ed9

08005e60 <HAL_SAI_TxCpltCallback>:
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop

08005e64 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005e64:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005e66:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e68:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6e:	d01b      	beq.n	8005ea8 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0U;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005e70:	6803      	ldr	r3, [r0, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005e72:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005e74:	681a      	ldr	r2, [r3, #0]
    hsai->XferCount = 0U;
 8005e76:	f04f 0c00 	mov.w	ip, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005e7a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005e7e:	2908      	cmp	r1, #8
    hsai->XferCount = 0U;
 8005e80:	f8a0 c06e 	strh.w	ip, [r0, #110]	; 0x6e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005e84:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005e86:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005e88:	d011      	beq.n	8005eae <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005e8a:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8005e8e:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e92:	3a02      	subs	r2, #2
 8005e94:	2a01      	cmp	r2, #1
 8005e96:	bf98      	it	ls
 8005e98:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005e9a:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005e9c:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005ea0:	400a      	ands	r2, r1
 8005ea2:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8005ea4:	f880 c081 	strb.w	ip, [r0, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005ea8:	f7ff ffda 	bl	8005e60 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005eac:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005eae:	f022 0102 	bic.w	r1, r2, #2
 8005eb2:	2901      	cmp	r1, #1
 8005eb4:	bf0b      	itete	eq
 8005eb6:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8005eba:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8005ebe:	f06f 0115 	mvneq.w	r1, #21
 8005ec2:	f06f 0105 	mvnne.w	r1, #5
 8005ec6:	e7e4      	b.n	8005e92 <SAI_DMATxCplt+0x2e>

08005ec8 <HAL_SAI_TxHalfCpltCallback>:
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop

08005ecc <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005ece:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005ed0:	f7ff fffa 	bl	8005ec8 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005ed4:	bd08      	pop	{r3, pc}
 8005ed6:	bf00      	nop

08005ed8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005eda:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005edc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee2:	d01b      	beq.n	8005f1c <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005ee4:	6803      	ldr	r3, [r0, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005ee6:	6b41      	ldr	r1, [r0, #52]	; 0x34
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005ee8:	681a      	ldr	r2, [r3, #0]
    hsai->XferCount = 0U;
 8005eea:	f04f 0c00 	mov.w	ip, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005eee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005ef2:	2908      	cmp	r1, #8
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005ef4:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005ef6:	6842      	ldr	r2, [r0, #4]
    hsai->XferCount = 0U;
 8005ef8:	f8a0 c06e 	strh.w	ip, [r0, #110]	; 0x6e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005efc:	d011      	beq.n	8005f22 <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005efe:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8005f02:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005f06:	3a02      	subs	r2, #2
 8005f08:	2a01      	cmp	r2, #1
 8005f0a:	bf98      	it	ls
 8005f0c:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005f0e:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005f10:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005f14:	400a      	ands	r2, r1
 8005f16:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8005f18:	f880 c081 	strb.w	ip, [r0, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005f1c:	f7fb f94c 	bl	80011b8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005f20:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005f22:	f022 0102 	bic.w	r1, r2, #2
 8005f26:	2901      	cmp	r1, #1
 8005f28:	bf0b      	itete	eq
 8005f2a:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8005f2e:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8005f32:	f06f 0115 	mvneq.w	r1, #21
 8005f36:	f06f 0105 	mvnne.w	r1, #5
 8005f3a:	e7e4      	b.n	8005f06 <SAI_DMARxCplt+0x2e>

08005f3c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005f3e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005f40:	f7fb f908 	bl	8001154 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005f44:	bd08      	pop	{r3, pc}
 8005f46:	bf00      	nop

08005f48 <HAL_SAI_ErrorCallback>:
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop

08005f4c <SAI_DMAError>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f4c:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005f4e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005f52:	6f02      	ldr	r2, [r0, #112]	; 0x70
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
{
 8005f58:	b510      	push	{r4, lr}
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005f5a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005f5e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d006      	beq.n	8005f72 <SAI_DMAError+0x26>
 8005f64:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d002      	beq.n	8005f72 <SAI_DMAError+0x26>
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005f6c:	f7ff ffec 	bl	8005f48 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005f70:	bd10      	pop	{r4, pc}
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005f72:	6801      	ldr	r1, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005f74:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <SAI_DMAError+0x70>)
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005f76:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4c11      	ldr	r4, [pc, #68]	; (8005fc0 <SAI_DMAError+0x74>)
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005f7c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005f80:	600a      	str	r2, [r1, #0]
  __HAL_SAI_DISABLE(hsai);
 8005f82:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005f84:	fba4 4303 	umull	r4, r3, r4, r3
 8005f88:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8005f8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005f8e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8005f90:	600a      	str	r2, [r1, #0]
 8005f92:	e002      	b.n	8005f9a <SAI_DMAError+0x4e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005f94:	680a      	ldr	r2, [r1, #0]
 8005f96:	03d2      	lsls	r2, r2, #15
 8005f98:	d507      	bpl.n	8005faa <SAI_DMAError+0x5e>
    if (count-- == 0U)
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	d2fa      	bcs.n	8005f94 <SAI_DMAError+0x48>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005f9e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_READY;
 8005faa:	2201      	movs	r2, #1
    hsai->XferCount = 0U;
 8005fac:	2300      	movs	r3, #0
    hsai->State = HAL_SAI_STATE_READY;
 8005fae:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
    hsai->XferCount = 0U;
 8005fb2:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
  HAL_SAI_ErrorCallback(hsai);
 8005fb6:	f7ff ffc7 	bl	8005f48 <HAL_SAI_ErrorCallback>
}
 8005fba:	bd10      	pop	{r4, pc}
 8005fbc:	20000004 	.word	0x20000004
 8005fc0:	95cbec1b 	.word	0x95cbec1b

08005fc4 <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005fc4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8005fc8:	b903      	cbnz	r3, 8005fcc <HAL_SAI_IRQHandler+0x8>
 8005fca:	4770      	bx	lr
    uint32_t itflags = hsai->Instance->SR;
 8005fcc:	6803      	ldr	r3, [r0, #0]
 8005fce:	695a      	ldr	r2, [r3, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8005fd0:	6919      	ldr	r1, [r3, #16]
{
 8005fd2:	b570      	push	{r4, r5, r6, lr}
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005fd4:	0716      	lsls	r6, r2, #28
    uint32_t cr1config = hsai->Instance->CR1;
 8005fd6:	681d      	ldr	r5, [r3, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8005fd8:	4604      	mov	r4, r0
 8005fda:	d505      	bpl.n	8005fe8 <HAL_SAI_IRQHandler+0x24>
 8005fdc:	070e      	lsls	r6, r1, #28
 8005fde:	d503      	bpl.n	8005fe8 <HAL_SAI_IRQHandler+0x24>
}
 8005fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hsai->InterruptServiceRoutine(hsai);
 8005fe4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005fe6:	4718      	bx	r3
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8005fe8:	07d6      	lsls	r6, r2, #31
 8005fea:	d512      	bpl.n	8006012 <HAL_SAI_IRQHandler+0x4e>
 8005fec:	f011 0001 	ands.w	r0, r1, #1
 8005ff0:	d00f      	beq.n	8006012 <HAL_SAI_IRQHandler+0x4e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	619a      	str	r2, [r3, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8005ff6:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
      hsai->ErrorCode |= tmperror;
 8005ffa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8005ffe:	2a22      	cmp	r2, #34	; 0x22
 8006000:	bf18      	it	ne
 8006002:	2002      	movne	r0, #2
      hsai->ErrorCode |= tmperror;
 8006004:	4318      	orrs	r0, r3
 8006006:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      HAL_SAI_ErrorCallback(hsai);
 800600a:	4620      	mov	r0, r4
 800600c:	f7ff ff9c 	bl	8005f48 <HAL_SAI_ErrorCallback>
}
 8006010:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8006012:	0790      	lsls	r0, r2, #30
 8006014:	d509      	bpl.n	800602a <HAL_SAI_IRQHandler+0x66>
 8006016:	078e      	lsls	r6, r1, #30
 8006018:	d507      	bpl.n	800602a <HAL_SAI_IRQHandler+0x66>
      if (hsai->mutecallback != (SAIcallback)NULL)
 800601a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800601c:	2102      	movs	r1, #2
 800601e:	6199      	str	r1, [r3, #24]
      if (hsai->mutecallback != (SAIcallback)NULL)
 8006020:	2a00      	cmp	r2, #0
 8006022:	d0f5      	beq.n	8006010 <HAL_SAI_IRQHandler+0x4c>
}
 8006024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hsai->mutecallback();
 8006028:	4710      	bx	r2
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800602a:	0690      	lsls	r0, r2, #26
 800602c:	d514      	bpl.n	8006058 <HAL_SAI_IRQHandler+0x94>
 800602e:	068e      	lsls	r6, r1, #26
 8006030:	d512      	bpl.n	8006058 <HAL_SAI_IRQHandler+0x94>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8006032:	2220      	movs	r2, #32
 8006034:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8006036:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800603a:	03ad      	lsls	r5, r5, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800603c:	f043 0304 	orr.w	r3, r3, #4
 8006040:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006044:	d516      	bpl.n	8006074 <HAL_SAI_IRQHandler+0xb0>
        if (hsai->hdmatx != NULL)
 8006046:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006048:	2800      	cmp	r0, #0
 800604a:	d045      	beq.n	80060d8 <HAL_SAI_IRQHandler+0x114>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800604c:	4b24      	ldr	r3, [pc, #144]	; (80060e0 <HAL_SAI_IRQHandler+0x11c>)
 800604e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8006050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8006054:	f7fd ba64 	b.w	8003520 <HAL_DMA_Abort_IT>
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8006058:	0650      	lsls	r0, r2, #25
 800605a:	d512      	bpl.n	8006082 <HAL_SAI_IRQHandler+0xbe>
 800605c:	064e      	lsls	r6, r1, #25
 800605e:	d510      	bpl.n	8006082 <HAL_SAI_IRQHandler+0xbe>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8006060:	2240      	movs	r2, #64	; 0x40
 8006062:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8006064:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006068:	03ad      	lsls	r5, r5, #14
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800606a:	f043 0308 	orr.w	r3, r3, #8
 800606e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006072:	d4e8      	bmi.n	8006046 <HAL_SAI_IRQHandler+0x82>
        HAL_SAI_Abort(hsai);
 8006074:	4620      	mov	r0, r4
 8006076:	f7ff fd8d 	bl	8005b94 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
 800607a:	4620      	mov	r0, r4
 800607c:	f7ff ff64 	bl	8005f48 <HAL_SAI_ErrorCallback>
}
 8006080:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8006082:	0750      	lsls	r0, r2, #29
 8006084:	d519      	bpl.n	80060ba <HAL_SAI_IRQHandler+0xf6>
 8006086:	074e      	lsls	r6, r1, #29
 8006088:	d517      	bpl.n	80060ba <HAL_SAI_IRQHandler+0xf6>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800608a:	2204      	movs	r2, #4
 800608c:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800608e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8006092:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8006096:	f042 0220 	orr.w	r2, r2, #32
 800609a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800609e:	d1d2      	bne.n	8006046 <HAL_SAI_IRQHandler+0x82>
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80060a0:	f04f 31ff 	mov.w	r1, #4294967295
        hsai->State = HAL_SAI_STATE_READY;
 80060a4:	2201      	movs	r2, #1
        hsai->Instance->IMR = 0U;
 80060a6:	611d      	str	r5, [r3, #16]
        HAL_SAI_ErrorCallback(hsai);
 80060a8:	4620      	mov	r0, r4
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80060aa:	6199      	str	r1, [r3, #24]
        hsai->State = HAL_SAI_STATE_READY;
 80060ac:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
        hsai->XferCount = 0U;
 80060b0:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
        HAL_SAI_ErrorCallback(hsai);
 80060b4:	f7ff ff48 	bl	8005f48 <HAL_SAI_ErrorCallback>
}
 80060b8:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80060ba:	06d0      	lsls	r0, r2, #27
 80060bc:	d5a8      	bpl.n	8006010 <HAL_SAI_IRQHandler+0x4c>
 80060be:	06ca      	lsls	r2, r1, #27
 80060c0:	d5a6      	bpl.n	8006010 <HAL_SAI_IRQHandler+0x4c>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80060c2:	2210      	movs	r2, #16
 80060c4:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80060c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80060ca:	4313      	orrs	r3, r2
      HAL_SAI_ErrorCallback(hsai);
 80060cc:	4620      	mov	r0, r4
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80060ce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_SAI_ErrorCallback(hsai);
 80060d2:	f7ff ff39 	bl	8005f48 <HAL_SAI_ErrorCallback>
}
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
        else if (hsai->hdmarx != NULL)
 80060d8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80060da:	2800      	cmp	r0, #0
 80060dc:	d1b6      	bne.n	800604c <HAL_SAI_IRQHandler+0x88>
 80060de:	e797      	b.n	8006010 <HAL_SAI_IRQHandler+0x4c>
 80060e0:	080060e5 	.word	0x080060e5

080060e4 <SAI_DMAAbort>:
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060e4:	6b80      	ldr	r0, [r0, #56]	; 0x38

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80060e6:	6802      	ldr	r2, [r0, #0]
 80060e8:	6813      	ldr	r3, [r2, #0]
{
 80060ea:	b510      	push	{r4, lr}
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80060ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80060f0:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80060f2:	f04f 31ff 	mov.w	r1, #4294967295
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80060f6:	6013      	str	r3, [r2, #0]
  hsai->Instance->IMR = 0U;
 80060f8:	6114      	str	r4, [r2, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80060fa:	6191      	str	r1, [r2, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80060fc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006100:	2b20      	cmp	r3, #32
 8006102:	d01a      	beq.n	800613a <SAI_DMAAbort+0x56>
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006104:	4b11      	ldr	r3, [pc, #68]	; (800614c <SAI_DMAAbort+0x68>)
 8006106:	4c12      	ldr	r4, [pc, #72]	; (8006150 <SAI_DMAAbort+0x6c>)
 8006108:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 800610a:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800610c:	fba4 4303 	umull	r4, r3, r4, r3
 8006110:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8006112:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006116:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8006118:	6011      	str	r1, [r2, #0]
 800611a:	e002      	b.n	8006122 <SAI_DMAAbort+0x3e>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800611c:	6811      	ldr	r1, [r2, #0]
 800611e:	03c9      	lsls	r1, r1, #15
 8006120:	d507      	bpl.n	8006132 <SAI_DMAAbort+0x4e>
    if (count-- == 0U)
 8006122:	3b01      	subs	r3, #1
 8006124:	d2fa      	bcs.n	800611c <SAI_DMAAbort+0x38>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006126:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800612a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800612e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006132:	6853      	ldr	r3, [r2, #4]
 8006134:	f043 0308 	orr.w	r3, r3, #8
 8006138:	6053      	str	r3, [r2, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800613a:	2201      	movs	r2, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800613c:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 800613e:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  hsai->XferCount = 0U;
 8006142:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8006146:	f7ff feff 	bl	8005f48 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800614a:	bd10      	pop	{r4, pc}
 800614c:	20000004 	.word	0x20000004
 8006150:	95cbec1b 	.word	0x95cbec1b

08006154 <SAI_BlockSynchroConfig>:
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006154:	68c3      	ldr	r3, [r0, #12]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d007      	beq.n	800616a <SAI_BlockSynchroConfig+0x16>
      break;
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800615a:	2b02      	cmp	r3, #2
      break;
    default:
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
 800615c:	4a05      	ldr	r2, [pc, #20]	; (8006174 <SAI_BlockSynchroConfig+0x20>)
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800615e:	bf14      	ite	ne
 8006160:	2300      	movne	r3, #0
 8006162:	2320      	moveq	r3, #32
  SAI1->GCR = tmpregisterGCR;
 8006164:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8006168:	4770      	bx	lr
  SAI1->GCR = tmpregisterGCR;
 800616a:	4a02      	ldr	r2, [pc, #8]	; (8006174 <SAI_BlockSynchroConfig+0x20>)
  switch (hsai->Init.SynchroExt)
 800616c:	2310      	movs	r3, #16
  SAI1->GCR = tmpregisterGCR;
 800616e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 8006172:	4770      	bx	lr
 8006174:	40015000 	.word	0x40015000

08006178 <SAI_GetInputClock>:

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8006178:	6802      	ldr	r2, [r0, #0]
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800617a:	4921      	ldr	r1, [pc, #132]	; (8006200 <SAI_GetInputClock+0x88>)
  if (hsai->Instance == SAI1_Block_A)
 800617c:	4b21      	ldr	r3, [pc, #132]	; (8006204 <SAI_GetInputClock+0x8c>)
 800617e:	429a      	cmp	r2, r3
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8006180:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8006184:	69c2      	ldr	r2, [r0, #28]

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006186:	4820      	ldr	r0, [pc, #128]	; (8006208 <SAI_GetInputClock+0x90>)
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8006188:	bf0b      	itete	eq
 800618a:	f423 1340 	biceq.w	r3, r3, #3145728	; 0x300000
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 800618e:	f423 0340 	bicne.w	r3, r3, #12582912	; 0xc00000
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8006192:	4313      	orreq	r3, r2
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8006194:	ea43 0382 	orrne.w	r3, r3, r2, lsl #2
 8006198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800619c:	4b18      	ldr	r3, [pc, #96]	; (8006200 <SAI_GetInputClock+0x88>)
 800619e:	6859      	ldr	r1, [r3, #4]
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a6:	fbb0 f3f3 	udiv	r3, r0, r3
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 80061aa:	b9a2      	cbnz	r2, 80061d6 <SAI_GetInputClock+0x5e>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80061ac:	4a14      	ldr	r2, [pc, #80]	; (8006200 <SAI_GetInputClock+0x88>)
 80061ae:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 80061b2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80061b6:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 80061ba:	f3c0 1088 	ubfx	r0, r0, #6, #9
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80061be:	f3c2 2204 	ubfx	r2, r2, #8, #5
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80061c2:	fb03 f000 	mul.w	r0, r3, r0
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80061c6:	f3c1 6103 	ubfx	r1, r1, #24, #4

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80061ca:	1c53      	adds	r3, r2, #1
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80061cc:	fbb0 f0f1 	udiv	r0, r0, r1
    saiclocksource = saiclocksource / (tmpreg);
 80061d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80061d4:	4770      	bx	lr
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 80061d6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80061da:	d005      	beq.n	80061e8 <SAI_GetInputClock+0x70>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 80061dc:	4b0b      	ldr	r3, [pc, #44]	; (800620c <SAI_GetInputClock+0x94>)

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 80061de:	480c      	ldr	r0, [pc, #48]	; (8006210 <SAI_GetInputClock+0x98>)
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 80061e0:	2201      	movs	r2, #1
 80061e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
}
 80061e6:	4770      	bx	lr
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80061e8:	4a05      	ldr	r2, [pc, #20]	; (8006200 <SAI_GetInputClock+0x88>)
 80061ea:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80061ee:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80061f2:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80061f6:	f3c0 1088 	ubfx	r0, r0, #6, #9
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80061fa:	f002 021f 	and.w	r2, r2, #31
 80061fe:	e7e0      	b.n	80061c2 <SAI_GetInputClock+0x4a>
 8006200:	40023800 	.word	0x40023800
 8006204:	40015804 	.word	0x40015804
 8006208:	00f42400 	.word	0x00f42400
 800620c:	42470000 	.word	0x42470000
 8006210:	00bb8000 	.word	0x00bb8000

08006214 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006214:	b1f0      	cbz	r0, 8006254 <HAL_SDRAM_Init+0x40>
{
 8006216:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006218:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800621c:	460d      	mov	r5, r1
 800621e:	4604      	mov	r4, r0
 8006220:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006224:	b18b      	cbz	r3, 800624a <HAL_SDRAM_Init+0x36>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006226:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006228:	2302      	movs	r3, #2
 800622a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800622e:	f851 0b04 	ldr.w	r0, [r1], #4
 8006232:	f000 f8e1 	bl	80063f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006236:	e9d4 0200 	ldrd	r0, r2, [r4]
 800623a:	4629      	mov	r1, r5
 800623c:	f000 f91a 	bl	8006474 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006240:	2301      	movs	r3, #1
 8006242:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8006246:	2000      	movs	r0, #0
}
 8006248:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800624a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800624e:	f7fa fb5b 	bl	8000908 <HAL_SDRAM_MspInit>
 8006252:	e7e8      	b.n	8006226 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8006254:	2001      	movs	r0, #1
}
 8006256:	4770      	bx	lr

08006258 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006258:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800625a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800625e:	2b02      	cmp	r3, #2
{
 8006260:	4605      	mov	r5, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006262:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8006264:	d004      	beq.n	8006270 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006266:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800626a:	2c01      	cmp	r4, #1
 800626c:	d001      	beq.n	8006272 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800626e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8006270:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006272:	460e      	mov	r6, r1
 8006274:	2302      	movs	r3, #2
 8006276:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800627a:	6828      	ldr	r0, [r5, #0]
 800627c:	f000 f946 	bl	800650c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	2b02      	cmp	r3, #2
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006284:	bf06      	itte	eq
 8006286:	2305      	moveq	r3, #5
 8006288:	f885 302c 	strbeq.w	r3, [r5, #44]	; 0x2c
      hsdram->State = HAL_SDRAM_STATE_READY;
 800628c:	f885 402c 	strbne.w	r4, [r5, #44]	; 0x2c
  return HAL_OK;
 8006290:	2000      	movs	r0, #0
}
 8006292:	bd70      	pop	{r4, r5, r6, pc}

08006294 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006294:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006296:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800629a:	2b02      	cmp	r3, #2
{
 800629c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800629e:	b2d8      	uxtb	r0, r3
 80062a0:	d005      	beq.n	80062ae <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80062a2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	b2dd      	uxtb	r5, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 80062ac:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062b0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80062b2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062b4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80062b8:	f000 f952 	bl	8006560 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 80062bc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  return HAL_OK;
 80062c0:	2000      	movs	r0, #0
}
 80062c2:	bd38      	pop	{r3, r4, r5, pc}

080062c4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c4:	2800      	cmp	r0, #0
 80062c6:	f000 808f 	beq.w	80063e8 <HAL_UART_Init+0x124>
{
 80062ca:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80062d0:	4604      	mov	r4, r0
 80062d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 8081 	beq.w	80063de <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062dc:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062de:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80062e0:	2224      	movs	r2, #36	; 0x24
 80062e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ec:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062ee:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062f0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062f2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80062f6:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062f8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062fa:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062fc:	4302      	orrs	r2, r0
 80062fe:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8006300:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006302:	4302      	orrs	r2, r0
 8006304:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8006306:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800630a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800630e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006310:	430a      	orrs	r2, r1
 8006312:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006318:	4934      	ldr	r1, [pc, #208]	; (80063ec <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800631a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800631e:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006320:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006322:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006324:	d035      	beq.n	8006392 <HAL_UART_Init+0xce>
 8006326:	4a32      	ldr	r2, [pc, #200]	; (80063f0 <HAL_UART_Init+0x12c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d032      	beq.n	8006392 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800632c:	f7ff fa18 	bl	8005760 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006330:	69e3      	ldr	r3, [r4, #28]
 8006332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006336:	d032      	beq.n	800639e <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006338:	6863      	ldr	r3, [r4, #4]
 800633a:	2119      	movs	r1, #25
 800633c:	009a      	lsls	r2, r3, #2
 800633e:	fba0 0101 	umull	r0, r1, r0, r1
 8006342:	0f9b      	lsrs	r3, r3, #30
 8006344:	f7f9 ffb4 	bl	80002b0 <__aeabi_uldivmod>
 8006348:	492a      	ldr	r1, [pc, #168]	; (80063f4 <HAL_UART_Init+0x130>)
 800634a:	fba1 3200 	umull	r3, r2, r1, r0
 800634e:	0952      	lsrs	r2, r2, #5
 8006350:	2564      	movs	r5, #100	; 0x64
 8006352:	fb05 0012 	mls	r0, r5, r2, r0
 8006356:	0100      	lsls	r0, r0, #4
 8006358:	3032      	adds	r0, #50	; 0x32
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	fba1 1000 	umull	r1, r0, r1, r0
 8006360:	0112      	lsls	r2, r2, #4
 8006362:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8006366:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800636e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006376:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006378:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800637c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800637e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006382:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006384:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006386:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800638a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800638e:	4628      	mov	r0, r5
}
 8006390:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8006392:	f7ff f9f5 	bl	8005780 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006396:	69e3      	ldr	r3, [r4, #28]
 8006398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639c:	d1cc      	bne.n	8006338 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800639e:	6862      	ldr	r2, [r4, #4]
 80063a0:	2119      	movs	r1, #25
 80063a2:	1892      	adds	r2, r2, r2
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	415b      	adcs	r3, r3
 80063aa:	fba0 0101 	umull	r0, r1, r0, r1
 80063ae:	f7f9 ff7f 	bl	80002b0 <__aeabi_uldivmod>
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <HAL_UART_Init+0x130>)
 80063b4:	fba3 2100 	umull	r2, r1, r3, r0
 80063b8:	094d      	lsrs	r5, r1, #5
 80063ba:	2264      	movs	r2, #100	; 0x64
 80063bc:	fb02 0215 	mls	r2, r2, r5, r0
 80063c0:	00d2      	lsls	r2, r2, #3
 80063c2:	3232      	adds	r2, #50	; 0x32
 80063c4:	fba3 3202 	umull	r3, r2, r3, r2
 80063c8:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80063cc:	0912      	lsrs	r2, r2, #4
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80063d4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80063d8:	440a      	add	r2, r1
 80063da:	609a      	str	r2, [r3, #8]
 80063dc:	e7c4      	b.n	8006368 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 80063de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80063e2:	f7fb fa83 	bl	80018ec <HAL_UART_MspInit>
 80063e6:	e779      	b.n	80062dc <HAL_UART_Init+0x18>
    return HAL_ERROR;
 80063e8:	2001      	movs	r0, #1
}
 80063ea:	4770      	bx	lr
 80063ec:	40011000 	.word	0x40011000
 80063f0:	40011400 	.word	0x40011400
 80063f4:	51eb851f 	.word	0x51eb851f

080063f8 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80063f8:	680b      	ldr	r3, [r1, #0]
{
 80063fa:	b430      	push	{r4, r5}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80063fc:	b9d3      	cbnz	r3, 8006434 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80063fe:	6803      	ldr	r3, [r0, #0]
 8006400:	684c      	ldr	r4, [r1, #4]
 8006402:	688a      	ldr	r2, [r1, #8]
 8006404:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006408:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800640c:	4323      	orrs	r3, r4
 800640e:	4313      	orrs	r3, r2
 8006410:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 8006414:	4323      	orrs	r3, r4
 8006416:	4313      	orrs	r3, r2
 8006418:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800641c:	4323      	orrs	r3, r4
 800641e:	e9d1 5407 	ldrd	r5, r4, [r1, #28]
 8006422:	4313      	orrs	r3, r2
 8006424:	432b      	orrs	r3, r5
 8006426:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8006428:	4323      	orrs	r3, r4
 800642a:	4313      	orrs	r3, r2
 800642c:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800642e:	bc30      	pop	{r4, r5}
 8006430:	2000      	movs	r0, #0
 8006432:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006434:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8006438:	6802      	ldr	r2, [r0, #0]
 800643a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800643e:	4322      	orrs	r2, r4
 8006440:	431a      	orrs	r2, r3
 8006442:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006444:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006446:	431a      	orrs	r2, r3
 8006448:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800644a:	6843      	ldr	r3, [r0, #4]
 800644c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006450:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006454:	4323      	orrs	r3, r4
 8006456:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800645a:	4323      	orrs	r3, r4
 800645c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 8006460:	4313      	orrs	r3, r2
 8006462:	432b      	orrs	r3, r5
 8006464:	698a      	ldr	r2, [r1, #24]
 8006466:	4323      	orrs	r3, r4
 8006468:	4313      	orrs	r3, r2
 800646a:	6043      	str	r3, [r0, #4]
}
 800646c:	bc30      	pop	{r4, r5}
 800646e:	2000      	movs	r0, #0
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop

08006474 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006474:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006476:	6883      	ldr	r3, [r0, #8]
  if (Bank == FMC_SDRAM_BANK1)
 8006478:	bb02      	cbnz	r2, 80064bc <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800647a:	e9d1 2400 	ldrd	r2, r4, [r1]
 800647e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006482:	3c01      	subs	r4, #1
 8006484:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8006488:	3a01      	subs	r2, #1
 800648a:	4313      	orrs	r3, r2
 800648c:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8006490:	3c01      	subs	r4, #1
 8006492:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006496:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800649a:	3a01      	subs	r2, #1
 800649c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80064a0:	698a      	ldr	r2, [r1, #24]
 80064a2:	1e69      	subs	r1, r5, #1
 80064a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80064a8:	1e61      	subs	r1, r4, #1
 80064aa:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80064ae:	3a01      	subs	r2, #1
 80064b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80064b4:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80064b6:	bc30      	pop	{r4, r5}
 80064b8:	2000      	movs	r0, #0
 80064ba:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80064bc:	68cc      	ldr	r4, [r1, #12]
 80064be:	694a      	ldr	r2, [r1, #20]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80064c0:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80064c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064c6:	3c01      	subs	r4, #1
 80064c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064cc:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 80064d0:	3a01      	subs	r2, #1
 80064d2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80064d6:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80064d8:	e9d1 2400 	ldrd	r2, r4, [r1]
 80064dc:	68c3      	ldr	r3, [r0, #12]
 80064de:	3c01      	subs	r4, #1
 80064e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80064e4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80064e8:	3a01      	subs	r2, #1
 80064ea:	690c      	ldr	r4, [r1, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	698a      	ldr	r2, [r1, #24]
 80064f0:	1e69      	subs	r1, r5, #1
 80064f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80064f6:	1e61      	subs	r1, r4, #1
 80064f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80064fc:	3a01      	subs	r2, #1
 80064fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006502:	60c3      	str	r3, [r0, #12]
}
 8006504:	bc30      	pop	{r4, r5}
 8006506:	2000      	movs	r0, #0
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop

0800650c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800650c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800650e:	680b      	ldr	r3, [r1, #0]
{
 8006510:	4615      	mov	r5, r2
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006512:	684a      	ldr	r2, [r1, #4]
{
 8006514:	4604      	mov	r4, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006516:	4313      	orrs	r3, r2
 8006518:	6900      	ldr	r0, [r0, #16]
 800651a:	68ca      	ldr	r2, [r1, #12]
 800651c:	0d80      	lsrs	r0, r0, #22
 800651e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8006522:	688a      	ldr	r2, [r1, #8]
 8006524:	0580      	lsls	r0, r0, #22
 8006526:	4303      	orrs	r3, r0
 8006528:	3a01      	subs	r2, #1
 800652a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800652e:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8006530:	f7fc fb60 	bl	8002bf4 <HAL_GetTick>
 8006534:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006536:	1c6b      	adds	r3, r5, #1
 8006538:	d105      	bne.n	8006546 <FMC_SDRAM_SendCommand+0x3a>
 800653a:	69a3      	ldr	r3, [r4, #24]
 800653c:	f013 0320 	ands.w	r3, r3, #32
 8006540:	d1fb      	bne.n	800653a <FMC_SDRAM_SendCommand+0x2e>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006542:	4618      	mov	r0, r3
}
 8006544:	bd70      	pop	{r4, r5, r6, pc}
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006546:	69a3      	ldr	r3, [r4, #24]
 8006548:	f013 0320 	ands.w	r3, r3, #32
 800654c:	d0f9      	beq.n	8006542 <FMC_SDRAM_SendCommand+0x36>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800654e:	b125      	cbz	r5, 800655a <FMC_SDRAM_SendCommand+0x4e>
 8006550:	f7fc fb50 	bl	8002bf4 <HAL_GetTick>
 8006554:	1b80      	subs	r0, r0, r6
 8006556:	42a8      	cmp	r0, r5
 8006558:	d9ed      	bls.n	8006536 <FMC_SDRAM_SendCommand+0x2a>
        return HAL_TIMEOUT;
 800655a:	2003      	movs	r0, #3
}
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	bf00      	nop

08006560 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006560:	6943      	ldr	r3, [r0, #20]
 8006562:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
{
 8006566:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006568:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800656c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1

  return HAL_OK;
}
 8006570:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006572:	6151      	str	r1, [r2, #20]
}
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop

08006578 <arm_split_rfft_q31>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	b095      	sub	sp, #84	; 0x54
 800657e:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8006580:	9012      	str	r0, [sp, #72]	; 0x48
 8006582:	00e4      	lsls	r4, r4, #3
 8006584:	1910      	adds	r0, r2, r4
 8006586:	460a      	mov	r2, r1
 8006588:	9113      	str	r1, [sp, #76]	; 0x4c
 800658a:	191f      	adds	r7, r3, r4
 800658c:	3a01      	subs	r2, #1
 800658e:	ea4f 1301 	mov.w	r3, r1, lsl #4
 8006592:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8006596:	940f      	str	r4, [sp, #60]	; 0x3c
 8006598:	9111      	str	r1, [sp, #68]	; 0x44
 800659a:	920d      	str	r2, [sp, #52]	; 0x34
 800659c:	f000 8099 	beq.w	80066d2 <arm_split_rfft_q31+0x15a>
 80065a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80065a2:	9710      	str	r7, [sp, #64]	; 0x40
 80065a4:	3b0c      	subs	r3, #12
 80065a6:	18d3      	adds	r3, r2, r3
 80065a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065aa:	f1a1 060c 	sub.w	r6, r1, #12
 80065ae:	4619      	mov	r1, r3
 80065b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065b2:	910e      	str	r1, [sp, #56]	; 0x38
 80065b4:	4416      	add	r6, r2
 80065b6:	f102 0e10 	add.w	lr, r2, #16
 80065ba:	f103 0c10 	add.w	ip, r3, #16
 80065be:	2200      	movs	r2, #0
 80065c0:	4681      	mov	r9, r0
 80065c2:	9601      	str	r6, [sp, #4]
 80065c4:	eb09 0302 	add.w	r3, r9, r2
 80065c8:	9c01      	ldr	r4, [sp, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80065d0:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80065d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80065d6:	f859 1002 	ldr.w	r1, [r9, r2]
 80065da:	58a4      	ldr	r4, [r4, r2]
 80065dc:	940c      	str	r4, [sp, #48]	; 0x30
 80065de:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80065e2:	2700      	movs	r7, #0
 80065e4:	f04f 0a00 	mov.w	sl, #0
 80065e8:	fbc3 6705 	smlal	r6, r7, r3, r5
 80065ec:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80065f0:	9705      	str	r7, [sp, #20]
 80065f2:	f8cd a010 	str.w	sl, [sp, #16]
 80065f6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80065fa:	2700      	movs	r7, #0
 80065fc:	fbc1 6705 	smlal	r6, r7, r1, r5
 8006600:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006604:	f85e 0c04 	ldr.w	r0, [lr, #-4]
 8006608:	f8cd a018 	str.w	sl, [sp, #24]
 800660c:	fbc0 4501 	smlal	r4, r5, r0, r1
 8006610:	4626      	mov	r6, r4
 8006612:	fb83 0100 	smull	r0, r1, r3, r0
 8006616:	f116 4400 	adds.w	r4, r6, #2147483648	; 0x80000000
 800661a:	f145 0500 	adc.w	r5, r5, #0
 800661e:	46bb      	mov	fp, r7
 8006620:	ebba 0600 	subs.w	r6, sl, r0
 8006624:	eb6b 0701 	sbc.w	r7, fp, r1
 8006628:	f116 4000 	adds.w	r0, r6, #2147483648	; 0x80000000
 800662c:	f147 0100 	adc.w	r1, r7, #0
 8006630:	9507      	str	r5, [sp, #28]
 8006632:	9103      	str	r1, [sp, #12]
 8006634:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006636:	f8cd a008 	str.w	sl, [sp, #8]
 800663a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800663e:	fb88 4505 	smull	r4, r5, r8, r5
 8006642:	1b00      	subs	r0, r0, r4
 8006644:	4606      	mov	r6, r0
 8006646:	eb61 0105 	sbc.w	r1, r1, r5
 800664a:	f116 4400 	adds.w	r4, r6, #2147483648	; 0x80000000
 800664e:	9e01      	ldr	r6, [sp, #4]
 8006650:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006654:	460f      	mov	r7, r1
 8006656:	f147 0500 	adc.w	r5, r7, #0
 800665a:	fb83 0108 	smull	r0, r1, r3, r8
 800665e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8006662:	950b      	str	r5, [sp, #44]	; 0x2c
 8006664:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006668:	1a36      	subs	r6, r6, r0
 800666a:	eb67 0701 	sbc.w	r7, r7, r1
 800666e:	f116 4000 	adds.w	r0, r6, #2147483648	; 0x80000000
 8006672:	f147 0100 	adc.w	r1, r7, #0
 8006676:	9109      	str	r1, [sp, #36]	; 0x24
 8006678:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800667c:	fb83 4508 	smull	r4, r5, r3, r8
 8006680:	1b00      	subs	r0, r0, r4
 8006682:	eb61 0105 	sbc.w	r1, r1, r5
 8006686:	f8cd a020 	str.w	sl, [sp, #32]
 800668a:	f110 4600 	adds.w	r6, r0, #2147483648	; 0x80000000
 800668e:	f141 0700 	adc.w	r7, r1, #0
 8006692:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006698:	fbc8 0105 	smlal	r0, r1, r8, r5
 800669c:	f110 4400 	adds.w	r4, r0, #2147483648	; 0x80000000
 80066a0:	f141 0500 	adc.w	r5, r1, #0
 80066a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066a6:	440a      	add	r2, r1
 80066a8:	9901      	ldr	r1, [sp, #4]
 80066aa:	3908      	subs	r1, #8
 80066ac:	9101      	str	r1, [sp, #4]
 80066ae:	e90c 00a0 	stmdb	ip, {r5, r7}
 80066b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80066b4:	427b      	negs	r3, r7
 80066b6:	608b      	str	r3, [r1, #8]
 80066b8:	f1a1 0308 	sub.w	r3, r1, #8
 80066bc:	930e      	str	r3, [sp, #56]	; 0x38
 80066be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066c0:	604d      	str	r5, [r1, #4]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	f10e 0e08 	add.w	lr, lr, #8
 80066c8:	f10c 0c08 	add.w	ip, ip, #8
 80066cc:	930d      	str	r3, [sp, #52]	; 0x34
 80066ce:	f47f af79 	bne.w	80065c4 <arm_split_rfft_q31+0x4c>
 80066d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80066d4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80066d6:	6842      	ldr	r2, [r0, #4]
 80066d8:	6803      	ldr	r3, [r0, #0]
 80066da:	1a9b      	subs	r3, r3, r2
 80066dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066de:	4422      	add	r2, r4
 80066e0:	4611      	mov	r1, r2
 80066e2:	4622      	mov	r2, r4
 80066e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80066e6:	105b      	asrs	r3, r3, #1
 80066e8:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
 80066ec:	2200      	movs	r2, #0
 80066ee:	604a      	str	r2, [r1, #4]
 80066f0:	6801      	ldr	r1, [r0, #0]
 80066f2:	6843      	ldr	r3, [r0, #4]
 80066f4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80066f6:	440b      	add	r3, r1
 80066f8:	105b      	asrs	r3, r3, #1
 80066fa:	6042      	str	r2, [r0, #4]
 80066fc:	6003      	str	r3, [r0, #0]
 80066fe:	b015      	add	sp, #84	; 0x54
 8006700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006704 <arm_split_rifft_q31>:
 8006704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006708:	468e      	mov	lr, r1
 800670a:	b091      	sub	sp, #68	; 0x44
 800670c:	00cc      	lsls	r4, r1, #3
 800670e:	2900      	cmp	r1, #0
 8006710:	f000 8095 	beq.w	800683e <arm_split_rifft_q31+0x13a>
 8006714:	469a      	mov	sl, r3
 8006716:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006718:	910d      	str	r1, [sp, #52]	; 0x34
 800671a:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 800671e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006720:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8006724:	3c04      	subs	r4, #4
 8006726:	3308      	adds	r3, #8
 8006728:	4404      	add	r4, r0
 800672a:	4694      	mov	ip, r2
 800672c:	3008      	adds	r0, #8
 800672e:	461d      	mov	r5, r3
 8006730:	f8cd a004 	str.w	sl, [sp, #4]
 8006734:	f8dc 6000 	ldr.w	r6, [ip]
 8006738:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800673c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8006740:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8006744:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006748:	2300      	movs	r3, #0
 800674a:	fbc6 2307 	smlal	r2, r3, r6, r7
 800674e:	4699      	mov	r9, r3
 8006750:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8006754:	424b      	negs	r3, r1
 8006756:	f04f 0b00 	mov.w	fp, #0
 800675a:	f04f 0800 	mov.w	r8, #0
 800675e:	fbc3 ab07 	smlal	sl, fp, r3, r7
 8006762:	f8cd b014 	str.w	fp, [sp, #20]
 8006766:	f8cd 8010 	str.w	r8, [sp, #16]
 800676a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800676e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006772:	f8cd 8018 	str.w	r8, [sp, #24]
 8006776:	fbc3 ab06 	smlal	sl, fp, r3, r6
 800677a:	464f      	mov	r7, r9
 800677c:	4646      	mov	r6, r8
 800677e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8006782:	fbc1 6703 	smlal	r6, r7, r1, r3
 8006786:	46b2      	mov	sl, r6
 8006788:	46bb      	mov	fp, r7
 800678a:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800678e:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8006792:	f147 0700 	adc.w	r7, r7, #0
 8006796:	f11a 4200 	adds.w	r2, sl, #2147483648	; 0x80000000
 800679a:	f14b 0300 	adc.w	r3, fp, #0
 800679e:	9303      	str	r3, [sp, #12]
 80067a0:	9b01      	ldr	r3, [sp, #4]
 80067a2:	9707      	str	r7, [sp, #28]
 80067a4:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80067ae:	fb8e 2303 	smull	r2, r3, lr, r3
 80067b2:	1ab6      	subs	r6, r6, r2
 80067b4:	eb67 0703 	sbc.w	r7, r7, r3
 80067b8:	4632      	mov	r2, r6
 80067ba:	463b      	mov	r3, r7
 80067bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067c0:	fbce 6701 	smlal	r6, r7, lr, r1
 80067c4:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80067c8:	46b2      	mov	sl, r6
 80067ca:	f143 0300 	adc.w	r3, r3, #0
 80067ce:	f11a 4600 	adds.w	r6, sl, #2147483648	; 0x80000000
 80067d2:	f147 0700 	adc.w	r7, r7, #0
 80067d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80067d8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80067dc:	9709      	str	r7, [sp, #36]	; 0x24
 80067de:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80067e2:	6863      	ldr	r3, [r4, #4]
 80067e4:	9a01      	ldr	r2, [sp, #4]
 80067e6:	f8cd 8020 	str.w	r8, [sp, #32]
 80067ea:	fbc3 6701 	smlal	r6, r7, r3, r1
 80067ee:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 80067f2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80067f6:	6811      	ldr	r1, [r2, #0]
 80067f8:	fbc3 6701 	smlal	r6, r7, r3, r1
 80067fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067fe:	46b2      	mov	sl, r6
 8006800:	46bb      	mov	fp, r7
 8006802:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8006806:	448c      	add	ip, r1
 8006808:	9901      	ldr	r1, [sp, #4]
 800680a:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800680e:	468e      	mov	lr, r1
 8006810:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006812:	f147 0700 	adc.w	r7, r7, #0
 8006816:	f11a 4200 	adds.w	r2, sl, #2147483648	; 0x80000000
 800681a:	f14b 0300 	adc.w	r3, fp, #0
 800681e:	448e      	add	lr, r1
 8006820:	f8cd e004 	str.w	lr, [sp, #4]
 8006824:	e905 0088 	stmdb	r5, {r3, r7}
 8006828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800682a:	3b01      	subs	r3, #1
 800682c:	f100 0008 	add.w	r0, r0, #8
 8006830:	f1a4 0408 	sub.w	r4, r4, #8
 8006834:	f105 0508 	add.w	r5, r5, #8
 8006838:	930d      	str	r3, [sp, #52]	; 0x34
 800683a:	f47f af7b 	bne.w	8006734 <arm_split_rifft_q31+0x30>
 800683e:	b011      	add	sp, #68	; 0x44
 8006840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006844 <arm_rfft_q31>:
 8006844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006848:	4615      	mov	r5, r2
 800684a:	7902      	ldrb	r2, [r0, #4]
 800684c:	6803      	ldr	r3, [r0, #0]
 800684e:	6946      	ldr	r6, [r0, #20]
 8006850:	2a01      	cmp	r2, #1
 8006852:	b083      	sub	sp, #12
 8006854:	4604      	mov	r4, r0
 8006856:	ea4f 0853 	mov.w	r8, r3, lsr #1
 800685a:	4689      	mov	r9, r1
 800685c:	d00f      	beq.n	800687e <arm_rfft_q31+0x3a>
 800685e:	7963      	ldrb	r3, [r4, #5]
 8006860:	4630      	mov	r0, r6
 8006862:	f000 fba7 	bl	8006fb4 <arm_cfft_q31>
 8006866:	68e2      	ldr	r2, [r4, #12]
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	68a4      	ldr	r4, [r4, #8]
 800686c:	9401      	str	r4, [sp, #4]
 800686e:	9500      	str	r5, [sp, #0]
 8006870:	4648      	mov	r0, r9
 8006872:	4641      	mov	r1, r8
 8006874:	f7ff fe80 	bl	8006578 <arm_split_rfft_q31>
 8006878:	b003      	add	sp, #12
 800687a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800687e:	6887      	ldr	r7, [r0, #8]
 8006880:	68c2      	ldr	r2, [r0, #12]
 8006882:	6903      	ldr	r3, [r0, #16]
 8006884:	9500      	str	r5, [sp, #0]
 8006886:	4608      	mov	r0, r1
 8006888:	9701      	str	r7, [sp, #4]
 800688a:	4641      	mov	r1, r8
 800688c:	f7ff ff3a 	bl	8006704 <arm_split_rifft_q31>
 8006890:	7963      	ldrb	r3, [r4, #5]
 8006892:	7922      	ldrb	r2, [r4, #4]
 8006894:	4630      	mov	r0, r6
 8006896:	4629      	mov	r1, r5
 8006898:	f000 fb8c 	bl	8006fb4 <arm_cfft_q31>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0ea      	beq.n	8006878 <arm_rfft_q31+0x34>
 80068a2:	1f2a      	subs	r2, r5, #4
 80068a4:	2100      	movs	r1, #0
 80068a6:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	3101      	adds	r1, #1
 80068b2:	428b      	cmp	r3, r1
 80068b4:	d8f7      	bhi.n	80068a6 <arm_rfft_q31+0x62>
 80068b6:	b003      	add	sp, #12
 80068b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080068bc <arm_rfft_init_q31>:
 80068bc:	b289      	uxth	r1, r1
 80068be:	b430      	push	{r4, r5}
 80068c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80068c4:	4d36      	ldr	r5, [pc, #216]	; (80069a0 <arm_rfft_init_q31+0xe4>)
 80068c6:	4c37      	ldr	r4, [pc, #220]	; (80069a4 <arm_rfft_init_q31+0xe8>)
 80068c8:	7102      	strb	r2, [r0, #4]
 80068ca:	7143      	strb	r3, [r0, #5]
 80068cc:	6001      	str	r1, [r0, #0]
 80068ce:	60c5      	str	r5, [r0, #12]
 80068d0:	6104      	str	r4, [r0, #16]
 80068d2:	d050      	beq.n	8006976 <arm_rfft_init_q31+0xba>
 80068d4:	d911      	bls.n	80068fa <arm_rfft_init_q31+0x3e>
 80068d6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80068da:	d054      	beq.n	8006986 <arm_rfft_init_q31+0xca>
 80068dc:	d938      	bls.n	8006950 <arm_rfft_init_q31+0x94>
 80068de:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80068e2:	d022      	beq.n	800692a <arm_rfft_init_q31+0x6e>
 80068e4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80068e8:	d155      	bne.n	8006996 <arm_rfft_init_q31+0xda>
 80068ea:	2201      	movs	r2, #1
 80068ec:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <arm_rfft_init_q31+0xec>)
 80068ee:	6082      	str	r2, [r0, #8]
 80068f0:	6143      	str	r3, [r0, #20]
 80068f2:	2000      	movs	r0, #0
 80068f4:	b240      	sxtb	r0, r0
 80068f6:	bc30      	pop	{r4, r5}
 80068f8:	4770      	bx	lr
 80068fa:	2940      	cmp	r1, #64	; 0x40
 80068fc:	d033      	beq.n	8006966 <arm_rfft_init_q31+0xaa>
 80068fe:	d91c      	bls.n	800693a <arm_rfft_init_q31+0x7e>
 8006900:	2980      	cmp	r1, #128	; 0x80
 8006902:	d00a      	beq.n	800691a <arm_rfft_init_q31+0x5e>
 8006904:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006908:	d145      	bne.n	8006996 <arm_rfft_init_q31+0xda>
 800690a:	2220      	movs	r2, #32
 800690c:	4b27      	ldr	r3, [pc, #156]	; (80069ac <arm_rfft_init_q31+0xf0>)
 800690e:	6082      	str	r2, [r0, #8]
 8006910:	6143      	str	r3, [r0, #20]
 8006912:	2000      	movs	r0, #0
 8006914:	b240      	sxtb	r0, r0
 8006916:	bc30      	pop	{r4, r5}
 8006918:	4770      	bx	lr
 800691a:	2240      	movs	r2, #64	; 0x40
 800691c:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <arm_rfft_init_q31+0xf4>)
 800691e:	6082      	str	r2, [r0, #8]
 8006920:	6143      	str	r3, [r0, #20]
 8006922:	2000      	movs	r0, #0
 8006924:	b240      	sxtb	r0, r0
 8006926:	bc30      	pop	{r4, r5}
 8006928:	4770      	bx	lr
 800692a:	2202      	movs	r2, #2
 800692c:	4b21      	ldr	r3, [pc, #132]	; (80069b4 <arm_rfft_init_q31+0xf8>)
 800692e:	6082      	str	r2, [r0, #8]
 8006930:	6143      	str	r3, [r0, #20]
 8006932:	2000      	movs	r0, #0
 8006934:	b240      	sxtb	r0, r0
 8006936:	bc30      	pop	{r4, r5}
 8006938:	4770      	bx	lr
 800693a:	2920      	cmp	r1, #32
 800693c:	d12b      	bne.n	8006996 <arm_rfft_init_q31+0xda>
 800693e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <arm_rfft_init_q31+0xfc>)
 8006944:	6082      	str	r2, [r0, #8]
 8006946:	6143      	str	r3, [r0, #20]
 8006948:	2000      	movs	r0, #0
 800694a:	b240      	sxtb	r0, r0
 800694c:	bc30      	pop	{r4, r5}
 800694e:	4770      	bx	lr
 8006950:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006954:	d11f      	bne.n	8006996 <arm_rfft_init_q31+0xda>
 8006956:	2208      	movs	r2, #8
 8006958:	4b18      	ldr	r3, [pc, #96]	; (80069bc <arm_rfft_init_q31+0x100>)
 800695a:	6082      	str	r2, [r0, #8]
 800695c:	6143      	str	r3, [r0, #20]
 800695e:	2000      	movs	r0, #0
 8006960:	b240      	sxtb	r0, r0
 8006962:	bc30      	pop	{r4, r5}
 8006964:	4770      	bx	lr
 8006966:	2280      	movs	r2, #128	; 0x80
 8006968:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <arm_rfft_init_q31+0x104>)
 800696a:	6082      	str	r2, [r0, #8]
 800696c:	6143      	str	r3, [r0, #20]
 800696e:	2000      	movs	r0, #0
 8006970:	b240      	sxtb	r0, r0
 8006972:	bc30      	pop	{r4, r5}
 8006974:	4770      	bx	lr
 8006976:	2210      	movs	r2, #16
 8006978:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <arm_rfft_init_q31+0x108>)
 800697a:	6082      	str	r2, [r0, #8]
 800697c:	6143      	str	r3, [r0, #20]
 800697e:	2000      	movs	r0, #0
 8006980:	b240      	sxtb	r0, r0
 8006982:	bc30      	pop	{r4, r5}
 8006984:	4770      	bx	lr
 8006986:	2204      	movs	r2, #4
 8006988:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <arm_rfft_init_q31+0x10c>)
 800698a:	6082      	str	r2, [r0, #8]
 800698c:	6143      	str	r3, [r0, #20]
 800698e:	2000      	movs	r0, #0
 8006990:	b240      	sxtb	r0, r0
 8006992:	bc30      	pop	{r4, r5}
 8006994:	4770      	bx	lr
 8006996:	20ff      	movs	r0, #255	; 0xff
 8006998:	b240      	sxtb	r0, r0
 800699a:	bc30      	pop	{r4, r5}
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	0800a638 	.word	0x0800a638
 80069a4:	08012638 	.word	0x08012638
 80069a8:	0801a648 	.word	0x0801a648
 80069ac:	0801a6a8 	.word	0x0801a6a8
 80069b0:	0801a6b8 	.word	0x0801a6b8
 80069b4:	0801a678 	.word	0x0801a678
 80069b8:	0801a658 	.word	0x0801a658
 80069bc:	0801a638 	.word	0x0801a638
 80069c0:	0801a668 	.word	0x0801a668
 80069c4:	0801a688 	.word	0x0801a688
 80069c8:	0801a698 	.word	0x0801a698

080069cc <arm_cmplx_mag_q31>:
 80069cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d0:	4613      	mov	r3, r2
 80069d2:	b085      	sub	sp, #20
 80069d4:	e88d 0009 	stmia.w	sp, {r0, r3}
 80069d8:	0893      	lsrs	r3, r2, #2
 80069da:	460e      	mov	r6, r1
 80069dc:	9302      	str	r3, [sp, #8]
 80069de:	d04c      	beq.n	8006a7a <arm_cmplx_mag_q31+0xae>
 80069e0:	f100 0420 	add.w	r4, r0, #32
 80069e4:	469b      	mov	fp, r3
 80069e6:	460d      	mov	r5, r1
 80069e8:	9103      	str	r1, [sp, #12]
 80069ea:	f1a4 0020 	sub.w	r0, r4, #32
 80069ee:	e890 4085 	ldmia.w	r0, {r0, r2, r7, lr}
 80069f2:	fb82 2302 	smull	r2, r3, r2, r2
 80069f6:	105b      	asrs	r3, r3, #1
 80069f8:	fb80 0100 	smull	r0, r1, r0, r0
 80069fc:	eb03 0061 	add.w	r0, r3, r1, asr #1
 8006a00:	fb8e 230e 	smull	r2, r3, lr, lr
 8006a04:	1059      	asrs	r1, r3, #1
 8006a06:	fb87 2307 	smull	r2, r3, r7, r7
 8006a0a:	eb01 0a63 	add.w	sl, r1, r3, asr #1
 8006a0e:	f854 8c0c 	ldr.w	r8, [r4, #-12]
 8006a12:	f854 9c04 	ldr.w	r9, [r4, #-4]
 8006a16:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8006a1a:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8006a1e:	4629      	mov	r1, r5
 8006a20:	f000 f848 	bl	8006ab4 <arm_sqrt_q31>
 8006a24:	1d29      	adds	r1, r5, #4
 8006a26:	4650      	mov	r0, sl
 8006a28:	f000 f844 	bl	8006ab4 <arm_sqrt_q31>
 8006a2c:	fb89 0109 	smull	r0, r1, r9, r9
 8006a30:	fb88 2308 	smull	r2, r3, r8, r8
 8006a34:	1049      	asrs	r1, r1, #1
 8006a36:	1058      	asrs	r0, r3, #1
 8006a38:	fb87 8907 	smull	r8, r9, r7, r7
 8006a3c:	fb86 2306 	smull	r2, r3, r6, r6
 8006a40:	eb01 0769 	add.w	r7, r1, r9, asr #1
 8006a44:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8006a48:	f105 0108 	add.w	r1, r5, #8
 8006a4c:	f000 f832 	bl	8006ab4 <arm_sqrt_q31>
 8006a50:	f105 010c 	add.w	r1, r5, #12
 8006a54:	4638      	mov	r0, r7
 8006a56:	f000 f82d 	bl	8006ab4 <arm_sqrt_q31>
 8006a5a:	f1bb 0b01 	subs.w	fp, fp, #1
 8006a5e:	f104 0420 	add.w	r4, r4, #32
 8006a62:	f105 0510 	add.w	r5, r5, #16
 8006a66:	d1c0      	bne.n	80069ea <arm_cmplx_mag_q31+0x1e>
 8006a68:	9b00      	ldr	r3, [sp, #0]
 8006a6a:	9a02      	ldr	r2, [sp, #8]
 8006a6c:	9e03      	ldr	r6, [sp, #12]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	eb06 1602 	add.w	r6, r6, r2, lsl #4
 8006a7a:	9b01      	ldr	r3, [sp, #4]
 8006a7c:	f013 0503 	ands.w	r5, r3, #3
 8006a80:	d015      	beq.n	8006aae <arm_cmplx_mag_q31+0xe2>
 8006a82:	9c00      	ldr	r4, [sp, #0]
 8006a84:	3408      	adds	r4, #8
 8006a86:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8006a8a:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8006a8e:	fb80 0100 	smull	r0, r1, r0, r0
 8006a92:	1048      	asrs	r0, r1, #1
 8006a94:	fb82 2302 	smull	r2, r3, r2, r2
 8006a98:	4631      	mov	r1, r6
 8006a9a:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8006a9e:	f000 f809 	bl	8006ab4 <arm_sqrt_q31>
 8006aa2:	3d01      	subs	r5, #1
 8006aa4:	f106 0604 	add.w	r6, r6, #4
 8006aa8:	f104 0408 	add.w	r4, r4, #8
 8006aac:	d1eb      	bne.n	8006a86 <arm_cmplx_mag_q31+0xba>
 8006aae:	b005      	add	sp, #20
 8006ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ab4 <arm_sqrt_q31>:
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	dd6d      	ble.n	8006b94 <arm_sqrt_q31+0xe0>
 8006ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006abc:	fab0 f680 	clz	r6, r0
 8006ac0:	1e77      	subs	r7, r6, #1
 8006ac2:	f017 0e01 	ands.w	lr, r7, #1
 8006ac6:	bf1a      	itte	ne
 8006ac8:	1eb3      	subne	r3, r6, #2
 8006aca:	4098      	lslne	r0, r3
 8006acc:	40b8      	lsleq	r0, r7
 8006ace:	ee07 0a90 	vmov	s15, r0
 8006ad2:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
 8006ad6:	4c32      	ldr	r4, [pc, #200]	; (8006ba0 <arm_sqrt_q31+0xec>)
 8006ad8:	ee17 3a90 	vmov	r3, s15
 8006adc:	105b      	asrs	r3, r3, #1
 8006ade:	1ae4      	subs	r4, r4, r3
 8006ae0:	ee07 4a90 	vmov	s15, r4
 8006ae4:	eefe 7ac1 	vcvt.s32.f32	s15, s15, #30
 8006ae8:	ea4f 0c60 	mov.w	ip, r0, asr #1
 8006aec:	ee17 5a90 	vmov	r5, s15
 8006af0:	fb85 8905 	smull	r8, r9, r5, r5
 8006af4:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8006af8:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 8006afc:	fb82 230c 	smull	r2, r3, r2, ip
 8006b00:	0fd4      	lsrs	r4, r2, #31
 8006b02:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8006b06:	f1c4 5440 	rsb	r4, r4, #805306368	; 0x30000000
 8006b0a:	fb85 4504 	smull	r4, r5, r5, r4
 8006b0e:	0fe2      	lsrs	r2, r4, #31
 8006b10:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8006b14:	0093      	lsls	r3, r2, #2
 8006b16:	fb83 8903 	smull	r8, r9, r3, r3
 8006b1a:	ea4f 74d8 	mov.w	r4, r8, lsr #31
 8006b1e:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
 8006b22:	fb8c 4504 	smull	r4, r5, ip, r4
 8006b26:	0fe2      	lsrs	r2, r4, #31
 8006b28:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8006b2c:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8006b30:	fb83 2302 	smull	r2, r3, r3, r2
 8006b34:	0fd2      	lsrs	r2, r2, #31
 8006b36:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8006b3a:	0093      	lsls	r3, r2, #2
 8006b3c:	fb83 4503 	smull	r4, r5, r3, r3
 8006b40:	0fe4      	lsrs	r4, r4, #31
 8006b42:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 8006b46:	fb8c 4504 	smull	r4, r5, ip, r4
 8006b4a:	0fe2      	lsrs	r2, r4, #31
 8006b4c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8006b50:	f1c2 5240 	rsb	r2, r2, #805306368	; 0x30000000
 8006b54:	fb83 2302 	smull	r2, r3, r3, r2
 8006b58:	0fd4      	lsrs	r4, r2, #31
 8006b5a:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8006b5e:	00a4      	lsls	r4, r4, #2
 8006b60:	fb80 4504 	smull	r4, r5, r0, r4
 8006b64:	0fe3      	lsrs	r3, r4, #31
 8006b66:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	f1be 0f00 	cmp.w	lr, #0
 8006b70:	d009      	beq.n	8006b86 <arm_sqrt_q31+0xd2>
 8006b72:	3e02      	subs	r6, #2
 8006b74:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8006b78:	1076      	asrs	r6, r6, #1
 8006b7a:	4133      	asrs	r3, r6
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	600b      	str	r3, [r1, #0]
 8006b80:	b240      	sxtb	r0, r0
 8006b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b86:	107f      	asrs	r7, r7, #1
 8006b88:	413b      	asrs	r3, r7
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	600b      	str	r3, [r1, #0]
 8006b8e:	b240      	sxtb	r0, r0
 8006b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b94:	2300      	movs	r3, #0
 8006b96:	20ff      	movs	r0, #255	; 0xff
 8006b98:	600b      	str	r3, [r1, #0]
 8006b9a:	b240      	sxtb	r0, r0
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	5f3759df 	.word	0x5f3759df

08006ba4 <arm_shift_q31>:
 8006ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	f1b1 0c00 	subs.w	ip, r1, #0
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	da3d      	bge.n	8006c34 <arm_shift_q31+0x90>
 8006bb8:	b353      	cbz	r3, 8006c10 <arm_shift_q31+0x6c>
 8006bba:	f8dd 8000 	ldr.w	r8, [sp]
 8006bbe:	f1cc 0e00 	rsb	lr, ip, #0
 8006bc2:	f100 0710 	add.w	r7, r0, #16
 8006bc6:	f102 0610 	add.w	r6, r2, #16
 8006bca:	f857 5c0c 	ldr.w	r5, [r7, #-12]
 8006bce:	f857 4c08 	ldr.w	r4, [r7, #-8]
 8006bd2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8006bd6:	f857 3c10 	ldr.w	r3, [r7, #-16]
 8006bda:	fa45 f50e 	asr.w	r5, r5, lr
 8006bde:	fa44 f40e 	asr.w	r4, r4, lr
 8006be2:	fa41 f10e 	asr.w	r1, r1, lr
 8006be6:	fa43 f30e 	asr.w	r3, r3, lr
 8006bea:	f1b8 0801 	subs.w	r8, r8, #1
 8006bee:	f846 5c0c 	str.w	r5, [r6, #-12]
 8006bf2:	f846 4c08 	str.w	r4, [r6, #-8]
 8006bf6:	f846 1c04 	str.w	r1, [r6, #-4]
 8006bfa:	f846 3c10 	str.w	r3, [r6, #-16]
 8006bfe:	f107 0710 	add.w	r7, r7, #16
 8006c02:	f106 0610 	add.w	r6, r6, #16
 8006c06:	d1e0      	bne.n	8006bca <arm_shift_q31+0x26>
 8006c08:	9b00      	ldr	r3, [sp, #0]
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	4418      	add	r0, r3
 8006c0e:	441a      	add	r2, r3
 8006c10:	9b01      	ldr	r3, [sp, #4]
 8006c12:	f013 0303 	ands.w	r3, r3, #3
 8006c16:	d00a      	beq.n	8006c2e <arm_shift_q31+0x8a>
 8006c18:	3a04      	subs	r2, #4
 8006c1a:	f1cc 0e00 	rsb	lr, ip, #0
 8006c1e:	f850 1b04 	ldr.w	r1, [r0], #4
 8006c22:	3b01      	subs	r3, #1
 8006c24:	fa41 f10e 	asr.w	r1, r1, lr
 8006c28:	f842 1f04 	str.w	r1, [r2, #4]!
 8006c2c:	d1f7      	bne.n	8006c1e <arm_shift_q31+0x7a>
 8006c2e:	b003      	add	sp, #12
 8006c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d04a      	beq.n	8006cce <arm_shift_q31+0x12a>
 8006c38:	f100 0910 	add.w	r9, r0, #16
 8006c3c:	f102 0810 	add.w	r8, r2, #16
 8006c40:	469a      	mov	sl, r3
 8006c42:	f859 3c10 	ldr.w	r3, [r9, #-16]
 8006c46:	f859 ec0c 	ldr.w	lr, [r9, #-12]
 8006c4a:	f859 7c08 	ldr.w	r7, [r9, #-8]
 8006c4e:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8006c52:	17dd      	asrs	r5, r3, #31
 8006c54:	fa03 f10c 	lsl.w	r1, r3, ip
 8006c58:	f085 4500 	eor.w	r5, r5, #2147483648	; 0x80000000
 8006c5c:	fa41 fb0c 	asr.w	fp, r1, ip
 8006c60:	ea4f 74ee 	mov.w	r4, lr, asr #31
 8006c64:	43ed      	mvns	r5, r5
 8006c66:	455b      	cmp	r3, fp
 8006c68:	bf08      	it	eq
 8006c6a:	460d      	moveq	r5, r1
 8006c6c:	f084 4400 	eor.w	r4, r4, #2147483648	; 0x80000000
 8006c70:	fa0e fb0c 	lsl.w	fp, lr, ip
 8006c74:	f848 5c10 	str.w	r5, [r8, #-16]
 8006c78:	43e4      	mvns	r4, r4
 8006c7a:	fa4b f50c 	asr.w	r5, fp, ip
 8006c7e:	17f9      	asrs	r1, r7, #31
 8006c80:	45ae      	cmp	lr, r5
 8006c82:	bf08      	it	eq
 8006c84:	465c      	moveq	r4, fp
 8006c86:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006c8a:	fa07 fe0c 	lsl.w	lr, r7, ip
 8006c8e:	17f3      	asrs	r3, r6, #31
 8006c90:	fa06 f50c 	lsl.w	r5, r6, ip
 8006c94:	f848 4c0c 	str.w	r4, [r8, #-12]
 8006c98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006c9c:	fa4e f40c 	asr.w	r4, lr, ip
 8006ca0:	43c9      	mvns	r1, r1
 8006ca2:	42a7      	cmp	r7, r4
 8006ca4:	bf08      	it	eq
 8006ca6:	4671      	moveq	r1, lr
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	fa45 f40c 	asr.w	r4, r5, ip
 8006cae:	42a6      	cmp	r6, r4
 8006cb0:	bf08      	it	eq
 8006cb2:	462b      	moveq	r3, r5
 8006cb4:	f1ba 0a01 	subs.w	sl, sl, #1
 8006cb8:	e908 000a 	stmdb	r8, {r1, r3}
 8006cbc:	f109 0910 	add.w	r9, r9, #16
 8006cc0:	f108 0810 	add.w	r8, r8, #16
 8006cc4:	d1bd      	bne.n	8006c42 <arm_shift_q31+0x9e>
 8006cc6:	9b00      	ldr	r3, [sp, #0]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	4418      	add	r0, r3
 8006ccc:	441a      	add	r2, r3
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	f013 0303 	ands.w	r3, r3, #3
 8006cd4:	d0ab      	beq.n	8006c2e <arm_shift_q31+0x8a>
 8006cd6:	3a04      	subs	r2, #4
 8006cd8:	f1ac 0720 	sub.w	r7, ip, #32
 8006cdc:	f1cc 0620 	rsb	r6, ip, #32
 8006ce0:	f850 1b04 	ldr.w	r1, [r0], #4
 8006ce4:	17cd      	asrs	r5, r1, #31
 8006ce6:	fa01 f407 	lsl.w	r4, r1, r7
 8006cea:	fa05 fe0c 	lsl.w	lr, r5, ip
 8006cee:	ea4e 0e04 	orr.w	lr, lr, r4
 8006cf2:	fa21 f406 	lsr.w	r4, r1, r6
 8006cf6:	ea4e 0e04 	orr.w	lr, lr, r4
 8006cfa:	fa01 f50c 	lsl.w	r5, r1, ip
 8006cfe:	ea4f 74ee 	mov.w	r4, lr, asr #31
 8006d02:	ebbe 7fe5 	cmp.w	lr, r5, asr #31
 8006d06:	f084 4100 	eor.w	r1, r4, #2147483648	; 0x80000000
 8006d0a:	ea6f 0101 	mvn.w	r1, r1
 8006d0e:	bf08      	it	eq
 8006d10:	4629      	moveq	r1, r5
 8006d12:	3b01      	subs	r3, #1
 8006d14:	f842 1f04 	str.w	r1, [r2, #4]!
 8006d18:	d1e2      	bne.n	8006ce0 <arm_shift_q31+0x13c>
 8006d1a:	b003      	add	sp, #12
 8006d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d20 <arm_cfft_radix4by2_q31>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	b08b      	sub	sp, #44	; 0x2c
 8006d26:	084b      	lsrs	r3, r1, #1
 8006d28:	9107      	str	r1, [sp, #28]
 8006d2a:	4682      	mov	sl, r0
 8006d2c:	9205      	str	r2, [sp, #20]
 8006d2e:	9306      	str	r3, [sp, #24]
 8006d30:	f000 8086 	beq.w	8006e40 <arm_cfft_radix4by2_q31+0x120>
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	eb00 0b03 	add.w	fp, r0, r3
 8006d3a:	9308      	str	r3, [sp, #32]
 8006d3c:	46dc      	mov	ip, fp
 8006d3e:	4686      	mov	lr, r0
 8006d40:	2500      	movs	r5, #0
 8006d42:	9204      	str	r2, [sp, #16]
 8006d44:	9009      	str	r0, [sp, #36]	; 0x24
 8006d46:	9905      	ldr	r1, [sp, #20]
 8006d48:	f85a 3035 	ldr.w	r3, [sl, r5, lsl #3]
 8006d4c:	f85b 2035 	ldr.w	r2, [fp, r5, lsl #3]
 8006d50:	f851 8035 	ldr.w	r8, [r1, r5, lsl #3]
 8006d54:	9904      	ldr	r1, [sp, #16]
 8006d56:	1092      	asrs	r2, r2, #2
 8006d58:	109b      	asrs	r3, r3, #2
 8006d5a:	6848      	ldr	r0, [r1, #4]
 8006d5c:	1899      	adds	r1, r3, r2
 8006d5e:	f84a 1035 	str.w	r1, [sl, r5, lsl #3]
 8006d62:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8006d66:	f8de 4004 	ldr.w	r4, [lr, #4]
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d70:	2700      	movs	r7, #0
 8006d72:	fbc8 6703 	smlal	r6, r7, r8, r3
 8006d76:	108a      	asrs	r2, r1, #2
 8006d78:	10a4      	asrs	r4, r4, #2
 8006d7a:	1aa1      	subs	r1, r4, r2
 8006d7c:	9701      	str	r7, [sp, #4]
 8006d7e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006d82:	2700      	movs	r7, #0
 8006d84:	fbc1 6708 	smlal	r6, r7, r1, r8
 8006d88:	2600      	movs	r6, #0
 8006d8a:	9600      	str	r6, [sp, #0]
 8006d8c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8006d90:	9703      	str	r7, [sp, #12]
 8006d92:	f8cd 8008 	str.w	r8, [sp, #8]
 8006d96:	fbc0 8901 	smlal	r8, r9, r0, r1
 8006d9a:	fb83 6700 	smull	r6, r7, r3, r0
 8006d9e:	4649      	mov	r1, r9
 8006da0:	4640      	mov	r0, r8
 8006da2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006da6:	ebb8 0806 	subs.w	r8, r8, r6
 8006daa:	eb69 0907 	sbc.w	r9, r9, r7
 8006dae:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006db2:	f141 0100 	adc.w	r1, r1, #0
 8006db6:	4414      	add	r4, r2
 8006db8:	004b      	lsls	r3, r1, #1
 8006dba:	f8ce 4004 	str.w	r4, [lr, #4]
 8006dbe:	f84b 3035 	str.w	r3, [fp, r5, lsl #3]
 8006dc2:	9b04      	ldr	r3, [sp, #16]
 8006dc4:	4646      	mov	r6, r8
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8006dcc:	9304      	str	r3, [sp, #16]
 8006dce:	9b06      	ldr	r3, [sp, #24]
 8006dd0:	f149 0700 	adc.w	r7, r9, #0
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	007a      	lsls	r2, r7, #1
 8006dd8:	429d      	cmp	r5, r3
 8006dda:	f8cc 2004 	str.w	r2, [ip, #4]
 8006dde:	f10e 0e08 	add.w	lr, lr, #8
 8006de2:	f10c 0c08 	add.w	ip, ip, #8
 8006de6:	d1ae      	bne.n	8006d46 <arm_cfft_radix4by2_q31+0x26>
 8006de8:	9e05      	ldr	r6, [sp, #20]
 8006dea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006dec:	4650      	mov	r0, sl
 8006dee:	4629      	mov	r1, r5
 8006df0:	4632      	mov	r2, r6
 8006df2:	2302      	movs	r3, #2
 8006df4:	f000 f93c 	bl	8007070 <arm_radix4_butterfly_q31>
 8006df8:	9b07      	ldr	r3, [sp, #28]
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8006e00:	4632      	mov	r2, r6
 8006e02:	2302      	movs	r3, #2
 8006e04:	f000 f934 	bl	8007070 <arm_radix4_butterfly_q31>
 8006e08:	9b08      	ldr	r3, [sp, #32]
 8006e0a:	f10a 0a04 	add.w	sl, sl, #4
 8006e0e:	449b      	add	fp, r3
 8006e10:	1d21      	adds	r1, r4, #4
 8006e12:	c90e      	ldmia	r1, {r1, r2, r3}
 8006e14:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006e18:	0049      	lsls	r1, r1, #1
 8006e1a:	0040      	lsls	r0, r0, #1
 8006e1c:	0052      	lsls	r2, r2, #1
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	f84a 0c04 	str.w	r0, [sl, #-4]
 8006e24:	3410      	adds	r4, #16
 8006e26:	f844 1c0c 	str.w	r1, [r4, #-12]
 8006e2a:	f844 2c08 	str.w	r2, [r4, #-8]
 8006e2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e32:	455c      	cmp	r4, fp
 8006e34:	f10a 0a10 	add.w	sl, sl, #16
 8006e38:	d1ea      	bne.n	8006e10 <arm_cfft_radix4by2_q31+0xf0>
 8006e3a:	b00b      	add	sp, #44	; 0x2c
 8006e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e40:	461c      	mov	r4, r3
 8006e42:	4619      	mov	r1, r3
 8006e44:	2302      	movs	r3, #2
 8006e46:	f000 f913 	bl	8007070 <arm_radix4_butterfly_q31>
 8006e4a:	9b07      	ldr	r3, [sp, #28]
 8006e4c:	9a05      	ldr	r2, [sp, #20]
 8006e4e:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8006e52:	4621      	mov	r1, r4
 8006e54:	2302      	movs	r3, #2
 8006e56:	b00b      	add	sp, #44	; 0x2c
 8006e58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	f000 b908 	b.w	8007070 <arm_radix4_butterfly_q31>

08006e60 <arm_cfft_radix4by2_inverse_q31>:
 8006e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e64:	460b      	mov	r3, r1
 8006e66:	b08d      	sub	sp, #52	; 0x34
 8006e68:	085b      	lsrs	r3, r3, #1
 8006e6a:	9109      	str	r1, [sp, #36]	; 0x24
 8006e6c:	4682      	mov	sl, r0
 8006e6e:	9207      	str	r2, [sp, #28]
 8006e70:	9308      	str	r3, [sp, #32]
 8006e72:	f000 808f 	beq.w	8006f94 <arm_cfft_radix4by2_inverse_q31+0x134>
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	eb00 0b03 	add.w	fp, r0, r3
 8006e7c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e7e:	46de      	mov	lr, fp
 8006e80:	46d4      	mov	ip, sl
 8006e82:	2500      	movs	r5, #0
 8006e84:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8006e88:	4614      	mov	r4, r2
 8006e8a:	f85a 3035 	ldr.w	r3, [sl, r5, lsl #3]
 8006e8e:	f85b 2035 	ldr.w	r2, [fp, r5, lsl #3]
 8006e92:	9907      	ldr	r1, [sp, #28]
 8006e94:	6860      	ldr	r0, [r4, #4]
 8006e96:	f851 7035 	ldr.w	r7, [r1, r5, lsl #3]
 8006e9a:	1092      	asrs	r2, r2, #2
 8006e9c:	109b      	asrs	r3, r3, #2
 8006e9e:	1899      	adds	r1, r3, r2
 8006ea0:	f84a 1035 	str.w	r1, [sl, r5, lsl #3]
 8006ea4:	f8de 6004 	ldr.w	r6, [lr, #4]
 8006ea8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8006eac:	1a9b      	subs	r3, r3, r2
 8006eae:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006eb2:	f04f 0900 	mov.w	r9, #0
 8006eb6:	fbc7 8903 	smlal	r8, r9, r7, r3
 8006eba:	1089      	asrs	r1, r1, #2
 8006ebc:	10b2      	asrs	r2, r6, #2
 8006ebe:	1a8e      	subs	r6, r1, r2
 8006ec0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ec4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006ec8:	f04f 0900 	mov.w	r9, #0
 8006ecc:	fbc6 8907 	smlal	r8, r9, r6, r7
 8006ed0:	2700      	movs	r7, #0
 8006ed2:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ed6:	9700      	str	r7, [sp, #0]
 8006ed8:	fb86 8900 	smull	r8, r9, r6, r0
 8006edc:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8006ee0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8006ee4:	4646      	mov	r6, r8
 8006ee6:	464f      	mov	r7, r9
 8006ee8:	f8cd 8008 	str.w	r8, [sp, #8]
 8006eec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006ef0:	ebb6 0808 	subs.w	r8, r6, r8
 8006ef4:	eb67 0909 	sbc.w	r9, r7, r9
 8006ef8:	4646      	mov	r6, r8
 8006efa:	464f      	mov	r7, r9
 8006efc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f00:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 8006f04:	f147 0700 	adc.w	r7, r7, #0
 8006f08:	fbc0 8903 	smlal	r8, r9, r0, r3
 8006f0c:	440a      	add	r2, r1
 8006f0e:	007b      	lsls	r3, r7, #1
 8006f10:	f8cc 2004 	str.w	r2, [ip, #4]
 8006f14:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8006f18:	f84b 3035 	str.w	r3, [fp, r5, lsl #3]
 8006f1c:	9b08      	ldr	r3, [sp, #32]
 8006f1e:	f149 0900 	adc.w	r9, r9, #0
 8006f22:	3501      	adds	r5, #1
 8006f24:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8006f28:	429d      	cmp	r5, r3
 8006f2a:	f8ce 2004 	str.w	r2, [lr, #4]
 8006f2e:	f104 0408 	add.w	r4, r4, #8
 8006f32:	f10c 0c08 	add.w	ip, ip, #8
 8006f36:	f10e 0e08 	add.w	lr, lr, #8
 8006f3a:	d1a6      	bne.n	8006e8a <arm_cfft_radix4by2_inverse_q31+0x2a>
 8006f3c:	9e07      	ldr	r6, [sp, #28]
 8006f3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006f40:	4650      	mov	r0, sl
 8006f42:	4629      	mov	r1, r5
 8006f44:	4632      	mov	r2, r6
 8006f46:	2302      	movs	r3, #2
 8006f48:	f000 fa9c 	bl	8007484 <arm_radix4_butterfly_inverse_q31>
 8006f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f4e:	4629      	mov	r1, r5
 8006f50:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8006f54:	4632      	mov	r2, r6
 8006f56:	2302      	movs	r3, #2
 8006f58:	f000 fa94 	bl	8007484 <arm_radix4_butterfly_inverse_q31>
 8006f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f5e:	f10a 0a04 	add.w	sl, sl, #4
 8006f62:	449b      	add	fp, r3
 8006f64:	1d21      	adds	r1, r4, #4
 8006f66:	c90e      	ldmia	r1, {r1, r2, r3}
 8006f68:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006f6c:	0049      	lsls	r1, r1, #1
 8006f6e:	0040      	lsls	r0, r0, #1
 8006f70:	0052      	lsls	r2, r2, #1
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	f84a 0c04 	str.w	r0, [sl, #-4]
 8006f78:	3410      	adds	r4, #16
 8006f7a:	f844 1c0c 	str.w	r1, [r4, #-12]
 8006f7e:	f844 2c08 	str.w	r2, [r4, #-8]
 8006f82:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f86:	455c      	cmp	r4, fp
 8006f88:	f10a 0a10 	add.w	sl, sl, #16
 8006f8c:	d1ea      	bne.n	8006f64 <arm_cfft_radix4by2_inverse_q31+0x104>
 8006f8e:	b00d      	add	sp, #52	; 0x34
 8006f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f94:	461c      	mov	r4, r3
 8006f96:	4619      	mov	r1, r3
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f000 fa73 	bl	8007484 <arm_radix4_butterfly_inverse_q31>
 8006f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa0:	9a07      	ldr	r2, [sp, #28]
 8006fa2:	eb0a 0083 	add.w	r0, sl, r3, lsl #2
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	2302      	movs	r3, #2
 8006faa:	b00d      	add	sp, #52	; 0x34
 8006fac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	f000 ba68 	b.w	8007484 <arm_radix4_butterfly_inverse_q31>

08006fb4 <arm_cfft_q31>:
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	2a01      	cmp	r2, #1
 8006fb8:	460d      	mov	r5, r1
 8006fba:	4604      	mov	r4, r0
 8006fbc:	461e      	mov	r6, r3
 8006fbe:	8801      	ldrh	r1, [r0, #0]
 8006fc0:	d024      	beq.n	800700c <arm_cfft_q31+0x58>
 8006fc2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006fc6:	d013      	beq.n	8006ff0 <arm_cfft_q31+0x3c>
 8006fc8:	d808      	bhi.n	8006fdc <arm_cfft_q31+0x28>
 8006fca:	2920      	cmp	r1, #32
 8006fcc:	d031      	beq.n	8007032 <arm_cfft_q31+0x7e>
 8006fce:	d945      	bls.n	800705c <arm_cfft_q31+0xa8>
 8006fd0:	2940      	cmp	r1, #64	; 0x40
 8006fd2:	d00d      	beq.n	8006ff0 <arm_cfft_q31+0x3c>
 8006fd4:	2980      	cmp	r1, #128	; 0x80
 8006fd6:	d02c      	beq.n	8007032 <arm_cfft_q31+0x7e>
 8006fd8:	b98e      	cbnz	r6, 8006ffe <arm_cfft_q31+0x4a>
 8006fda:	bd70      	pop	{r4, r5, r6, pc}
 8006fdc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006fe0:	d006      	beq.n	8006ff0 <arm_cfft_q31+0x3c>
 8006fe2:	d923      	bls.n	800702c <arm_cfft_q31+0x78>
 8006fe4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006fe8:	d023      	beq.n	8007032 <arm_cfft_q31+0x7e>
 8006fea:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006fee:	d1f3      	bne.n	8006fd8 <arm_cfft_q31+0x24>
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	6862      	ldr	r2, [r4, #4]
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f000 f83b 	bl	8007070 <arm_radix4_butterfly_q31>
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	d0ed      	beq.n	8006fda <arm_cfft_q31+0x26>
 8006ffe:	4628      	mov	r0, r5
 8007000:	89a1      	ldrh	r1, [r4, #12]
 8007002:	68a2      	ldr	r2, [r4, #8]
 8007004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007008:	f7f9 b8f2 	b.w	80001f0 <arm_bitreversal_32>
 800700c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007010:	d01e      	beq.n	8007050 <arm_cfft_q31+0x9c>
 8007012:	d813      	bhi.n	800703c <arm_cfft_q31+0x88>
 8007014:	2920      	cmp	r1, #32
 8007016:	d004      	beq.n	8007022 <arm_cfft_q31+0x6e>
 8007018:	d927      	bls.n	800706a <arm_cfft_q31+0xb6>
 800701a:	2940      	cmp	r1, #64	; 0x40
 800701c:	d018      	beq.n	8007050 <arm_cfft_q31+0x9c>
 800701e:	2980      	cmp	r1, #128	; 0x80
 8007020:	d1da      	bne.n	8006fd8 <arm_cfft_q31+0x24>
 8007022:	4628      	mov	r0, r5
 8007024:	6862      	ldr	r2, [r4, #4]
 8007026:	f7ff ff1b 	bl	8006e60 <arm_cfft_radix4by2_inverse_q31>
 800702a:	e7d5      	b.n	8006fd8 <arm_cfft_q31+0x24>
 800702c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007030:	d1d2      	bne.n	8006fd8 <arm_cfft_q31+0x24>
 8007032:	4628      	mov	r0, r5
 8007034:	6862      	ldr	r2, [r4, #4]
 8007036:	f7ff fe73 	bl	8006d20 <arm_cfft_radix4by2_q31>
 800703a:	e7cd      	b.n	8006fd8 <arm_cfft_q31+0x24>
 800703c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007040:	d006      	beq.n	8007050 <arm_cfft_q31+0x9c>
 8007042:	d90e      	bls.n	8007062 <arm_cfft_q31+0xae>
 8007044:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007048:	d0eb      	beq.n	8007022 <arm_cfft_q31+0x6e>
 800704a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800704e:	d1c3      	bne.n	8006fd8 <arm_cfft_q31+0x24>
 8007050:	4628      	mov	r0, r5
 8007052:	6862      	ldr	r2, [r4, #4]
 8007054:	2301      	movs	r3, #1
 8007056:	f000 fa15 	bl	8007484 <arm_radix4_butterfly_inverse_q31>
 800705a:	e7bd      	b.n	8006fd8 <arm_cfft_q31+0x24>
 800705c:	2910      	cmp	r1, #16
 800705e:	d1bb      	bne.n	8006fd8 <arm_cfft_q31+0x24>
 8007060:	e7c6      	b.n	8006ff0 <arm_cfft_q31+0x3c>
 8007062:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007066:	d0dc      	beq.n	8007022 <arm_cfft_q31+0x6e>
 8007068:	e7b6      	b.n	8006fd8 <arm_cfft_q31+0x24>
 800706a:	2910      	cmp	r1, #16
 800706c:	d1b4      	bne.n	8006fd8 <arm_cfft_q31+0x24>
 800706e:	e7ef      	b.n	8007050 <arm_cfft_q31+0x9c>

08007070 <arm_radix4_butterfly_q31>:
 8007070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	b0a1      	sub	sp, #132	; 0x84
 8007076:	461e      	mov	r6, r3
 8007078:	910f      	str	r1, [sp, #60]	; 0x3c
 800707a:	0889      	lsrs	r1, r1, #2
 800707c:	460c      	mov	r4, r1
 800707e:	911f      	str	r1, [sp, #124]	; 0x7c
 8007080:	00c9      	lsls	r1, r1, #3
 8007082:	4607      	mov	r7, r0
 8007084:	901e      	str	r0, [sp, #120]	; 0x78
 8007086:	4408      	add	r0, r1
 8007088:	4694      	mov	ip, r2
 800708a:	930c      	str	r3, [sp, #48]	; 0x30
 800708c:	9218      	str	r2, [sp, #96]	; 0x60
 800708e:	1843      	adds	r3, r0, r1
 8007090:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8007094:	3108      	adds	r1, #8
 8007096:	eb03 0b01 	add.w	fp, r3, r1
 800709a:	00d1      	lsls	r1, r2, #3
 800709c:	910b      	str	r1, [sp, #44]	; 0x2c
 800709e:	0131      	lsls	r1, r6, #4
 80070a0:	f103 0808 	add.w	r8, r3, #8
 80070a4:	f107 0e08 	add.w	lr, r7, #8
 80070a8:	910a      	str	r1, [sp, #40]	; 0x28
 80070aa:	00f1      	lsls	r1, r6, #3
 80070ac:	46c2      	mov	sl, r8
 80070ae:	f100 0908 	add.w	r9, r0, #8
 80070b2:	9403      	str	r4, [sp, #12]
 80070b4:	9109      	str	r1, [sp, #36]	; 0x24
 80070b6:	f8cd c010 	str.w	ip, [sp, #16]
 80070ba:	f8cd c004 	str.w	ip, [sp, #4]
 80070be:	f8cd c008 	str.w	ip, [sp, #8]
 80070c2:	46f0      	mov	r8, lr
 80070c4:	f858 0c08 	ldr.w	r0, [r8, #-8]
 80070c8:	f85a 2c08 	ldr.w	r2, [sl, #-8]
 80070cc:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 80070d0:	f859 1c08 	ldr.w	r1, [r9, #-8]
 80070d4:	f85a 6c04 	ldr.w	r6, [sl, #-4]
 80070d8:	ea4f 1c20 	mov.w	ip, r0, asr #4
 80070dc:	1112      	asrs	r2, r2, #4
 80070de:	111b      	asrs	r3, r3, #4
 80070e0:	eb0c 0502 	add.w	r5, ip, r2
 80070e4:	eb03 1321 	add.w	r3, r3, r1, asr #4
 80070e8:	9206      	str	r2, [sp, #24]
 80070ea:	18ea      	adds	r2, r5, r3
 80070ec:	f848 2c08 	str.w	r2, [r8, #-8]
 80070f0:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 80070f4:	f858 1c04 	ldr.w	r1, [r8, #-4]
 80070f8:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80070fc:	ea4f 1e26 	mov.w	lr, r6, asr #4
 8007100:	1109      	asrs	r1, r1, #4
 8007102:	1124      	asrs	r4, r4, #4
 8007104:	eb04 1420 	add.w	r4, r4, r0, asr #4
 8007108:	9108      	str	r1, [sp, #32]
 800710a:	4471      	add	r1, lr
 800710c:	190a      	adds	r2, r1, r4
 800710e:	f848 2c04 	str.w	r2, [r8, #-4]
 8007112:	9a02      	ldr	r2, [sp, #8]
 8007114:	6810      	ldr	r0, [r2, #0]
 8007116:	6852      	ldr	r2, [r2, #4]
 8007118:	1b09      	subs	r1, r1, r4
 800711a:	fb81 6702 	smull	r6, r7, r1, r2
 800711e:	1aeb      	subs	r3, r5, r3
 8007120:	fb83 4500 	smull	r4, r5, r3, r0
 8007124:	463e      	mov	r6, r7
 8007126:	fb83 2302 	smull	r2, r3, r3, r2
 800712a:	fb80 0101 	smull	r0, r1, r0, r1
 800712e:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 8007132:	442e      	add	r6, r5
 8007134:	f85b 5c04 	ldr.w	r5, [fp, #-4]
 8007138:	1ac9      	subs	r1, r1, r3
 800713a:	e919 0018 	ldmdb	r9, {r3, r4}
 800713e:	1128      	asrs	r0, r5, #4
 8007140:	1115      	asrs	r5, r2, #4
 8007142:	9a06      	ldr	r2, [sp, #24]
 8007144:	0076      	lsls	r6, r6, #1
 8007146:	ebc2 020c 	rsb	r2, r2, ip
 800714a:	0049      	lsls	r1, r1, #1
 800714c:	ebc0 1c24 	rsb	ip, r0, r4, asr #4
 8007150:	9801      	ldr	r0, [sp, #4]
 8007152:	f849 6c08 	str.w	r6, [r9, #-8]
 8007156:	f849 1c04 	str.w	r1, [r9, #-4]
 800715a:	9e08      	ldr	r6, [sp, #32]
 800715c:	6841      	ldr	r1, [r0, #4]
 800715e:	ebc5 1323 	rsb	r3, r5, r3, asr #4
 8007162:	6805      	ldr	r5, [r0, #0]
 8007164:	ebce 0e06 	rsb	lr, lr, r6
 8007168:	eb02 000c 	add.w	r0, r2, ip
 800716c:	fb80 6705 	smull	r6, r7, r0, r5
 8007170:	ebc3 040e 	rsb	r4, r3, lr
 8007174:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007178:	fb84 6701 	smull	r6, r7, r4, r1
 800717c:	463e      	mov	r6, r7
 800717e:	9f07      	ldr	r7, [sp, #28]
 8007180:	fb85 4504 	smull	r4, r5, r5, r4
 8007184:	fb80 0101 	smull	r0, r1, r0, r1
 8007188:	443e      	add	r6, r7
 800718a:	1a69      	subs	r1, r5, r1
 800718c:	0070      	lsls	r0, r6, #1
 800718e:	0049      	lsls	r1, r1, #1
 8007190:	e90a 0003 	stmdb	sl, {r0, r1}
 8007194:	9f04      	ldr	r7, [sp, #16]
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	687e      	ldr	r6, [r7, #4]
 800719a:	ebcc 0202 	rsb	r2, ip, r2
 800719e:	fb82 4501 	smull	r4, r5, r2, r1
 80071a2:	4473      	add	r3, lr
 80071a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80071a8:	fb81 0103 	smull	r0, r1, r1, r3
 80071ac:	fb83 4506 	smull	r4, r5, r3, r6
 80071b0:	fb82 2306 	smull	r2, r3, r2, r6
 80071b4:	1acb      	subs	r3, r1, r3
 80071b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80071b8:	9902      	ldr	r1, [sp, #8]
 80071ba:	9c05      	ldr	r4, [sp, #20]
 80071bc:	9801      	ldr	r0, [sp, #4]
 80071be:	4431      	add	r1, r6
 80071c0:	9102      	str	r1, [sp, #8]
 80071c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071c4:	442c      	add	r4, r5
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	1841      	adds	r1, r0, r1
 80071ca:	0062      	lsls	r2, r4, #1
 80071cc:	e90b 000c 	stmdb	fp, {r2, r3}
 80071d0:	9101      	str	r1, [sp, #4]
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071d6:	3b01      	subs	r3, #1
 80071d8:	4439      	add	r1, r7
 80071da:	f108 0808 	add.w	r8, r8, #8
 80071de:	f109 0908 	add.w	r9, r9, #8
 80071e2:	f10a 0a08 	add.w	sl, sl, #8
 80071e6:	9104      	str	r1, [sp, #16]
 80071e8:	f10b 0b08 	add.w	fp, fp, #8
 80071ec:	9303      	str	r3, [sp, #12]
 80071ee:	f47f af69 	bne.w	80070c4 <arm_radix4_butterfly_q31+0x54>
 80071f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80071f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	f240 80f5 	bls.w	80073ea <arm_radix4_butterfly_q31+0x37a>
 8007200:	931c      	str	r3, [sp, #112]	; 0x70
 8007202:	930e      	str	r3, [sp, #56]	; 0x38
 8007204:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007206:	0883      	lsrs	r3, r0, #2
 8007208:	461a      	mov	r2, r3
 800720a:	931d      	str	r3, [sp, #116]	; 0x74
 800720c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800720e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007212:	2100      	movs	r1, #0
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	460c      	mov	r4, r1
 8007218:	9113      	str	r1, [sp, #76]	; 0x4c
 800721a:	931b      	str	r3, [sp, #108]	; 0x6c
 800721c:	4611      	mov	r1, r2
 800721e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007220:	9315      	str	r3, [sp, #84]	; 0x54
 8007222:	3a01      	subs	r2, #1
 8007224:	9219      	str	r2, [sp, #100]	; 0x64
 8007226:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 800722a:	00ca      	lsls	r2, r1, #3
 800722c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800722e:	921a      	str	r2, [sp, #104]	; 0x68
 8007230:	9416      	str	r4, [sp, #88]	; 0x58
 8007232:	9314      	str	r3, [sp, #80]	; 0x50
 8007234:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 8007238:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800723a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800723c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800723e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8007240:	00d9      	lsls	r1, r3, #3
 8007242:	4622      	mov	r2, r4
 8007244:	440a      	add	r2, r1
 8007246:	4411      	add	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	6849      	ldr	r1, [r1, #4]
 800724e:	6852      	ldr	r2, [r2, #4]
 8007250:	58e3      	ldr	r3, [r4, r3]
 8007252:	9106      	str	r1, [sp, #24]
 8007254:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007256:	9204      	str	r2, [sp, #16]
 8007258:	9310      	str	r3, [sp, #64]	; 0x40
 800725a:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 800725e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007260:	9203      	str	r2, [sp, #12]
 8007262:	680a      	ldr	r2, [r1, #0]
 8007264:	9208      	str	r2, [sp, #32]
 8007266:	18c3      	adds	r3, r0, r3
 8007268:	684a      	ldr	r2, [r1, #4]
 800726a:	9211      	str	r2, [sp, #68]	; 0x44
 800726c:	9316      	str	r3, [sp, #88]	; 0x58
 800726e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007272:	eb07 0a05 	add.w	sl, r7, r5
 8007276:	eb0a 0e05 	add.w	lr, sl, r5
 800727a:	4293      	cmp	r3, r2
 800727c:	eb0e 0c05 	add.w	ip, lr, r5
 8007280:	f240 809a 	bls.w	80073b8 <arm_radix4_butterfly_q31+0x348>
 8007284:	4613      	mov	r3, r2
 8007286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007288:	9701      	str	r7, [sp, #4]
 800728a:	4413      	add	r3, r2
 800728c:	46d3      	mov	fp, sl
 800728e:	9309      	str	r3, [sp, #36]	; 0x24
 8007290:	f8cd e008 	str.w	lr, [sp, #8]
 8007294:	46e2      	mov	sl, ip
 8007296:	9f01      	ldr	r7, [sp, #4]
 8007298:	9c02      	ldr	r4, [sp, #8]
 800729a:	683d      	ldr	r5, [r7, #0]
 800729c:	6820      	ldr	r0, [r4, #0]
 800729e:	f8db 1000 	ldr.w	r1, [fp]
 80072a2:	f8da 2000 	ldr.w	r2, [sl]
 80072a6:	6863      	ldr	r3, [r4, #4]
 80072a8:	687c      	ldr	r4, [r7, #4]
 80072aa:	eb05 0c00 	add.w	ip, r5, r0
 80072ae:	440a      	add	r2, r1
 80072b0:	eb0c 0102 	add.w	r1, ip, r2
 80072b4:	1089      	asrs	r1, r1, #2
 80072b6:	6039      	str	r1, [r7, #0]
 80072b8:	f8da 1004 	ldr.w	r1, [sl, #4]
 80072bc:	f8db 6004 	ldr.w	r6, [fp, #4]
 80072c0:	eb04 0803 	add.w	r8, r4, r3
 80072c4:	440e      	add	r6, r1
 80072c6:	eb08 0106 	add.w	r1, r8, r6
 80072ca:	1089      	asrs	r1, r1, #2
 80072cc:	6079      	str	r1, [r7, #4]
 80072ce:	1ae4      	subs	r4, r4, r3
 80072d0:	f8da 1004 	ldr.w	r1, [sl, #4]
 80072d4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80072d8:	f8da 7000 	ldr.w	r7, [sl]
 80072dc:	1a59      	subs	r1, r3, r1
 80072de:	f8db 3000 	ldr.w	r3, [fp]
 80072e2:	ebc0 0e05 	rsb	lr, r0, r5
 80072e6:	1bdb      	subs	r3, r3, r7
 80072e8:	eb0e 0001 	add.w	r0, lr, r1
 80072ec:	ebc2 020c 	rsb	r2, r2, ip
 80072f0:	ebc1 010e 	rsb	r1, r1, lr
 80072f4:	ebc6 0c08 	rsb	ip, r6, r8
 80072f8:	ebc3 0e04 	rsb	lr, r3, r4
 80072fc:	9d04      	ldr	r5, [sp, #16]
 80072fe:	9e03      	ldr	r6, [sp, #12]
 8007300:	4423      	add	r3, r4
 8007302:	9c06      	ldr	r4, [sp, #24]
 8007304:	930a      	str	r3, [sp, #40]	; 0x28
 8007306:	fb8e 8905 	smull	r8, r9, lr, r5
 800730a:	fb80 6706 	smull	r6, r7, r0, r6
 800730e:	4623      	mov	r3, r4
 8007310:	fb8c 4503 	smull	r4, r5, ip, r3
 8007314:	eb09 0307 	add.w	r3, r9, r7
 8007318:	930b      	str	r3, [sp, #44]	; 0x2c
 800731a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800731c:	9c06      	ldr	r4, [sp, #24]
 800731e:	fb82 6703 	smull	r6, r7, r2, r3
 8007322:	fb8c 8903 	smull	r8, r9, ip, r3
 8007326:	eb05 0c07 	add.w	ip, r5, r7
 800732a:	fb82 4504 	smull	r4, r5, r2, r4
 800732e:	9a03      	ldr	r2, [sp, #12]
 8007330:	fb8e 6702 	smull	r6, r7, lr, r2
 8007334:	9a04      	ldr	r2, [sp, #16]
 8007336:	fb80 2302 	smull	r2, r3, r0, r2
 800733a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800733e:	9b08      	ldr	r3, [sp, #32]
 8007340:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007342:	ebc5 0e09 	rsb	lr, r5, r9
 8007346:	fb81 4503 	smull	r4, r5, r1, r3
 800734a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800734c:	1abe      	subs	r6, r7, r2
 800734e:	4618      	mov	r0, r3
 8007350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007352:	960c      	str	r6, [sp, #48]	; 0x30
 8007354:	461e      	mov	r6, r3
 8007356:	9b08      	ldr	r3, [sp, #32]
 8007358:	fb81 0100 	smull	r0, r1, r1, r0
 800735c:	fb82 8903 	smull	r8, r9, r2, r3
 8007360:	fb82 6706 	smull	r6, r7, r2, r6
 8007364:	ebc1 0309 	rsb	r3, r1, r9
 8007368:	197c      	adds	r4, r7, r5
 800736a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800736c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800736e:	9f01      	ldr	r7, [sp, #4]
 8007370:	ea4f 056c 	mov.w	r5, ip, asr #1
 8007374:	ea4f 0c63 	mov.w	ip, r3, asr #1
 8007378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800737a:	f8cb 5000 	str.w	r5, [fp]
 800737e:	ea4f 026e 	mov.w	r2, lr, asr #1
 8007382:	441f      	add	r7, r3
 8007384:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8007388:	9701      	str	r7, [sp, #4]
 800738a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800738c:	f8cb 2004 	str.w	r2, [fp, #4]
 8007390:	9d02      	ldr	r5, [sp, #8]
 8007392:	4672      	mov	r2, lr
 8007394:	443a      	add	r2, r7
 8007396:	9209      	str	r2, [sp, #36]	; 0x24
 8007398:	449b      	add	fp, r3
 800739a:	461a      	mov	r2, r3
 800739c:	18eb      	adds	r3, r5, r3
 800739e:	9302      	str	r3, [sp, #8]
 80073a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073a2:	1049      	asrs	r1, r1, #1
 80073a4:	1040      	asrs	r0, r0, #1
 80073a6:	1064      	asrs	r4, r4, #1
 80073a8:	4573      	cmp	r3, lr
 80073aa:	6029      	str	r1, [r5, #0]
 80073ac:	6068      	str	r0, [r5, #4]
 80073ae:	e88a 1010 	stmia.w	sl, {r4, ip}
 80073b2:	4492      	add	sl, r2
 80073b4:	f63f af6f 	bhi.w	8007296 <arm_radix4_butterfly_q31+0x226>
 80073b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073ba:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80073bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073be:	440a      	add	r2, r1
 80073c0:	9214      	str	r2, [sp, #80]	; 0x50
 80073c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073c4:	3208      	adds	r2, #8
 80073c6:	9215      	str	r2, [sp, #84]	; 0x54
 80073c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073ca:	3301      	adds	r3, #1
 80073cc:	4293      	cmp	r3, r2
 80073ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80073d0:	f67f af32 	bls.w	8007238 <arm_radix4_butterfly_q31+0x1c8>
 80073d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80073d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073d8:	089b      	lsrs	r3, r3, #2
 80073da:	0092      	lsls	r2, r2, #2
 80073dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80073de:	2b04      	cmp	r3, #4
 80073e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80073e2:	931c      	str	r3, [sp, #112]	; 0x70
 80073e4:	920e      	str	r2, [sp, #56]	; 0x38
 80073e6:	f63f af0d 	bhi.w	8007204 <arm_radix4_butterfly_q31+0x194>
 80073ea:	981e      	ldr	r0, [sp, #120]	; 0x78
 80073ec:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 80073f0:	3020      	adds	r0, #32
 80073f2:	f850 2c20 	ldr.w	r2, [r0, #-32]
 80073f6:	f850 3c18 	ldr.w	r3, [r0, #-24]
 80073fa:	f850 1c14 	ldr.w	r1, [r0, #-20]
 80073fe:	f850 8c1c 	ldr.w	r8, [r0, #-28]
 8007402:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8007406:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 800740a:	e910 4080 	ldmdb	r0, {r7, lr}
 800740e:	18d6      	adds	r6, r2, r3
 8007410:	1ad5      	subs	r5, r2, r3
 8007412:	1854      	adds	r4, r2, r1
 8007414:	1a52      	subs	r2, r2, r1
 8007416:	eb08 0b01 	add.w	fp, r8, r1
 800741a:	4456      	add	r6, sl
 800741c:	ebc1 0108 	rsb	r1, r1, r8
 8007420:	4455      	add	r5, sl
 8007422:	ebca 0404 	rsb	r4, sl, r4
 8007426:	ebca 0202 	rsb	r2, sl, r2
 800742a:	ebc3 0a08 	rsb	sl, r3, r8
 800742e:	4443      	add	r3, r8
 8007430:	4461      	add	r1, ip
 8007432:	44e3      	add	fp, ip
 8007434:	ebcc 080a 	rsb	r8, ip, sl
 8007438:	ebcc 0303 	rsb	r3, ip, r3
 800743c:	ebce 0404 	rsb	r4, lr, r4
 8007440:	4472      	add	r2, lr
 8007442:	44f3      	add	fp, lr
 8007444:	443e      	add	r6, r7
 8007446:	ebce 0e01 	rsb	lr, lr, r1
 800744a:	1bed      	subs	r5, r5, r7
 800744c:	eb08 0107 	add.w	r1, r8, r7
 8007450:	1bdb      	subs	r3, r3, r7
 8007452:	f1b9 0901 	subs.w	r9, r9, #1
 8007456:	f840 6c20 	str.w	r6, [r0, #-32]
 800745a:	f840 5c18 	str.w	r5, [r0, #-24]
 800745e:	f840 4c10 	str.w	r4, [r0, #-16]
 8007462:	f840 2c08 	str.w	r2, [r0, #-8]
 8007466:	f840 bc1c 	str.w	fp, [r0, #-28]
 800746a:	f840 ec14 	str.w	lr, [r0, #-20]
 800746e:	f840 1c0c 	str.w	r1, [r0, #-12]
 8007472:	f840 3c04 	str.w	r3, [r0, #-4]
 8007476:	f100 0020 	add.w	r0, r0, #32
 800747a:	d1ba      	bne.n	80073f2 <arm_radix4_butterfly_q31+0x382>
 800747c:	b021      	add	sp, #132	; 0x84
 800747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007482:	bf00      	nop

08007484 <arm_radix4_butterfly_inverse_q31>:
 8007484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	b09f      	sub	sp, #124	; 0x7c
 800748a:	461e      	mov	r6, r3
 800748c:	910f      	str	r1, [sp, #60]	; 0x3c
 800748e:	0889      	lsrs	r1, r1, #2
 8007490:	460c      	mov	r4, r1
 8007492:	911d      	str	r1, [sp, #116]	; 0x74
 8007494:	00c9      	lsls	r1, r1, #3
 8007496:	4607      	mov	r7, r0
 8007498:	901c      	str	r0, [sp, #112]	; 0x70
 800749a:	4408      	add	r0, r1
 800749c:	4692      	mov	sl, r2
 800749e:	930c      	str	r3, [sp, #48]	; 0x30
 80074a0:	9216      	str	r2, [sp, #88]	; 0x58
 80074a2:	1843      	adds	r3, r0, r1
 80074a4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80074a8:	3108      	adds	r1, #8
 80074aa:	f103 0e08 	add.w	lr, r3, #8
 80074ae:	eb03 0b01 	add.w	fp, r3, r1
 80074b2:	00d3      	lsls	r3, r2, #3
 80074b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80074b6:	0133      	lsls	r3, r6, #4
 80074b8:	3708      	adds	r7, #8
 80074ba:	930a      	str	r3, [sp, #40]	; 0x28
 80074bc:	00f3      	lsls	r3, r6, #3
 80074be:	46f1      	mov	r9, lr
 80074c0:	f100 0c08 	add.w	ip, r0, #8
 80074c4:	9403      	str	r4, [sp, #12]
 80074c6:	9309      	str	r3, [sp, #36]	; 0x24
 80074c8:	46d0      	mov	r8, sl
 80074ca:	46be      	mov	lr, r7
 80074cc:	f8cd a008 	str.w	sl, [sp, #8]
 80074d0:	f8cd a004 	str.w	sl, [sp, #4]
 80074d4:	f859 0c08 	ldr.w	r0, [r9, #-8]
 80074d8:	f85e 4c08 	ldr.w	r4, [lr, #-8]
 80074dc:	f85b 2c08 	ldr.w	r2, [fp, #-8]
 80074e0:	f859 1c04 	ldr.w	r1, [r9, #-4]
 80074e4:	1103      	asrs	r3, r0, #4
 80074e6:	4618      	mov	r0, r3
 80074e8:	ea4f 1a24 	mov.w	sl, r4, asr #4
 80074ec:	eb0a 0500 	add.w	r5, sl, r0
 80074f0:	9008      	str	r0, [sp, #32]
 80074f2:	f85c 0c08 	ldr.w	r0, [ip, #-8]
 80074f6:	1113      	asrs	r3, r2, #4
 80074f8:	eb03 1320 	add.w	r3, r3, r0, asr #4
 80074fc:	18ea      	adds	r2, r5, r3
 80074fe:	f84e 2c08 	str.w	r2, [lr, #-8]
 8007502:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 8007506:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 800750a:	f85c 0c04 	ldr.w	r0, [ip, #-4]
 800750e:	1112      	asrs	r2, r2, #4
 8007510:	1109      	asrs	r1, r1, #4
 8007512:	1124      	asrs	r4, r4, #4
 8007514:	eb04 1420 	add.w	r4, r4, r0, asr #4
 8007518:	9106      	str	r1, [sp, #24]
 800751a:	1851      	adds	r1, r2, r1
 800751c:	9204      	str	r2, [sp, #16]
 800751e:	190a      	adds	r2, r1, r4
 8007520:	f84e 2c04 	str.w	r2, [lr, #-4]
 8007524:	9a02      	ldr	r2, [sp, #8]
 8007526:	f85b 6c04 	ldr.w	r6, [fp, #-4]
 800752a:	6810      	ldr	r0, [r2, #0]
 800752c:	6852      	ldr	r2, [r2, #4]
 800752e:	1aeb      	subs	r3, r5, r3
 8007530:	1b09      	subs	r1, r1, r4
 8007532:	fb83 4500 	smull	r4, r5, r3, r0
 8007536:	462f      	mov	r7, r5
 8007538:	fb81 4502 	smull	r4, r5, r1, r2
 800753c:	fb83 2302 	smull	r2, r3, r3, r2
 8007540:	fb80 0101 	smull	r0, r1, r0, r1
 8007544:	4419      	add	r1, r3
 8007546:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 800754a:	f85c 4c08 	ldr.w	r4, [ip, #-8]
 800754e:	f85c 0c04 	ldr.w	r0, [ip, #-4]
 8007552:	1132      	asrs	r2, r6, #4
 8007554:	111e      	asrs	r6, r3, #4
 8007556:	9b08      	ldr	r3, [sp, #32]
 8007558:	0049      	lsls	r1, r1, #1
 800755a:	f84c 1c04 	str.w	r1, [ip, #-4]
 800755e:	ebc3 0a0a 	rsb	sl, r3, sl
 8007562:	9906      	ldr	r1, [sp, #24]
 8007564:	9b04      	ldr	r3, [sp, #16]
 8007566:	1b7d      	subs	r5, r7, r5
 8007568:	1a5b      	subs	r3, r3, r1
 800756a:	006d      	lsls	r5, r5, #1
 800756c:	ebc6 1124 	rsb	r1, r6, r4, asr #4
 8007570:	9c01      	ldr	r4, [sp, #4]
 8007572:	f84c 5c08 	str.w	r5, [ip, #-8]
 8007576:	ebc2 1220 	rsb	r2, r2, r0, asr #4
 800757a:	6820      	ldr	r0, [r4, #0]
 800757c:	6864      	ldr	r4, [r4, #4]
 800757e:	9108      	str	r1, [sp, #32]
 8007580:	ebc2 050a 	rsb	r5, r2, sl
 8007584:	fb85 6700 	smull	r6, r7, r5, r0
 8007588:	1859      	adds	r1, r3, r1
 800758a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800758e:	fb81 6704 	smull	r6, r7, r1, r4
 8007592:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007596:	9f07      	ldr	r7, [sp, #28]
 8007598:	9e05      	ldr	r6, [sp, #20]
 800759a:	fb80 0101 	smull	r0, r1, r0, r1
 800759e:	fb85 4504 	smull	r4, r5, r5, r4
 80075a2:	1bf6      	subs	r6, r6, r7
 80075a4:	4429      	add	r1, r5
 80075a6:	0070      	lsls	r0, r6, #1
 80075a8:	0049      	lsls	r1, r1, #1
 80075aa:	e909 0003 	stmdb	r9, {r0, r1}
 80075ae:	9808      	ldr	r0, [sp, #32]
 80075b0:	f8d8 1000 	ldr.w	r1, [r8]
 80075b4:	1a1b      	subs	r3, r3, r0
 80075b6:	4452      	add	r2, sl
 80075b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80075bc:	fb82 4501 	smull	r4, r5, r2, r1
 80075c0:	462f      	mov	r7, r5
 80075c2:	fb83 4500 	smull	r4, r5, r3, r0
 80075c6:	fb81 0103 	smull	r0, r1, r1, r3
 80075ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80075ce:	9801      	ldr	r0, [sp, #4]
 80075d0:	fb82 2303 	smull	r2, r3, r2, r3
 80075d4:	1b7c      	subs	r4, r7, r5
 80075d6:	440b      	add	r3, r1
 80075d8:	9d02      	ldr	r5, [sp, #8]
 80075da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	440d      	add	r5, r1
 80075e0:	0062      	lsls	r2, r4, #1
 80075e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075e4:	9502      	str	r5, [sp, #8]
 80075e6:	e90b 000c 	stmdb	fp, {r2, r3}
 80075ea:	9b03      	ldr	r3, [sp, #12]
 80075ec:	4408      	add	r0, r1
 80075ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075f0:	9001      	str	r0, [sp, #4]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	f10e 0e08 	add.w	lr, lr, #8
 80075f8:	f10c 0c08 	add.w	ip, ip, #8
 80075fc:	f109 0908 	add.w	r9, r9, #8
 8007600:	4488      	add	r8, r1
 8007602:	f10b 0b08 	add.w	fp, fp, #8
 8007606:	9303      	str	r3, [sp, #12]
 8007608:	f47f af64 	bne.w	80074d4 <arm_radix4_butterfly_inverse_q31+0x50>
 800760c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	9315      	str	r3, [sp, #84]	; 0x54
 8007612:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007614:	2b04      	cmp	r3, #4
 8007616:	f240 80f1 	bls.w	80077fc <arm_radix4_butterfly_inverse_q31+0x378>
 800761a:	931a      	str	r3, [sp, #104]	; 0x68
 800761c:	930e      	str	r3, [sp, #56]	; 0x38
 800761e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007620:	0883      	lsrs	r3, r0, #2
 8007622:	461a      	mov	r2, r3
 8007624:	931b      	str	r3, [sp, #108]	; 0x6c
 8007626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007628:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800762c:	2100      	movs	r1, #0
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	460c      	mov	r4, r1
 8007632:	9111      	str	r1, [sp, #68]	; 0x44
 8007634:	9319      	str	r3, [sp, #100]	; 0x64
 8007636:	4611      	mov	r1, r2
 8007638:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800763a:	9313      	str	r3, [sp, #76]	; 0x4c
 800763c:	3a01      	subs	r2, #1
 800763e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007640:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
 8007644:	00ca      	lsls	r2, r1, #3
 8007646:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007648:	9218      	str	r2, [sp, #96]	; 0x60
 800764a:	9414      	str	r4, [sp, #80]	; 0x50
 800764c:	9312      	str	r3, [sp, #72]	; 0x48
 800764e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8007652:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007654:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8007656:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8007658:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800765a:	00d9      	lsls	r1, r3, #3
 800765c:	4622      	mov	r2, r4
 800765e:	440a      	add	r2, r1
 8007660:	4411      	add	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	6849      	ldr	r1, [r1, #4]
 8007668:	6852      	ldr	r2, [r2, #4]
 800766a:	58e3      	ldr	r3, [r4, r3]
 800766c:	9104      	str	r1, [sp, #16]
 800766e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007670:	9208      	str	r2, [sp, #32]
 8007672:	9310      	str	r3, [sp, #64]	; 0x40
 8007674:	f854 2030 	ldr.w	r2, [r4, r0, lsl #3]
 8007678:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800767a:	9203      	str	r2, [sp, #12]
 800767c:	680a      	ldr	r2, [r1, #0]
 800767e:	9206      	str	r2, [sp, #24]
 8007680:	18c3      	adds	r3, r0, r3
 8007682:	684a      	ldr	r2, [r1, #4]
 8007684:	9209      	str	r2, [sp, #36]	; 0x24
 8007686:	9314      	str	r3, [sp, #80]	; 0x50
 8007688:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800768a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800768c:	eb07 0a05 	add.w	sl, r7, r5
 8007690:	eb0a 0e05 	add.w	lr, sl, r5
 8007694:	4293      	cmp	r3, r2
 8007696:	eb0e 0c05 	add.w	ip, lr, r5
 800769a:	f240 8096 	bls.w	80077ca <arm_radix4_butterfly_inverse_q31+0x346>
 800769e:	4613      	mov	r3, r2
 80076a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076a2:	f8cd e004 	str.w	lr, [sp, #4]
 80076a6:	4413      	add	r3, r2
 80076a8:	46d3      	mov	fp, sl
 80076aa:	930a      	str	r3, [sp, #40]	; 0x28
 80076ac:	46be      	mov	lr, r7
 80076ae:	46e2      	mov	sl, ip
 80076b0:	9801      	ldr	r0, [sp, #4]
 80076b2:	f8de 7000 	ldr.w	r7, [lr]
 80076b6:	6805      	ldr	r5, [r0, #0]
 80076b8:	f8da 2000 	ldr.w	r2, [sl]
 80076bc:	f8db 1000 	ldr.w	r1, [fp]
 80076c0:	6843      	ldr	r3, [r0, #4]
 80076c2:	f8de 4004 	ldr.w	r4, [lr, #4]
 80076c6:	1978      	adds	r0, r7, r5
 80076c8:	4411      	add	r1, r2
 80076ca:	1842      	adds	r2, r0, r1
 80076cc:	1092      	asrs	r2, r2, #2
 80076ce:	f8ce 2000 	str.w	r2, [lr]
 80076d2:	f8da 2004 	ldr.w	r2, [sl, #4]
 80076d6:	f8db 6004 	ldr.w	r6, [fp, #4]
 80076da:	eb04 0803 	add.w	r8, r4, r3
 80076de:	4416      	add	r6, r2
 80076e0:	eb08 0206 	add.w	r2, r8, r6
 80076e4:	1092      	asrs	r2, r2, #2
 80076e6:	f8ce 2004 	str.w	r2, [lr, #4]
 80076ea:	ebc5 0907 	rsb	r9, r5, r7
 80076ee:	f8da 2004 	ldr.w	r2, [sl, #4]
 80076f2:	f8db 5004 	ldr.w	r5, [fp, #4]
 80076f6:	f8da 7000 	ldr.w	r7, [sl]
 80076fa:	1aaa      	subs	r2, r5, r2
 80076fc:	f8db 5000 	ldr.w	r5, [fp]
 8007700:	1ae4      	subs	r4, r4, r3
 8007702:	1beb      	subs	r3, r5, r7
 8007704:	9f03      	ldr	r7, [sp, #12]
 8007706:	ebc2 0509 	rsb	r5, r2, r9
 800770a:	ebc6 0c08 	rsb	ip, r6, r8
 800770e:	1a41      	subs	r1, r0, r1
 8007710:	950c      	str	r5, [sp, #48]	; 0x30
 8007712:	18e0      	adds	r0, r4, r3
 8007714:	444a      	add	r2, r9
 8007716:	1ae3      	subs	r3, r4, r3
 8007718:	fb85 8907 	smull	r8, r9, r5, r7
 800771c:	9c04      	ldr	r4, [sp, #16]
 800771e:	9d08      	ldr	r5, [sp, #32]
 8007720:	9202      	str	r2, [sp, #8]
 8007722:	fb80 6705 	smull	r6, r7, r0, r5
 8007726:	4622      	mov	r2, r4
 8007728:	fb8c 4502 	smull	r4, r5, ip, r2
 800772c:	ebc7 0209 	rsb	r2, r7, r9
 8007730:	920d      	str	r2, [sp, #52]	; 0x34
 8007732:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007734:	9c04      	ldr	r4, [sp, #16]
 8007736:	4616      	mov	r6, r2
 8007738:	fb81 6706 	smull	r6, r7, r1, r6
 800773c:	4690      	mov	r8, r2
 800773e:	fb8c 8908 	smull	r8, r9, ip, r8
 8007742:	9a06      	ldr	r2, [sp, #24]
 8007744:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007746:	ebc5 0c07 	rsb	ip, r5, r7
 800774a:	fb81 4504 	smull	r4, r5, r1, r4
 800774e:	eb05 0409 	add.w	r4, r5, r9
 8007752:	9f03      	ldr	r7, [sp, #12]
 8007754:	940c      	str	r4, [sp, #48]	; 0x30
 8007756:	4614      	mov	r4, r2
 8007758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800775a:	9d02      	ldr	r5, [sp, #8]
 800775c:	fb80 0107 	smull	r0, r1, r0, r7
 8007760:	4690      	mov	r8, r2
 8007762:	9f08      	ldr	r7, [sp, #32]
 8007764:	9a02      	ldr	r2, [sp, #8]
 8007766:	fb86 6707 	smull	r6, r7, r6, r7
 800776a:	fb82 8908 	smull	r8, r9, r2, r8
 800776e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007770:	9a06      	ldr	r2, [sp, #24]
 8007772:	4439      	add	r1, r7
 8007774:	fb83 6706 	smull	r6, r7, r3, r6
 8007778:	fb83 2302 	smull	r2, r3, r3, r2
 800777c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800777e:	fb85 4504 	smull	r4, r5, r5, r4
 8007782:	1054      	asrs	r4, r2, #1
 8007784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007786:	1050      	asrs	r0, r2, #1
 8007788:	f8cb 0004 	str.w	r0, [fp, #4]
 800778c:	1bee      	subs	r6, r5, r7
 800778e:	9801      	ldr	r0, [sp, #4]
 8007790:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8007792:	444b      	add	r3, r9
 8007794:	ea4f 056c 	mov.w	r5, ip, asr #1
 8007798:	1049      	asrs	r1, r1, #1
 800779a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800779e:	f8cb 5000 	str.w	r5, [fp]
 80077a2:	1072      	asrs	r2, r6, #1
 80077a4:	105b      	asrs	r3, r3, #1
 80077a6:	6041      	str	r1, [r0, #4]
 80077a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80077aa:	6004      	str	r4, [r0, #0]
 80077ac:	e88a 000c 	stmia.w	sl, {r2, r3}
 80077b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077b2:	4666      	mov	r6, ip
 80077b4:	19c1      	adds	r1, r0, r7
 80077b6:	44ac      	add	ip, r5
 80077b8:	42b3      	cmp	r3, r6
 80077ba:	44be      	add	lr, r7
 80077bc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80077c0:	44bb      	add	fp, r7
 80077c2:	9101      	str	r1, [sp, #4]
 80077c4:	44ba      	add	sl, r7
 80077c6:	f63f af73 	bhi.w	80076b0 <arm_radix4_butterfly_inverse_q31+0x22c>
 80077ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077cc:	9919      	ldr	r1, [sp, #100]	; 0x64
 80077ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077d0:	440a      	add	r2, r1
 80077d2:	9212      	str	r2, [sp, #72]	; 0x48
 80077d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077d6:	3208      	adds	r2, #8
 80077d8:	9213      	str	r2, [sp, #76]	; 0x4c
 80077da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077dc:	3301      	adds	r3, #1
 80077de:	4293      	cmp	r3, r2
 80077e0:	9311      	str	r3, [sp, #68]	; 0x44
 80077e2:	f67f af36 	bls.w	8007652 <arm_radix4_butterfly_inverse_q31+0x1ce>
 80077e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80077e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80077ea:	089b      	lsrs	r3, r3, #2
 80077ec:	0092      	lsls	r2, r2, #2
 80077ee:	9215      	str	r2, [sp, #84]	; 0x54
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80077f4:	931a      	str	r3, [sp, #104]	; 0x68
 80077f6:	920e      	str	r2, [sp, #56]	; 0x38
 80077f8:	f63f af11 	bhi.w	800761e <arm_radix4_butterfly_inverse_q31+0x19a>
 80077fc:	981c      	ldr	r0, [sp, #112]	; 0x70
 80077fe:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007802:	3020      	adds	r0, #32
 8007804:	f850 2c20 	ldr.w	r2, [r0, #-32]
 8007808:	f850 1c18 	ldr.w	r1, [r0, #-24]
 800780c:	f850 3c14 	ldr.w	r3, [r0, #-20]
 8007810:	f850 9c1c 	ldr.w	r9, [r0, #-28]
 8007814:	f850 ac10 	ldr.w	sl, [r0, #-16]
 8007818:	f850 cc0c 	ldr.w	ip, [r0, #-12]
 800781c:	e910 4010 	ldmdb	r0, {r4, lr}
 8007820:	1857      	adds	r7, r2, r1
 8007822:	1a56      	subs	r6, r2, r1
 8007824:	1ad5      	subs	r5, r2, r3
 8007826:	441a      	add	r2, r3
 8007828:	eb09 0b03 	add.w	fp, r9, r3
 800782c:	4457      	add	r7, sl
 800782e:	4456      	add	r6, sl
 8007830:	ebca 0505 	rsb	r5, sl, r5
 8007834:	ebc3 0309 	rsb	r3, r3, r9
 8007838:	ebca 0a02 	rsb	sl, sl, r2
 800783c:	eb09 0201 	add.w	r2, r9, r1
 8007840:	ebc1 0109 	rsb	r1, r1, r9
 8007844:	4463      	add	r3, ip
 8007846:	44e3      	add	fp, ip
 8007848:	ebcc 0202 	rsb	r2, ip, r2
 800784c:	ebcc 0101 	rsb	r1, ip, r1
 8007850:	4475      	add	r5, lr
 8007852:	ebce 0a0a 	rsb	sl, lr, sl
 8007856:	44f3      	add	fp, lr
 8007858:	4427      	add	r7, r4
 800785a:	ebce 0e03 	rsb	lr, lr, r3
 800785e:	1b36      	subs	r6, r6, r4
 8007860:	1b12      	subs	r2, r2, r4
 8007862:	190b      	adds	r3, r1, r4
 8007864:	f1b8 0801 	subs.w	r8, r8, #1
 8007868:	f840 7c20 	str.w	r7, [r0, #-32]
 800786c:	f840 6c18 	str.w	r6, [r0, #-24]
 8007870:	f840 5c10 	str.w	r5, [r0, #-16]
 8007874:	f840 ac08 	str.w	sl, [r0, #-8]
 8007878:	f840 bc1c 	str.w	fp, [r0, #-28]
 800787c:	f840 ec14 	str.w	lr, [r0, #-20]
 8007880:	f840 2c0c 	str.w	r2, [r0, #-12]
 8007884:	f840 3c04 	str.w	r3, [r0, #-4]
 8007888:	f100 0020 	add.w	r0, r0, #32
 800788c:	d1ba      	bne.n	8007804 <arm_radix4_butterfly_inverse_q31+0x380>
 800788e:	b01f      	add	sp, #124	; 0x7c
 8007890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007894 <__libc_init_array>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	4d0d      	ldr	r5, [pc, #52]	; (80078cc <__libc_init_array+0x38>)
 8007898:	4c0d      	ldr	r4, [pc, #52]	; (80078d0 <__libc_init_array+0x3c>)
 800789a:	1b64      	subs	r4, r4, r5
 800789c:	10a4      	asrs	r4, r4, #2
 800789e:	2600      	movs	r6, #0
 80078a0:	42a6      	cmp	r6, r4
 80078a2:	d109      	bne.n	80078b8 <__libc_init_array+0x24>
 80078a4:	4d0b      	ldr	r5, [pc, #44]	; (80078d4 <__libc_init_array+0x40>)
 80078a6:	4c0c      	ldr	r4, [pc, #48]	; (80078d8 <__libc_init_array+0x44>)
 80078a8:	f000 f820 	bl	80078ec <_init>
 80078ac:	1b64      	subs	r4, r4, r5
 80078ae:	10a4      	asrs	r4, r4, #2
 80078b0:	2600      	movs	r6, #0
 80078b2:	42a6      	cmp	r6, r4
 80078b4:	d105      	bne.n	80078c2 <__libc_init_array+0x2e>
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80078bc:	4798      	blx	r3
 80078be:	3601      	adds	r6, #1
 80078c0:	e7ee      	b.n	80078a0 <__libc_init_array+0xc>
 80078c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c6:	4798      	blx	r3
 80078c8:	3601      	adds	r6, #1
 80078ca:	e7f2      	b.n	80078b2 <__libc_init_array+0x1e>
 80078cc:	0802a468 	.word	0x0802a468
 80078d0:	0802a468 	.word	0x0802a468
 80078d4:	0802a468 	.word	0x0802a468
 80078d8:	0802a46c 	.word	0x0802a46c

080078dc <memset>:
 80078dc:	4402      	add	r2, r0
 80078de:	4603      	mov	r3, r0
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d100      	bne.n	80078e6 <memset+0xa>
 80078e4:	4770      	bx	lr
 80078e6:	f803 1b01 	strb.w	r1, [r3], #1
 80078ea:	e7f9      	b.n	80078e0 <memset+0x4>

080078ec <_init>:
 80078ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ee:	bf00      	nop
 80078f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f2:	bc08      	pop	{r3}
 80078f4:	469e      	mov	lr, r3
 80078f6:	4770      	bx	lr

080078f8 <_fini>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	bf00      	nop
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr
